(globalThis.TURBOPACK = globalThis.TURBOPACK || []).push(["static/chunks/node_modules_@vidstack_react_dev_chunks_vidstack-3ZPG_odG_14aad486.js", {

"[project]/node_modules/@vidstack/react/dev/chunks/vidstack-3ZPG_odG.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, d: __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "HLSProvider": (()=>HLSProvider)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$vidstack$2f$react$2f$dev$2f$chunks$2f$vidstack$2d$D_bWd66h$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@vidstack/react/dev/chunks/vidstack-D_bWd66h.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$vidstack$2f$react$2f$dev$2f$chunks$2f$vidstack$2d$DUlCophs$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@vidstack/react/dev/chunks/vidstack-DUlCophs.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/next/dist/compiled/react/index.js [app-client] (ecmascript)");
"use client";
;
;
;
;
const toDOMEventType = (type)=>(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$vidstack$2f$react$2f$dev$2f$chunks$2f$vidstack$2d$D_bWd66h$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["camelToKebabCase"])(type);
class HLSController {
    #video;
    #ctx;
    #instance = null;
    #stopLiveSync = null;
    config = {};
    #callbacks = /* @__PURE__ */ new Set();
    get instance() {
        return this.#instance;
    }
    constructor(video, ctx){
        this.#video = video;
        this.#ctx = ctx;
    }
    setup(ctor) {
        const { streamType } = this.#ctx.$state;
        const isLive = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$vidstack$2f$react$2f$dev$2f$chunks$2f$vidstack$2d$D_bWd66h$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["peek"])(streamType).includes("live"), isLiveLowLatency = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$vidstack$2f$react$2f$dev$2f$chunks$2f$vidstack$2d$D_bWd66h$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["peek"])(streamType).includes("ll-");
        this.#instance = new ctor({
            lowLatencyMode: isLiveLowLatency,
            backBufferLength: isLiveLowLatency ? 4 : isLive ? 8 : void 0,
            renderTextTracksNatively: false,
            ...this.config
        });
        const dispatcher = this.#dispatchHLSEvent.bind(this);
        for (const event of Object.values(ctor.Events))this.#instance.on(event, dispatcher);
        this.#instance.on(ctor.Events.ERROR, this.#onError.bind(this));
        for (const callback of this.#callbacks)callback(this.#instance);
        this.#ctx.player.dispatch("hls-instance", {
            detail: this.#instance
        });
        this.#instance.attachMedia(this.#video);
        this.#instance.on(ctor.Events.AUDIO_TRACK_SWITCHED, this.#onAudioSwitch.bind(this));
        this.#instance.on(ctor.Events.LEVEL_SWITCHED, this.#onLevelSwitched.bind(this));
        this.#instance.on(ctor.Events.LEVEL_LOADED, this.#onLevelLoaded.bind(this));
        this.#instance.on(ctor.Events.LEVEL_UPDATED, this.#onLevelUpdated.bind(this));
        this.#instance.on(ctor.Events.NON_NATIVE_TEXT_TRACKS_FOUND, this.#onTracksFound.bind(this));
        this.#instance.on(ctor.Events.CUES_PARSED, this.#onCuesParsed.bind(this));
        this.#ctx.qualities[__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$vidstack$2f$react$2f$dev$2f$chunks$2f$vidstack$2d$DUlCophs$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["QualitySymbol"].enableAuto] = this.#enableAutoQuality.bind(this);
        (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$vidstack$2f$react$2f$dev$2f$chunks$2f$vidstack$2d$D_bWd66h$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["listenEvent"])(this.#ctx.qualities, "change", this.#onUserQualityChange.bind(this));
        (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$vidstack$2f$react$2f$dev$2f$chunks$2f$vidstack$2d$D_bWd66h$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["listenEvent"])(this.#ctx.audioTracks, "change", this.#onUserAudioChange.bind(this));
        this.#stopLiveSync = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$vidstack$2f$react$2f$dev$2f$chunks$2f$vidstack$2d$D_bWd66h$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["effect"])(this.#liveSync.bind(this));
    }
    #createDOMEvent(type, data) {
        return new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$vidstack$2f$react$2f$dev$2f$chunks$2f$vidstack$2d$D_bWd66h$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["DOMEvent"](toDOMEventType(type), {
            detail: data
        });
    }
    #liveSync() {
        if (!this.#ctx.$state.live()) return;
        const raf = new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$vidstack$2f$react$2f$dev$2f$chunks$2f$vidstack$2d$DUlCophs$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["RAFLoop"](this.#liveSyncPosition.bind(this));
        raf.start();
        return raf.stop.bind(raf);
    }
    #liveSyncPosition() {
        this.#ctx.$state.liveSyncPosition.set(this.#instance?.liveSyncPosition ?? Infinity);
    }
    #dispatchHLSEvent(type, data) {
        this.#ctx.player?.dispatch(this.#createDOMEvent(type, data));
    }
    #onTracksFound(eventType, data) {
        const event = this.#createDOMEvent(eventType, data);
        let currentTrack = -1;
        for(let i = 0; i < data.tracks.length; i++){
            const nonNativeTrack = data.tracks[i], init = nonNativeTrack.subtitleTrack ?? nonNativeTrack.closedCaptions, track = new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$vidstack$2f$react$2f$dev$2f$chunks$2f$vidstack$2d$DUlCophs$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["TextTrack"]({
                id: `hls-${nonNativeTrack.kind}-${i}`,
                src: init?.url,
                label: nonNativeTrack.label,
                language: init?.lang,
                kind: nonNativeTrack.kind,
                default: nonNativeTrack.default
            });
            track[__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$vidstack$2f$react$2f$dev$2f$chunks$2f$vidstack$2d$DUlCophs$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["TextTrackSymbol"].readyState] = 2;
            track[__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$vidstack$2f$react$2f$dev$2f$chunks$2f$vidstack$2d$DUlCophs$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["TextTrackSymbol"].onModeChange] = ()=>{
                if (track.mode === "showing") {
                    this.#instance.subtitleTrack = i;
                    currentTrack = i;
                } else if (currentTrack === i) {
                    this.#instance.subtitleTrack = -1;
                    currentTrack = -1;
                }
            };
            this.#ctx.textTracks.add(track, event);
        }
    }
    #onCuesParsed(eventType, data) {
        const index = this.#instance?.subtitleTrack, track = this.#ctx.textTracks.getById(`hls-${data.type}-${index}`);
        if (!track) return;
        const event = this.#createDOMEvent(eventType, data);
        for (const cue of data.cues){
            cue.positionAlign = "auto";
            track.addCue(cue, event);
        }
    }
    #onAudioSwitch(eventType, data) {
        const track = this.#ctx.audioTracks[data.id];
        if (track) {
            const trigger = this.#createDOMEvent(eventType, data);
            this.#ctx.audioTracks[__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$vidstack$2f$react$2f$dev$2f$chunks$2f$vidstack$2d$DUlCophs$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["ListSymbol"].select](track, true, trigger);
        }
    }
    #onLevelSwitched(eventType, data) {
        const quality = this.#ctx.qualities[data.level];
        if (quality) {
            const trigger = this.#createDOMEvent(eventType, data);
            this.#ctx.qualities[__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$vidstack$2f$react$2f$dev$2f$chunks$2f$vidstack$2d$DUlCophs$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["ListSymbol"].select](quality, true, trigger);
        }
    }
    #onLevelUpdated(eventType, data) {
        if (data.details.totalduration > 0) {
            this.#ctx.$state.inferredLiveDVRWindow.set(data.details.totalduration);
        }
    }
    #onLevelLoaded(eventType, data) {
        if (this.#ctx.$state.canPlay()) return;
        const { type, live, totalduration: duration, targetduration } = data.details, trigger = this.#createDOMEvent(eventType, data);
        this.#ctx.notify("stream-type-change", live ? type === "EVENT" && Number.isFinite(duration) && targetduration >= 10 ? "live:dvr" : "live" : "on-demand", trigger);
        this.#ctx.notify("duration-change", duration, trigger);
        const media = this.#instance.media;
        if (this.#instance.currentLevel === -1) {
            this.#ctx.qualities[__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$vidstack$2f$react$2f$dev$2f$chunks$2f$vidstack$2d$DUlCophs$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["QualitySymbol"].setAuto](true, trigger);
        }
        for (const remoteTrack of this.#instance.audioTracks){
            const localTrack = {
                id: remoteTrack.id.toString(),
                label: remoteTrack.name,
                language: remoteTrack.lang || "",
                kind: "main"
            };
            this.#ctx.audioTracks[__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$vidstack$2f$react$2f$dev$2f$chunks$2f$vidstack$2d$DUlCophs$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["ListSymbol"].add](localTrack, trigger);
        }
        for (const level of this.#instance.levels){
            const videoQuality = {
                id: level.id?.toString() ?? level.height + "p",
                width: level.width,
                height: level.height,
                codec: level.codecSet,
                bitrate: level.bitrate
            };
            this.#ctx.qualities[__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$vidstack$2f$react$2f$dev$2f$chunks$2f$vidstack$2d$DUlCophs$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["ListSymbol"].add](videoQuality, trigger);
        }
        media.dispatchEvent(new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$vidstack$2f$react$2f$dev$2f$chunks$2f$vidstack$2d$D_bWd66h$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["DOMEvent"]("canplay", {
            trigger
        }));
    }
    #onError(eventType, data) {
        {
            this.#ctx.logger?.errorGroup(`[vidstack] HLS error \`${eventType}\``).labelledLog("Media Element", this.#instance?.media).labelledLog("HLS Instance", this.#instance).labelledLog("Event Type", eventType).labelledLog("Data", data).labelledLog("Src", (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$vidstack$2f$react$2f$dev$2f$chunks$2f$vidstack$2d$D_bWd66h$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["peek"])(this.#ctx.$state.source)).labelledLog("Media Store", {
                ...this.#ctx.$state
            }).dispatch();
        }
        if (data.fatal) {
            switch(data.type){
                case "mediaError":
                    this.#instance?.recoverMediaError();
                    break;
                default:
                    this.#onFatalError(data.error);
                    break;
            }
        }
    }
    #onFatalError(error) {
        this.#ctx.notify("error", {
            message: error.message,
            code: 1,
            error
        });
    }
    #enableAutoQuality() {
        if (this.#instance) this.#instance.currentLevel = -1;
    }
    #onUserQualityChange() {
        const { qualities } = this.#ctx;
        if (!this.#instance || qualities.auto) return;
        this.#instance[qualities.switch + "Level"] = qualities.selectedIndex;
        if (__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$vidstack$2f$react$2f$dev$2f$chunks$2f$vidstack$2d$DUlCophs$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["IS_CHROME"]) {
            this.#video.currentTime = this.#video.currentTime;
        }
    }
    #onUserAudioChange() {
        const { audioTracks } = this.#ctx;
        if (this.#instance && this.#instance.audioTrack !== audioTracks.selectedIndex) {
            this.#instance.audioTrack = audioTracks.selectedIndex;
        }
    }
    onInstance(callback) {
        this.#callbacks.add(callback);
        return ()=>this.#callbacks.delete(callback);
    }
    loadSource(src) {
        if (!(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$vidstack$2f$react$2f$dev$2f$chunks$2f$vidstack$2d$D_bWd66h$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["isString"])(src.src)) return;
        this.#instance?.loadSource(src.src);
    }
    destroy() {
        this.#instance?.destroy();
        this.#instance = null;
        this.#stopLiveSync?.();
        this.#stopLiveSync = null;
        this.#ctx?.logger?.info("\u{1F3D7}\uFE0F Destroyed HLS instance");
    }
}
class HLSLibLoader {
    #lib;
    #ctx;
    #callback;
    constructor(lib, ctx, callback){
        this.#lib = lib;
        this.#ctx = ctx;
        this.#callback = callback;
        this.#startLoading();
    }
    async #startLoading() {
        this.#ctx.logger?.info("\u{1F3D7}\uFE0F Loading HLS Library");
        const callbacks = {
            onLoadStart: this.#onLoadStart.bind(this),
            onLoaded: this.#onLoaded.bind(this),
            onLoadError: this.#onLoadError.bind(this)
        };
        let ctor = await loadHLSScript(this.#lib, callbacks);
        if ((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$vidstack$2f$react$2f$dev$2f$chunks$2f$vidstack$2d$D_bWd66h$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["isUndefined"])(ctor) && !(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$vidstack$2f$react$2f$dev$2f$chunks$2f$vidstack$2d$D_bWd66h$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["isString"])(this.#lib)) ctor = await importHLS(this.#lib, callbacks);
        if (!ctor) return null;
        if (!ctor.isSupported()) {
            const message = "[vidstack] `hls.js` is not supported in this environment";
            this.#ctx.logger?.error(message);
            this.#ctx.player.dispatch(new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$vidstack$2f$react$2f$dev$2f$chunks$2f$vidstack$2d$D_bWd66h$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["DOMEvent"]("hls-unsupported"));
            this.#ctx.notify("error", {
                message,
                code: 4
            });
            return null;
        }
        return ctor;
    }
    #onLoadStart() {
        {
            this.#ctx.logger?.infoGroup("Starting to load `hls.js`").labelledLog("URL", this.#lib).dispatch();
        }
        this.#ctx.player.dispatch(new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$vidstack$2f$react$2f$dev$2f$chunks$2f$vidstack$2d$D_bWd66h$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["DOMEvent"]("hls-lib-load-start"));
    }
    #onLoaded(ctor) {
        {
            this.#ctx.logger?.infoGroup("Loaded `hls.js`").labelledLog("Library", this.#lib).labelledLog("Constructor", ctor).dispatch();
        }
        this.#ctx.player.dispatch(new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$vidstack$2f$react$2f$dev$2f$chunks$2f$vidstack$2d$D_bWd66h$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["DOMEvent"]("hls-lib-loaded", {
            detail: ctor
        }));
        this.#callback(ctor);
    }
    #onLoadError(e) {
        const error = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$vidstack$2f$react$2f$dev$2f$chunks$2f$vidstack$2d$DUlCophs$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["coerceToError"])(e);
        {
            this.#ctx.logger?.errorGroup("[vidstack] Failed to load `hls.js`").labelledLog("Library", this.#lib).labelledLog("Error", e).dispatch();
        }
        this.#ctx.player.dispatch(new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$vidstack$2f$react$2f$dev$2f$chunks$2f$vidstack$2d$D_bWd66h$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["DOMEvent"]("hls-lib-load-error", {
            detail: error
        }));
        this.#ctx.notify("error", {
            message: error.message,
            code: 4,
            error
        });
    }
}
async function importHLS(loader, callbacks = {}) {
    if ((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$vidstack$2f$react$2f$dev$2f$chunks$2f$vidstack$2d$D_bWd66h$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["isUndefined"])(loader)) return void 0;
    callbacks.onLoadStart?.();
    if (loader.prototype && loader.prototype !== Function) {
        callbacks.onLoaded?.(loader);
        return loader;
    }
    try {
        const ctor = (await loader())?.default;
        if (ctor && !!ctor.isSupported) {
            callbacks.onLoaded?.(ctor);
        } else {
            throw Error(("TURBOPACK compile-time truthy", 1) ? "[vidstack] failed importing `hls.js`. Dynamic import returned invalid constructor." : ("TURBOPACK unreachable", undefined));
        }
        return ctor;
    } catch (err) {
        callbacks.onLoadError?.(err);
    }
    return void 0;
}
async function loadHLSScript(src, callbacks = {}) {
    if (!(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$vidstack$2f$react$2f$dev$2f$chunks$2f$vidstack$2d$D_bWd66h$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["isString"])(src)) return void 0;
    callbacks.onLoadStart?.();
    try {
        await (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$vidstack$2f$react$2f$dev$2f$chunks$2f$vidstack$2d$DUlCophs$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["loadScript"])(src);
        if (!(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$vidstack$2f$react$2f$dev$2f$chunks$2f$vidstack$2d$D_bWd66h$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["isFunction"])(window.Hls)) {
            throw Error(("TURBOPACK compile-time truthy", 1) ? "[vidstack] failed loading `hls.js`. Could not find a valid `Hls` constructor on window" : ("TURBOPACK unreachable", undefined));
        }
        const ctor = window.Hls;
        callbacks.onLoaded?.(ctor);
        return ctor;
    } catch (err) {
        callbacks.onLoadError?.(err);
    }
    return void 0;
}
const JS_DELIVR_CDN = "https://cdn.jsdelivr.net";
class HLSProvider extends __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$vidstack$2f$react$2f$dev$2f$chunks$2f$vidstack$2d$DUlCophs$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["VideoProvider"] {
    $$PROVIDER_TYPE = "HLS";
    #ctor = null;
    #controller = new HLSController(this.video, this.ctx);
    /**
   * The `hls.js` constructor.
   */ get ctor() {
        return this.#ctor;
    }
    /**
   * The current `hls.js` instance.
   */ get instance() {
        return this.#controller.instance;
    }
    /**
   * Whether `hls.js` is supported in this environment.
   */ static supported = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$vidstack$2f$react$2f$dev$2f$chunks$2f$vidstack$2d$DUlCophs$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["isHLSSupported"])();
    get type() {
        return "hls";
    }
    get canLiveSync() {
        return true;
    }
    #library = `${JS_DELIVR_CDN}/npm/hls.js@^1.5.0/dist/hls${".js"}`;
    /**
   * The `hls.js` configuration object.
   *
   * @see {@link https://github.com/video-dev/hls.js/blob/master/docs/API.md#fine-tuning}
   */ get config() {
        return this.#controller.config;
    }
    set config(config) {
        this.#controller.config = config;
    }
    /**
   * The `hls.js` constructor (supports dynamic imports) or a URL of where it can be found.
   *
   * @defaultValue `https://cdn.jsdelivr.net/npm/hls.js@^1.0.0/dist/hls.min.js`
   */ get library() {
        return this.#library;
    }
    set library(library) {
        this.#library = library;
    }
    preconnect() {
        if (!(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$vidstack$2f$react$2f$dev$2f$chunks$2f$vidstack$2d$D_bWd66h$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["isString"])(this.#library)) return;
        (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$vidstack$2f$react$2f$dev$2f$chunks$2f$vidstack$2d$DUlCophs$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["preconnect"])(this.#library);
    }
    setup() {
        super.setup();
        new HLSLibLoader(this.#library, this.ctx, (ctor)=>{
            this.#ctor = ctor;
            this.#controller.setup(ctor);
            this.ctx.notify("provider-setup", this);
            const src = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$vidstack$2f$react$2f$dev$2f$chunks$2f$vidstack$2d$D_bWd66h$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["peek"])(this.ctx.$state.source);
            if (src) this.loadSource(src);
        });
    }
    async loadSource(src, preload) {
        if (!(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$vidstack$2f$react$2f$dev$2f$chunks$2f$vidstack$2d$D_bWd66h$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["isString"])(src.src)) {
            this.removeSource();
            return;
        }
        this.media.preload = preload || "";
        this.appendSource(src, "application/x-mpegurl");
        this.#controller.loadSource(src);
        this.currentSrc = src;
    }
    /**
   * The given callback is invoked when a new `hls.js` instance is created and right before it's
   * attached to media.
   */ onInstance(callback) {
        const instance = this.#controller.instance;
        if (instance) callback(instance);
        return this.#controller.onInstance(callback);
    }
    destroy() {
        this.#controller.destroy();
    }
}
;
}}),
}]);

//# sourceMappingURL=node_modules_%40vidstack_react_dev_chunks_vidstack-3ZPG_odG_14aad486.js.map