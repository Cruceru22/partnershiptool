{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 7, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 8, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 176, "column": 0}, "map": {"version":3,"sources":["file:///Users/andreicruceru/comment.video/packages/db/src/auth-schema.ts"],"sourcesContent":["import {\n  boolean,\n  integer,\n  pgTable,\n  text,\n  timestamp,\n} from \"drizzle-orm/pg-core\";\n\nexport const user = pgTable(\"user\", {\n  id: text(\"id\").primaryKey(),\n  name: text(\"name\").notNull(),\n  email: text(\"email\").notNull().unique(),\n  emailVerified: boolean(\"email_verified\").notNull(),\n  image: text(\"image\"),\n  createdAt: timestamp(\"created_at\").notNull(),\n  updatedAt: timestamp(\"updated_at\").notNull(),\n  stripeCustomerId: text(\"stripe_customer_id\"),\n});\n\nexport const session = pgTable(\"session\", {\n  id: text(\"id\").primaryKey(),\n  expiresAt: timestamp(\"expires_at\").notNull(),\n  token: text(\"token\").notNull().unique(),\n  createdAt: timestamp(\"created_at\").notNull(),\n  updatedAt: timestamp(\"updated_at\").notNull(),\n  ipAddress: text(\"ip_address\"),\n  userAgent: text(\"user_agent\"),\n  userId: text(\"user_id\")\n    .notNull()\n    .references(() => user.id, { onDelete: \"cascade\" }),\n  activeOrganizationId: text(\"active_organization_id\"),\n});\n\nexport const account = pgTable(\"account\", {\n  id: text(\"id\").primaryKey(),\n  accountId: text(\"account_id\").notNull(),\n  providerId: text(\"provider_id\").notNull(),\n  userId: text(\"user_id\")\n    .notNull()\n    .references(() => user.id, { onDelete: \"cascade\" }),\n  accessToken: text(\"access_token\"),\n  refreshToken: text(\"refresh_token\"),\n  idToken: text(\"id_token\"),\n  accessTokenExpiresAt: timestamp(\"access_token_expires_at\"),\n  refreshTokenExpiresAt: timestamp(\"refresh_token_expires_at\"),\n  scope: text(\"scope\"),\n  password: text(\"password\"),\n  createdAt: timestamp(\"created_at\").notNull(),\n  updatedAt: timestamp(\"updated_at\").notNull(),\n});\n\nexport const verification = pgTable(\"verification\", {\n  id: text(\"id\").primaryKey(),\n  identifier: text(\"identifier\").notNull(),\n  value: text(\"value\").notNull(),\n  expiresAt: timestamp(\"expires_at\").notNull(),\n  createdAt: timestamp(\"created_at\"),\n  updatedAt: timestamp(\"updated_at\"),\n});\n\nexport const organization = pgTable(\"organization\", {\n  id: text(\"id\").primaryKey(),\n  name: text(\"name\").notNull(),\n  slug: text(\"slug\").unique(),\n  logo: text(\"logo\"),\n  createdAt: timestamp(\"created_at\").notNull(),\n  metadata: text(\"metadata\"),\n});\n\nexport const member = pgTable(\"member\", {\n  id: text(\"id\").primaryKey(),\n  organizationId: text(\"organization_id\")\n    .notNull()\n    .references(() => organization.id, { onDelete: \"cascade\" }),\n  userId: text(\"user_id\")\n    .notNull()\n    .references(() => user.id, { onDelete: \"cascade\" }),\n  role: text(\"role\").notNull(),\n  createdAt: timestamp(\"created_at\").notNull(),\n});\n\nexport const invitation = pgTable(\"invitation\", {\n  id: text(\"id\").primaryKey(),\n  organizationId: text(\"organization_id\")\n    .notNull()\n    .references(() => organization.id, { onDelete: \"cascade\" }),\n  email: text(\"email\").notNull(),\n  role: text(\"role\"),\n  status: text(\"status\").notNull(),\n  expiresAt: timestamp(\"expires_at\").notNull(),\n  inviterId: text(\"inviter_id\")\n    .notNull()\n    .references(() => user.id, { onDelete: \"cascade\" }),\n});\n\nexport const subscription = pgTable(\"subscription\", {\n  id: text(\"id\").primaryKey(),\n  plan: text(\"plan\").notNull(),\n  referenceId: text(\"reference_id\").notNull(),\n  stripeCustomerId: text(\"stripe_customer_id\"),\n  stripeSubscriptionId: text(\"stripe_subscription_id\"),\n  status: text(\"status\"),\n  periodStart: timestamp(\"period_start\"),\n  periodEnd: timestamp(\"period_end\"),\n  cancelAtPeriodEnd: boolean(\"cancel_at_period_end\"),\n  seats: integer(\"seats\"),\n});\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 284, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 290, "column": 0}, "map": {"version":3,"sources":["file:///Users/andreicruceru/comment.video/packages/db/src/schema.ts"],"sourcesContent":["import { relations, sql } from \"drizzle-orm\";\nimport { pgTable, unique } from \"drizzle-orm/pg-core\";\n\nimport { organization, user } from \"./auth-schema\";\n\nexport const Video = pgTable(\"video\", (t) => ({\n  id: t.uuid().notNull().primaryKey().defaultRandom(),\n  title: t.varchar({ length: 256 }).notNull(),\n  description: t.text(),\n\n  url: t.text(),\n\n  organizationId: t\n    .text(\"organization_id\")\n    .notNull()\n    .references(() => organization.id),\n\n  createdAt: t.timestamp().defaultNow().notNull(),\n  updatedAt: t\n    .timestamp({ mode: \"date\", withTimezone: true })\n    .$onUpdateFn(() => new Date()),\n}));\n\nexport const VideoComment = pgTable(\"video_comment\", (t) => ({\n  id: t.uuid().notNull().primaryKey().defaultRandom(),\n\n  content: t.text(),\n\n  startTime: t.real(),\n  endTime: t.real(),\n\n  attachments: t.json(),\n  metadata: t.json(),\n\n  createdAt: t.timestamp().defaultNow().notNull(),\n  updatedAt: t\n    .timestamp({ mode: \"date\", withTimezone: true })\n    .$onUpdateFn(() => sql`now()`),\n\n  videoId: t\n    .uuid(\"video_id\")\n    .notNull()\n    .references(() => Video.id, {\n      onDelete: \"cascade\",\n    }),\n\n  reviewerId: t.uuid(\"reviewer_id\").references(() => Reviewers.id),\n}));\n\nexport const Reviewers = pgTable(\n  \"reviewers\",\n  (t) => ({\n    id: t.uuid().notNull().primaryKey().defaultRandom(),\n\n    anonUserId: t.text(\"anon_user_id\"),\n    userId: t.text(\"user_id\").references(() => user.id),\n\n    videoId: t\n      .uuid(\"video_id\")\n      .notNull()\n      .references(() => Video.id),\n  }),\n  (t) => [unique().on(t.videoId, t.userId, t.anonUserId).nullsNotDistinct()],\n);\n\nexport const videoCommentRelations = relations(VideoComment, ({ one }) => ({\n  video: one(Video, {\n    fields: [VideoComment.videoId],\n    references: [Video.id],\n  }),\n  reviewer: one(Reviewers, {\n    fields: [VideoComment.reviewerId],\n    references: [Reviewers.id],\n  }),\n}));\n\nexport const reviewerRelations = relations(Reviewers, ({ many, one }) => ({\n  comments: many(VideoComment),\n  user: one(user, {\n    fields: [Reviewers.userId],\n    references: [user.id],\n  }),\n}));\n\nexport * from \"./auth-schema\";\n"],"names":[],"mappings":";;;;;;;AAAA;AAAA;AACA;AAAA;AAEA;;;;AAEO,MAAM,QAAQ,CAAA,GAAA,uJAAA,CAAA,UAAO,AAAD,EAAE,SAAS,CAAC,IAAM,CAAC;QAC5C,IAAI,EAAE,IAAI,GAAG,OAAO,GAAG,UAAU,GAAG,aAAa;QACjD,OAAO,EAAE,OAAO,CAAC;YAAE,QAAQ;QAAI,GAAG,OAAO;QACzC,aAAa,EAAE,IAAI;QAEnB,KAAK,EAAE,IAAI;QAEX,gBAAgB,EACb,IAAI,CAAC,mBACL,OAAO,GACP,UAAU,CAAC,IAAM,yIAAA,CAAA,eAAY,CAAC,EAAE;QAEnC,WAAW,EAAE,SAAS,GAAG,UAAU,GAAG,OAAO;QAC7C,WAAW,EACR,SAAS,CAAC;YAAE,MAAM;YAAQ,cAAc;QAAK,GAC7C,WAAW,CAAC,IAAM,IAAI;IAC3B,CAAC;AAEM,MAAM,eAAe,CAAA,GAAA,uJAAA,CAAA,UAAO,AAAD,EAAE,iBAAiB,CAAC,IAAM,CAAC;QAC3D,IAAI,EAAE,IAAI,GAAG,OAAO,GAAG,UAAU,GAAG,aAAa;QAEjD,SAAS,EAAE,IAAI;QAEf,WAAW,EAAE,IAAI;QACjB,SAAS,EAAE,IAAI;QAEf,aAAa,EAAE,IAAI;QACnB,UAAU,EAAE,IAAI;QAEhB,WAAW,EAAE,SAAS,GAAG,UAAU,GAAG,OAAO;QAC7C,WAAW,EACR,SAAS,CAAC;YAAE,MAAM;YAAQ,cAAc;QAAK,GAC7C,WAAW,CAAC,IAAM,8IAAA,CAAA,MAAG,CAAC,KAAK,CAAC;QAE/B,SAAS,EACN,IAAI,CAAC,YACL,OAAO,GACP,UAAU,CAAC,IAAM,MAAM,EAAE,EAAE;YAC1B,UAAU;QACZ;QAEF,YAAY,EAAE,IAAI,CAAC,eAAe,UAAU,CAAC,IAAM,UAAU,EAAE;IACjE,CAAC;AAEM,MAAM,YAAY,CAAA,GAAA,uJAAA,CAAA,UAAO,AAAD,EAC7B,aACA,CAAC,IAAM,CAAC;QACN,IAAI,EAAE,IAAI,GAAG,OAAO,GAAG,UAAU,GAAG,aAAa;QAEjD,YAAY,EAAE,IAAI,CAAC;QACnB,QAAQ,EAAE,IAAI,CAAC,WAAW,UAAU,CAAC,IAAM,yIAAA,CAAA,OAAI,CAAC,EAAE;QAElD,SAAS,EACN,IAAI,CAAC,YACL,OAAO,GACP,UAAU,CAAC,IAAM,MAAM,EAAE;IAC9B,CAAC,GACD,CAAC,IAAM;QAAC,CAAA,GAAA,sKAAA,CAAA,SAAM,AAAD,IAAI,EAAE,CAAC,EAAE,OAAO,EAAE,EAAE,MAAM,EAAE,EAAE,UAAU,EAAE,gBAAgB;KAAG;AAGrE,MAAM,wBAAwB,CAAA,GAAA,6IAAA,CAAA,YAAS,AAAD,EAAE,cAAc,CAAC,EAAE,GAAG,EAAE,GAAK,CAAC;QACzE,OAAO,IAAI,OAAO;YAChB,QAAQ;gBAAC,aAAa,OAAO;aAAC;YAC9B,YAAY;gBAAC,MAAM,EAAE;aAAC;QACxB;QACA,UAAU,IAAI,WAAW;YACvB,QAAQ;gBAAC,aAAa,UAAU;aAAC;YACjC,YAAY;gBAAC,UAAU,EAAE;aAAC;QAC5B;IACF,CAAC;AAEM,MAAM,oBAAoB,CAAA,GAAA,6IAAA,CAAA,YAAS,AAAD,EAAE,WAAW,CAAC,EAAE,IAAI,EAAE,GAAG,EAAE,GAAK,CAAC;QACxE,UAAU,KAAK;QACf,MAAM,IAAI,yIAAA,CAAA,OAAI,EAAE;YACd,QAAQ;gBAAC,UAAU,MAAM;aAAC;YAC1B,YAAY;gBAAC,yIAAA,CAAA,OAAI,CAAC,EAAE;aAAC;QACvB;IACF,CAAC","debugId":null}},
    {"offset": {"line": 374, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 435, "column": 0}, "map": {"version":3,"sources":["file:///Users/andreicruceru/comment.video/packages/db/src/client.ts"],"sourcesContent":["import { drizzle } from \"drizzle-orm/node-postgres\";\n\nimport * as schema from \"./schema\";\n\n// eslint-disable-next-line @typescript-eslint/no-non-null-assertion\nexport const db = drizzle(process.env.POSTGRES_URL!, {\n  schema,\n  casing: \"snake_case\",\n});\n"],"names":[],"mappings":";;;AAAA;AAEA;AAAA;;;AAGO,MAAM,KAAK,CAAA,GAAA,8JAAA,CAAA,UAAO,AAAD,EAAE,QAAQ,GAAG,CAAC,YAAY,EAAG;IACnD,QAAA;IACA,QAAQ;AACV","debugId":null}},
    {"offset": {"line": 447, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 453, "column": 0}, "map": {"version":3,"sources":["file:///Users/andreicruceru/comment.video/packages/auth/env.ts"],"sourcesContent":["import { createEnv } from \"@t3-oss/env-nextjs\";\nimport { z } from \"zod\";\n\nexport const env = createEnv({\n  server: {\n    GOOGLE_CLIENT_ID: z.string().min(1),\n    GOOGLE_CLIENT_SECRET: z.string().min(1),\n    RESEND_API_KEY: z.string().min(1),\n\n    BETTER_AUTH_URL: z.string().min(1),\n\n    AUTH_SECRET:\n      process.env.NODE_ENV === \"production\"\n        ? z.string().min(1)\n        : z.string().min(1).optional(),\n    NODE_ENV: z.enum([\"development\", \"production\"]).optional(),\n\n    STRIPE_SECRET_KEY: z.string().min(1),\n    STRIPE_WEBHOOK_SECRET:\n      process.env.NODE_ENV === \"production\"\n        ? z.string().min(1)\n        : z.string().min(1).optional(),\n  },\n  client: {},\n  experimental__runtimeEnv: {},\n  skipValidation:\n    !!process.env.CI || process.env.npm_lifecycle_event === \"lint\",\n});\n"],"names":[],"mappings":";;;AAAA;AACA;;;AAEO,MAAM,MAAM,CAAA,GAAA,+JAAA,CAAA,YAAS,AAAD,EAAE;IAC3B,QAAQ;QACN,kBAAkB,sIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,GAAG,CAAC;QACjC,sBAAsB,sIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,GAAG,CAAC;QACrC,gBAAgB,sIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,GAAG,CAAC;QAE/B,iBAAiB,sIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,GAAG,CAAC;QAEhC,aACE,6EAEI,sIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,GAAG,CAAC,GAAG,QAAQ;QAChC,UAAU,sIAAA,CAAA,IAAC,CAAC,IAAI,CAAC;YAAC;YAAe;SAAa,EAAE,QAAQ;QAExD,mBAAmB,sIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,GAAG,CAAC;QAClC,uBACE,6EAEI,sIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,GAAG,CAAC,GAAG,QAAQ;IAClC;IACA,QAAQ,CAAC;IACT,0BAA0B,CAAC;IAC3B,gBACE,CAAC,CAAC,QAAQ,GAAG,CAAC,EAAE,IAAI,QAAQ,GAAG,CAAC,mBAAmB,KAAK;AAC5D","debugId":null}},
    {"offset": {"line": 478, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 484, "column": 0}, "map": {"version":3,"sources":["file:///Users/andreicruceru/comment.video/packages/auth/src/auth.ts"],"sourcesContent":["import type { BetterAuthOptions } from \"better-auth\";\nimport { expo } from \"@better-auth/expo\";\nimport { stripe } from \"@better-auth/stripe\";\nimport slugify from \"@sindresorhus/slugify\";\nimport { betterAuth } from \"better-auth\";\nimport { drizzleAdapter } from \"better-auth/adapters/drizzle\";\nimport { emailOTP, oAuthProxy, organization } from \"better-auth/plugins\";\nimport { nanoid } from \"nanoid\";\nimport { Resend } from \"resend\";\nimport Stripe from \"stripe\";\n\nimport { db } from \"@acme/db/client\";\n\nimport { env } from \"../env\";\n\nconst resend = new Resend(env.RESEND_API_KEY);\n\nconst stripeClient = new Stripe(env.STRIPE_SECRET_KEY);\n\nexport const config = {\n  database: drizzleAdapter(db, {\n    provider: \"pg\",\n  }),\n  secret: env.AUTH_SECRET,\n  plugins: [\n    oAuthProxy(),\n    expo(),\n    emailOTP({\n      async sendVerificationOTP({ email, otp, type }) {\n        // Always log the OTP to the console for testing\n        console.log(`Sending ${type} OTP to ${email}: ${otp}`);\n\n        try {\n          // In test mode, Resend only allows sending to the verified email\n          const verifiedEmail = email;\n\n          // Send the email using Resend to the verified email, but include the intended recipient in the subject\n          const { data, error } = await resend.emails.send({\n            from: \"auth@email.comment.video\",\n            to: verifiedEmail,\n            subject: `${getSubject(type)} [For: ${email}]`, // Include the intended recipient in the subject\n            html: `\n              <!DOCTYPE html>\n              <html>\n              <head>\n                <meta charset=\"utf-8\">\n                <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n                <title>${getSubject(type)}</title>\n                <style>\n                  body {\n                    font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;\n                    line-height: 1.6;\n                    color: #333;\n                    margin: 0;\n                    padding: 0;\n                    background-color: #f9f9f9;\n                  }\n                  .container {\n                    max-width: 600px;\n                    margin: 0 auto;\n                    padding: 20px;\n                    background-color: #ffffff;\n                    border-radius: 8px;\n                    box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);\n                  }\n                  .header {\n                    text-align: center;\n                    padding: 20px 0;\n                    border-bottom: 1px solid #eaeaea;\n                  }\n                  .logo {\n                    font-size: 24px;\n                    font-weight: bold;\n                    color: #4f46e5;\n                  }\n                  .content {\n                    padding: 30px 20px;\n                    text-align: center;\n                  }\n                  .code {\n                    font-size: 32px;\n                    font-weight: bold;\n                    letter-spacing: 8px;\n                    padding: 15px;\n                    margin: 25px 0;\n                    background-color: #f3f4f6;\n                    border-radius: 6px;\n                    display: inline-block;\n                  }\n                  .footer {\n                    text-align: center;\n                    padding: 20px 0;\n                    color: #6b7280;\n                    font-size: 14px;\n                    border-top: 1px solid #eaeaea;\n                  }\n                  .button {\n                    display: inline-block;\n                    padding: 12px 24px;\n                    background-color: #4f46e5;\n                    color: white;\n                    text-decoration: none;\n                    border-radius: 4px;\n                    font-weight: 600;\n                    margin-top: 20px;\n                  }\n                  .note {\n                    margin-top: 20px;\n                    font-size: 14px;\n                    color: #6b7280;\n                  }\n                </style>\n              </head>\n              <body>\n                <div class=\"container\">\n                  <div class=\"header\">\n                    <div class=\"logo\">comment.video</div>\n                  </div>\n                  <div class=\"content\">\n                    <div style=\"background-color: #ffe8e8; padding: 10px; margin-bottom: 20px; border-radius: 4px; text-align: left;\">\n                      <strong>Development Mode Notice:</strong> This email was intended for <strong>${email}</strong> but was sent to you because of Resend's test mode limitations.\n                    </div>\n                    <h2>${getEmailHeading(type)}</h2>\n                    <p>${getEmailMessage(type)}</p>\n                    <div class=\"code\">${otp}</div>\n                    <p>This code will expire in 5 minutes.</p>\n                    <p class=\"note\">If you didn't request this code, you can safely ignore this email.</p>\n                  </div>\n                  <div class=\"footer\">\n                    &copy; ${new Date().getFullYear()} comment.video. All rights reserved.\n                  </div>\n                </div>\n              </body>\n              </html>\n            `,\n          });\n\n          if (error) {\n            console.error(\"Resend API Error:\", error);\n          } else {\n            console.log(\"Email sent successfully:\", data);\n          }\n        } catch (error) {\n          console.error(\"Error sending email:\", error);\n          // Still allow the OTP to be generated even if email sending fails\n        }\n      },\n      // Set OTP length to 6 digits\n      otpLength: 6,\n      // OTP expires in 5 minutes (300 seconds)\n      expiresIn: 300,\n      // Allow automatic sign-up when the user is not registered\n      disableSignUp: false,\n    }),\n    organization(),\n    stripe({\n      stripeClient,\n      stripeWebhookSecret: env.STRIPE_WEBHOOK_SECRET ?? \"\",\n      createCustomerOnSignUp: true,\n      subscription: {\n        enabled: true,\n        authorizeReference: async ({ user, referenceId }) => {\n          const member = await db.query.member.findFirst({\n            where: (member, { eq, and }) =>\n              and(\n                eq(member.userId, user.id),\n                eq(member.organizationId, referenceId),\n              ),\n          });\n\n          return member?.role === \"owner\" || member?.role === \"admin\";\n        },\n        plans: [\n          {\n            name: \"pro\", // the name of the plan, it'll be automatically lower cased when stored in the database\n            lookupKey: \"pro_monthly\",\n            priceId: \"price_1R1Dj0EauNpNklnFp7YC2iSW\",\n            annualDiscountPriceId: \"price_1R1QYaEauNpNklnF5y6CwgFt\",\n            //TODO handle limits from stripe for each plan, sounds better\n          },\n          {\n            name: \"team\",\n            lookupKey: \"team_monthly\",\n            priceId: \"price_1R1Dk1EauNpNklnFZcleYNzg\",\n            annualDiscountPriceId: \"price_1R1QZKEauNpNklnFdSILW732\",\n            //TODO handle limits from stripe for each plan, sounds better\n          },\n          {\n            name: \"friend\",\n            lookupKey: \"friend_monthly\",\n            priceId: \"price_1R1Dk1EauNpNklnFZcleYNzg\",\n          },\n        ],\n      },\n    }),\n  ],\n  socialProviders: {\n    google: {\n      clientId: env.GOOGLE_CLIENT_ID,\n      clientSecret: env.GOOGLE_CLIENT_SECRET,\n    },\n  },\n  trustedOrigins: [\"exp://\"],\n\n  databaseHooks: {\n    session: {\n      create: {\n        before: async (session) => {\n          const member = await db.query.member.findFirst({\n            where: (org, { eq }) => eq(org.userId, session.userId),\n          });\n          return {\n            data: {\n              ...session,\n              activeOrganizationId: member?.organizationId,\n            },\n          };\n        },\n      },\n    },\n    user: {\n      create: {\n        after: async (user) => {\n          const userName = user.name;\n\n          const slug = slugify(userName, {\n            lowercase: true,\n          });\n          await auth.api.createOrganization({\n            body: {\n              userId: user.id,\n              name: `${userName}'s team`,\n              slug: `${slug}-${nanoid()}`,\n            },\n          });\n        },\n      },\n    },\n  },\n} satisfies BetterAuthOptions;\n\n// Helper function to get the subject line based on the OTP type\nfunction getSubject(type: string): string {\n  switch (type) {\n    case \"sign-in\":\n      return \"Your Sign In Code for comment.video\";\n    case \"email-verification\":\n      return \"Verify Your Email Address for comment.video\";\n    case \"forget-password\":\n      return \"Reset Your Password for comment.video\";\n    default:\n      return \"Your Verification Code for comment.video\";\n  }\n}\n\n// Helper function to get the email heading based on the OTP type\nfunction getEmailHeading(type: string): string {\n  switch (type) {\n    case \"sign-in\":\n      return \"Sign In to Your Account\";\n    case \"email-verification\":\n      return \"Verify Your Email Address\";\n    case \"forget-password\":\n      return \"Reset Your Password\";\n    default:\n      return \"Your Verification Code\";\n  }\n}\n\n// Helper function to get the email message based on the OTP type\nfunction getEmailMessage(type: string): string {\n  switch (type) {\n    case \"sign-in\":\n      return \"Use the following code to sign in to your account:\";\n    case \"email-verification\":\n      return \"To verify your email address, please enter the following code:\";\n    case \"forget-password\":\n      return \"To reset your password, please enter the following code:\";\n    default:\n      return \"Your verification code is:\";\n  }\n}\n\nexport const auth = betterAuth(config);\nexport type Session = typeof auth.$Infer.Session;\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 767, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 773, "column": 0}, "map": {"version":3,"sources":["file:///Users/andreicruceru/comment.video/packages/auth/src/index.rsc.ts"],"sourcesContent":["import { cache } from \"react\";\nimport { headers } from \"next/headers\";\n\nimport { auth } from \"./auth\";\n\nexport const getSession = async () =>\n  cache(auth.api.getSession)({\n    headers: await headers(),\n  });\n\nexport * from \"./auth\";\n"],"names":[],"mappings":";;;AAAA;AACA;AAEA;;;;AAEO,MAAM,aAAa,UACxB,CAAA,GAAA,uMAAA,CAAA,QAAK,AAAD,EAAE,iIAAA,CAAA,OAAI,CAAC,GAAG,CAAC,UAAU,EAAE;QACzB,SAAS,MAAM,CAAA,GAAA,iIAAA,CAAA,UAAO,AAAD;IACvB","debugId":null}},
    {"offset": {"line": 786, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 803, "column": 0}, "map": {"version":3,"sources":["file:///Users/andreicruceru/comment.video/apps/nextjs/src/app/api/auth/%5B...all%5D/route.ts"],"sourcesContent":["import { auth } from \"@acme/auth\";\n\nconst handler = auth.handler\n\nexport { handler as GET, handler as POST }\n"],"names":[],"mappings":";;;;AAAA;AAAA;;AAEA,MAAM,UAAU,iIAAA,CAAA,OAAI,CAAC,OAAO","debugId":null}},
    {"offset": {"line": 812, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}