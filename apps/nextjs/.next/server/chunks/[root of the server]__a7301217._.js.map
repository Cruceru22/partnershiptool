{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 7, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 8, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 176, "column": 0}, "map": {"version":3,"sources":["file:///Users/andreicruceru/comment.video/packages/db/src/auth-schema.ts"],"sourcesContent":["import {\n  boolean,\n  integer,\n  pgTable,\n  text,\n  timestamp,\n} from \"drizzle-orm/pg-core\";\n\nexport const user = pgTable(\"user\", {\n  id: text(\"id\").primaryKey(),\n  name: text(\"name\").notNull(),\n  email: text(\"email\").notNull().unique(),\n  emailVerified: boolean(\"email_verified\").notNull(),\n  image: text(\"image\"),\n  createdAt: timestamp(\"created_at\").notNull(),\n  updatedAt: timestamp(\"updated_at\").notNull(),\n  stripeCustomerId: text(\"stripe_customer_id\"),\n});\n\nexport const session = pgTable(\"session\", {\n  id: text(\"id\").primaryKey(),\n  expiresAt: timestamp(\"expires_at\").notNull(),\n  token: text(\"token\").notNull().unique(),\n  createdAt: timestamp(\"created_at\").notNull(),\n  updatedAt: timestamp(\"updated_at\").notNull(),\n  ipAddress: text(\"ip_address\"),\n  userAgent: text(\"user_agent\"),\n  userId: text(\"user_id\")\n    .notNull()\n    .references(() => user.id, { onDelete: \"cascade\" }),\n  activeOrganizationId: text(\"active_organization_id\"),\n});\n\nexport const account = pgTable(\"account\", {\n  id: text(\"id\").primaryKey(),\n  accountId: text(\"account_id\").notNull(),\n  providerId: text(\"provider_id\").notNull(),\n  userId: text(\"user_id\")\n    .notNull()\n    .references(() => user.id, { onDelete: \"cascade\" }),\n  accessToken: text(\"access_token\"),\n  refreshToken: text(\"refresh_token\"),\n  idToken: text(\"id_token\"),\n  accessTokenExpiresAt: timestamp(\"access_token_expires_at\"),\n  refreshTokenExpiresAt: timestamp(\"refresh_token_expires_at\"),\n  scope: text(\"scope\"),\n  password: text(\"password\"),\n  createdAt: timestamp(\"created_at\").notNull(),\n  updatedAt: timestamp(\"updated_at\").notNull(),\n});\n\nexport const verification = pgTable(\"verification\", {\n  id: text(\"id\").primaryKey(),\n  identifier: text(\"identifier\").notNull(),\n  value: text(\"value\").notNull(),\n  expiresAt: timestamp(\"expires_at\").notNull(),\n  createdAt: timestamp(\"created_at\"),\n  updatedAt: timestamp(\"updated_at\"),\n});\n\nexport const organization = pgTable(\"organization\", {\n  id: text(\"id\").primaryKey(),\n  name: text(\"name\").notNull(),\n  slug: text(\"slug\").unique(),\n  logo: text(\"logo\"),\n  createdAt: timestamp(\"created_at\").notNull(),\n  metadata: text(\"metadata\"),\n});\n\nexport const member = pgTable(\"member\", {\n  id: text(\"id\").primaryKey(),\n  organizationId: text(\"organization_id\")\n    .notNull()\n    .references(() => organization.id, { onDelete: \"cascade\" }),\n  userId: text(\"user_id\")\n    .notNull()\n    .references(() => user.id, { onDelete: \"cascade\" }),\n  role: text(\"role\").notNull(),\n  createdAt: timestamp(\"created_at\").notNull(),\n});\n\nexport const invitation = pgTable(\"invitation\", {\n  id: text(\"id\").primaryKey(),\n  organizationId: text(\"organization_id\")\n    .notNull()\n    .references(() => organization.id, { onDelete: \"cascade\" }),\n  email: text(\"email\").notNull(),\n  role: text(\"role\"),\n  status: text(\"status\").notNull(),\n  expiresAt: timestamp(\"expires_at\").notNull(),\n  inviterId: text(\"inviter_id\")\n    .notNull()\n    .references(() => user.id, { onDelete: \"cascade\" }),\n});\n\nexport const subscription = pgTable(\"subscription\", {\n  id: text(\"id\").primaryKey(),\n  plan: text(\"plan\").notNull(),\n  referenceId: text(\"reference_id\").notNull(),\n  stripeCustomerId: text(\"stripe_customer_id\"),\n  stripeSubscriptionId: text(\"stripe_subscription_id\"),\n  status: text(\"status\"),\n  periodStart: timestamp(\"period_start\"),\n  periodEnd: timestamp(\"period_end\"),\n  cancelAtPeriodEnd: boolean(\"cancel_at_period_end\"),\n  seats: integer(\"seats\"),\n});\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 284, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 290, "column": 0}, "map": {"version":3,"sources":["file:///Users/andreicruceru/comment.video/packages/db/src/schema.ts"],"sourcesContent":["import { relations, sql } from \"drizzle-orm\";\nimport { pgTable, unique } from \"drizzle-orm/pg-core\";\n\nimport { organization, user } from \"./auth-schema\";\n\nexport const Video = pgTable(\"video\", (t) => ({\n  id: t.uuid().notNull().primaryKey().defaultRandom(),\n  title: t.varchar({ length: 256 }).notNull(),\n  description: t.text(),\n\n  url: t.text(),\n\n  organizationId: t\n    .text(\"organization_id\")\n    .notNull()\n    .references(() => organization.id),\n\n  createdAt: t.timestamp().defaultNow().notNull(),\n  updatedAt: t\n    .timestamp({ mode: \"date\", withTimezone: true })\n    .$onUpdateFn(() => new Date()),\n}));\n\nexport const VideoComment = pgTable(\"video_comment\", (t) => ({\n  id: t.uuid().notNull().primaryKey().defaultRandom(),\n\n  content: t.text(),\n\n  startTime: t.real(),\n  endTime: t.real(),\n\n  attachments: t.json(),\n  metadata: t.json(),\n\n  createdAt: t.timestamp().defaultNow().notNull(),\n  updatedAt: t\n    .timestamp({ mode: \"date\", withTimezone: true })\n    .$onUpdateFn(() => sql`now()`),\n\n  videoId: t\n    .uuid(\"video_id\")\n    .notNull()\n    .references(() => Video.id, {\n      onDelete: \"cascade\",\n    }),\n\n  reviewerId: t.uuid(\"reviewer_id\").references(() => Reviewers.id),\n}));\n\nexport const Reviewers = pgTable(\n  \"reviewers\",\n  (t) => ({\n    id: t.uuid().notNull().primaryKey().defaultRandom(),\n\n    anonUserId: t.text(\"anon_user_id\"),\n    userId: t.text(\"user_id\").references(() => user.id),\n\n    videoId: t\n      .uuid(\"video_id\")\n      .notNull()\n      .references(() => Video.id),\n  }),\n  (t) => [unique().on(t.videoId, t.userId, t.anonUserId).nullsNotDistinct()],\n);\n\nexport const videoCommentRelations = relations(VideoComment, ({ one }) => ({\n  video: one(Video, {\n    fields: [VideoComment.videoId],\n    references: [Video.id],\n  }),\n  reviewer: one(Reviewers, {\n    fields: [VideoComment.reviewerId],\n    references: [Reviewers.id],\n  }),\n}));\n\nexport const reviewerRelations = relations(Reviewers, ({ many, one }) => ({\n  comments: many(VideoComment),\n  user: one(user, {\n    fields: [Reviewers.userId],\n    references: [user.id],\n  }),\n}));\n\nexport * from \"./auth-schema\";\n"],"names":[],"mappings":";;;;;;;AAAA;AAAA;AACA;AAAA;AAEA;;;;AAEO,MAAM,QAAQ,CAAA,GAAA,uJAAA,CAAA,UAAO,AAAD,EAAE,SAAS,CAAC,IAAM,CAAC;QAC5C,IAAI,EAAE,IAAI,GAAG,OAAO,GAAG,UAAU,GAAG,aAAa;QACjD,OAAO,EAAE,OAAO,CAAC;YAAE,QAAQ;QAAI,GAAG,OAAO;QACzC,aAAa,EAAE,IAAI;QAEnB,KAAK,EAAE,IAAI;QAEX,gBAAgB,EACb,IAAI,CAAC,mBACL,OAAO,GACP,UAAU,CAAC,IAAM,yIAAA,CAAA,eAAY,CAAC,EAAE;QAEnC,WAAW,EAAE,SAAS,GAAG,UAAU,GAAG,OAAO;QAC7C,WAAW,EACR,SAAS,CAAC;YAAE,MAAM;YAAQ,cAAc;QAAK,GAC7C,WAAW,CAAC,IAAM,IAAI;IAC3B,CAAC;AAEM,MAAM,eAAe,CAAA,GAAA,uJAAA,CAAA,UAAO,AAAD,EAAE,iBAAiB,CAAC,IAAM,CAAC;QAC3D,IAAI,EAAE,IAAI,GAAG,OAAO,GAAG,UAAU,GAAG,aAAa;QAEjD,SAAS,EAAE,IAAI;QAEf,WAAW,EAAE,IAAI;QACjB,SAAS,EAAE,IAAI;QAEf,aAAa,EAAE,IAAI;QACnB,UAAU,EAAE,IAAI;QAEhB,WAAW,EAAE,SAAS,GAAG,UAAU,GAAG,OAAO;QAC7C,WAAW,EACR,SAAS,CAAC;YAAE,MAAM;YAAQ,cAAc;QAAK,GAC7C,WAAW,CAAC,IAAM,8IAAA,CAAA,MAAG,CAAC,KAAK,CAAC;QAE/B,SAAS,EACN,IAAI,CAAC,YACL,OAAO,GACP,UAAU,CAAC,IAAM,MAAM,EAAE,EAAE;YAC1B,UAAU;QACZ;QAEF,YAAY,EAAE,IAAI,CAAC,eAAe,UAAU,CAAC,IAAM,UAAU,EAAE;IACjE,CAAC;AAEM,MAAM,YAAY,CAAA,GAAA,uJAAA,CAAA,UAAO,AAAD,EAC7B,aACA,CAAC,IAAM,CAAC;QACN,IAAI,EAAE,IAAI,GAAG,OAAO,GAAG,UAAU,GAAG,aAAa;QAEjD,YAAY,EAAE,IAAI,CAAC;QACnB,QAAQ,EAAE,IAAI,CAAC,WAAW,UAAU,CAAC,IAAM,yIAAA,CAAA,OAAI,CAAC,EAAE;QAElD,SAAS,EACN,IAAI,CAAC,YACL,OAAO,GACP,UAAU,CAAC,IAAM,MAAM,EAAE;IAC9B,CAAC,GACD,CAAC,IAAM;QAAC,CAAA,GAAA,sKAAA,CAAA,SAAM,AAAD,IAAI,EAAE,CAAC,EAAE,OAAO,EAAE,EAAE,MAAM,EAAE,EAAE,UAAU,EAAE,gBAAgB;KAAG;AAGrE,MAAM,wBAAwB,CAAA,GAAA,6IAAA,CAAA,YAAS,AAAD,EAAE,cAAc,CAAC,EAAE,GAAG,EAAE,GAAK,CAAC;QACzE,OAAO,IAAI,OAAO;YAChB,QAAQ;gBAAC,aAAa,OAAO;aAAC;YAC9B,YAAY;gBAAC,MAAM,EAAE;aAAC;QACxB;QACA,UAAU,IAAI,WAAW;YACvB,QAAQ;gBAAC,aAAa,UAAU;aAAC;YACjC,YAAY;gBAAC,UAAU,EAAE;aAAC;QAC5B;IACF,CAAC;AAEM,MAAM,oBAAoB,CAAA,GAAA,6IAAA,CAAA,YAAS,AAAD,EAAE,WAAW,CAAC,EAAE,IAAI,EAAE,GAAG,EAAE,GAAK,CAAC;QACxE,UAAU,KAAK;QACf,MAAM,IAAI,yIAAA,CAAA,OAAI,EAAE;YACd,QAAQ;gBAAC,UAAU,MAAM;aAAC;YAC1B,YAAY;gBAAC,yIAAA,CAAA,OAAI,CAAC,EAAE;aAAC;QACvB;IACF,CAAC","debugId":null}},
    {"offset": {"line": 374, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 435, "column": 0}, "map": {"version":3,"sources":["file:///Users/andreicruceru/comment.video/packages/db/src/client.ts"],"sourcesContent":["import { drizzle } from \"drizzle-orm/node-postgres\";\n\nimport * as schema from \"./schema\";\n\n// eslint-disable-next-line @typescript-eslint/no-non-null-assertion\nexport const db = drizzle(process.env.POSTGRES_URL!, {\n  schema,\n  casing: \"snake_case\",\n});\n"],"names":[],"mappings":";;;AAAA;AAEA;AAAA;;;AAGO,MAAM,KAAK,CAAA,GAAA,8JAAA,CAAA,UAAO,AAAD,EAAE,QAAQ,GAAG,CAAC,YAAY,EAAG;IACnD,QAAA;IACA,QAAQ;AACV","debugId":null}},
    {"offset": {"line": 447, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 453, "column": 0}, "map": {"version":3,"sources":["file:///Users/andreicruceru/comment.video/packages/auth/env.ts"],"sourcesContent":["import { createEnv } from \"@t3-oss/env-nextjs\";\nimport { z } from \"zod\";\n\nexport const env = createEnv({\n  server: {\n    GOOGLE_CLIENT_ID: z.string().min(1),\n    GOOGLE_CLIENT_SECRET: z.string().min(1),\n    RESEND_API_KEY: z.string().min(1),\n\n    BETTER_AUTH_URL: z.string().min(1),\n\n    AUTH_SECRET:\n      process.env.NODE_ENV === \"production\"\n        ? z.string().min(1)\n        : z.string().min(1).optional(),\n    NODE_ENV: z.enum([\"development\", \"production\"]).optional(),\n\n    STRIPE_SECRET_KEY: z.string().min(1),\n    STRIPE_WEBHOOK_SECRET:\n      process.env.NODE_ENV === \"production\"\n        ? z.string().min(1)\n        : z.string().min(1).optional(),\n  },\n  client: {},\n  experimental__runtimeEnv: {},\n  skipValidation:\n    !!process.env.CI || process.env.npm_lifecycle_event === \"lint\",\n});\n"],"names":[],"mappings":";;;AAAA;AACA;;;AAEO,MAAM,MAAM,CAAA,GAAA,+JAAA,CAAA,YAAS,AAAD,EAAE;IAC3B,QAAQ;QACN,kBAAkB,sIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,GAAG,CAAC;QACjC,sBAAsB,sIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,GAAG,CAAC;QACrC,gBAAgB,sIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,GAAG,CAAC;QAE/B,iBAAiB,sIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,GAAG,CAAC;QAEhC,aACE,6EAEI,sIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,GAAG,CAAC,GAAG,QAAQ;QAChC,UAAU,sIAAA,CAAA,IAAC,CAAC,IAAI,CAAC;YAAC;YAAe;SAAa,EAAE,QAAQ;QAExD,mBAAmB,sIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,GAAG,CAAC;QAClC,uBACE,6EAEI,sIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,GAAG,CAAC,GAAG,QAAQ;IAClC;IACA,QAAQ,CAAC;IACT,0BAA0B,CAAC;IAC3B,gBACE,CAAC,CAAC,QAAQ,GAAG,CAAC,EAAE,IAAI,QAAQ,GAAG,CAAC,mBAAmB,KAAK;AAC5D","debugId":null}},
    {"offset": {"line": 478, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 484, "column": 0}, "map": {"version":3,"sources":["file:///Users/andreicruceru/comment.video/packages/auth/src/auth.ts"],"sourcesContent":["import type { BetterAuthOptions } from \"better-auth\";\nimport { expo } from \"@better-auth/expo\";\nimport { stripe } from \"@better-auth/stripe\";\nimport slugify from \"@sindresorhus/slugify\";\nimport { betterAuth } from \"better-auth\";\nimport { drizzleAdapter } from \"better-auth/adapters/drizzle\";\nimport { emailOTP, oAuthProxy, organization } from \"better-auth/plugins\";\nimport { nanoid } from \"nanoid\";\nimport { Resend } from \"resend\";\nimport Stripe from \"stripe\";\n\nimport { db } from \"@acme/db/client\";\n\nimport { env } from \"../env\";\n\nconst resend = new Resend(env.RESEND_API_KEY);\n\nconst stripeClient = new Stripe(env.STRIPE_SECRET_KEY);\n\nexport const config = {\n  database: drizzleAdapter(db, {\n    provider: \"pg\",\n  }),\n  secret: env.AUTH_SECRET,\n  plugins: [\n    oAuthProxy(),\n    expo(),\n    emailOTP({\n      async sendVerificationOTP({ email, otp, type }) {\n        // Always log the OTP to the console for testing\n        console.log(`Sending ${type} OTP to ${email}: ${otp}`);\n\n        try {\n          // In test mode, Resend only allows sending to the verified email\n          const verifiedEmail = email;\n\n          // Send the email using Resend to the verified email, but include the intended recipient in the subject\n          const { data, error } = await resend.emails.send({\n            from: \"auth@email.comment.video\",\n            to: verifiedEmail,\n            subject: `${getSubject(type)} [For: ${email}]`, // Include the intended recipient in the subject\n            html: `\n              <!DOCTYPE html>\n              <html>\n              <head>\n                <meta charset=\"utf-8\">\n                <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n                <title>${getSubject(type)}</title>\n                <style>\n                  body {\n                    font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;\n                    line-height: 1.6;\n                    color: #333;\n                    margin: 0;\n                    padding: 0;\n                    background-color: #f9f9f9;\n                  }\n                  .container {\n                    max-width: 600px;\n                    margin: 0 auto;\n                    padding: 20px;\n                    background-color: #ffffff;\n                    border-radius: 8px;\n                    box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);\n                  }\n                  .header {\n                    text-align: center;\n                    padding: 20px 0;\n                    border-bottom: 1px solid #eaeaea;\n                  }\n                  .logo {\n                    font-size: 24px;\n                    font-weight: bold;\n                    color: #4f46e5;\n                  }\n                  .content {\n                    padding: 30px 20px;\n                    text-align: center;\n                  }\n                  .code {\n                    font-size: 32px;\n                    font-weight: bold;\n                    letter-spacing: 8px;\n                    padding: 15px;\n                    margin: 25px 0;\n                    background-color: #f3f4f6;\n                    border-radius: 6px;\n                    display: inline-block;\n                  }\n                  .footer {\n                    text-align: center;\n                    padding: 20px 0;\n                    color: #6b7280;\n                    font-size: 14px;\n                    border-top: 1px solid #eaeaea;\n                  }\n                  .button {\n                    display: inline-block;\n                    padding: 12px 24px;\n                    background-color: #4f46e5;\n                    color: white;\n                    text-decoration: none;\n                    border-radius: 4px;\n                    font-weight: 600;\n                    margin-top: 20px;\n                  }\n                  .note {\n                    margin-top: 20px;\n                    font-size: 14px;\n                    color: #6b7280;\n                  }\n                </style>\n              </head>\n              <body>\n                <div class=\"container\">\n                  <div class=\"header\">\n                    <div class=\"logo\">comment.video</div>\n                  </div>\n                  <div class=\"content\">\n                    <div style=\"background-color: #ffe8e8; padding: 10px; margin-bottom: 20px; border-radius: 4px; text-align: left;\">\n                      <strong>Development Mode Notice:</strong> This email was intended for <strong>${email}</strong> but was sent to you because of Resend's test mode limitations.\n                    </div>\n                    <h2>${getEmailHeading(type)}</h2>\n                    <p>${getEmailMessage(type)}</p>\n                    <div class=\"code\">${otp}</div>\n                    <p>This code will expire in 5 minutes.</p>\n                    <p class=\"note\">If you didn't request this code, you can safely ignore this email.</p>\n                  </div>\n                  <div class=\"footer\">\n                    &copy; ${new Date().getFullYear()} comment.video. All rights reserved.\n                  </div>\n                </div>\n              </body>\n              </html>\n            `,\n          });\n\n          if (error) {\n            console.error(\"Resend API Error:\", error);\n          } else {\n            console.log(\"Email sent successfully:\", data);\n          }\n        } catch (error) {\n          console.error(\"Error sending email:\", error);\n          // Still allow the OTP to be generated even if email sending fails\n        }\n      },\n      // Set OTP length to 6 digits\n      otpLength: 6,\n      // OTP expires in 5 minutes (300 seconds)\n      expiresIn: 300,\n      // Allow automatic sign-up when the user is not registered\n      disableSignUp: false,\n    }),\n    organization(),\n    stripe({\n      stripeClient,\n      stripeWebhookSecret: env.STRIPE_WEBHOOK_SECRET ?? \"\",\n      createCustomerOnSignUp: true,\n      subscription: {\n        enabled: true,\n        authorizeReference: async ({ user, referenceId }) => {\n          const member = await db.query.member.findFirst({\n            where: (member, { eq, and }) =>\n              and(\n                eq(member.userId, user.id),\n                eq(member.organizationId, referenceId),\n              ),\n          });\n\n          return member?.role === \"owner\" || member?.role === \"admin\";\n        },\n        plans: [\n          {\n            name: \"pro\", // the name of the plan, it'll be automatically lower cased when stored in the database\n            lookupKey: \"pro_monthly\",\n            priceId: \"price_1R1Dj0EauNpNklnFp7YC2iSW\",\n            annualDiscountPriceId: \"price_1R1QYaEauNpNklnF5y6CwgFt\",\n            //TODO handle limits from stripe for each plan, sounds better\n          },\n          {\n            name: \"team\",\n            lookupKey: \"team_monthly\",\n            priceId: \"price_1R1Dk1EauNpNklnFZcleYNzg\",\n            annualDiscountPriceId: \"price_1R1QZKEauNpNklnFdSILW732\",\n            //TODO handle limits from stripe for each plan, sounds better\n          },\n          {\n            name: \"friend\",\n            lookupKey: \"friend_monthly\",\n            priceId: \"price_1R1Dk1EauNpNklnFZcleYNzg\",\n          },\n        ],\n      },\n    }),\n  ],\n  socialProviders: {\n    google: {\n      clientId: env.GOOGLE_CLIENT_ID,\n      clientSecret: env.GOOGLE_CLIENT_SECRET,\n    },\n  },\n  trustedOrigins: [\"exp://\"],\n\n  databaseHooks: {\n    session: {\n      create: {\n        before: async (session) => {\n          const member = await db.query.member.findFirst({\n            where: (org, { eq }) => eq(org.userId, session.userId),\n          });\n          return {\n            data: {\n              ...session,\n              activeOrganizationId: member?.organizationId,\n            },\n          };\n        },\n      },\n    },\n    user: {\n      create: {\n        after: async (user) => {\n          const userName = user.name;\n\n          const slug = slugify(userName, {\n            lowercase: true,\n          });\n          await auth.api.createOrganization({\n            body: {\n              userId: user.id,\n              name: `${userName}'s team`,\n              slug: `${slug}-${nanoid()}`,\n            },\n          });\n        },\n      },\n    },\n  },\n} satisfies BetterAuthOptions;\n\n// Helper function to get the subject line based on the OTP type\nfunction getSubject(type: string): string {\n  switch (type) {\n    case \"sign-in\":\n      return \"Your Sign In Code for comment.video\";\n    case \"email-verification\":\n      return \"Verify Your Email Address for comment.video\";\n    case \"forget-password\":\n      return \"Reset Your Password for comment.video\";\n    default:\n      return \"Your Verification Code for comment.video\";\n  }\n}\n\n// Helper function to get the email heading based on the OTP type\nfunction getEmailHeading(type: string): string {\n  switch (type) {\n    case \"sign-in\":\n      return \"Sign In to Your Account\";\n    case \"email-verification\":\n      return \"Verify Your Email Address\";\n    case \"forget-password\":\n      return \"Reset Your Password\";\n    default:\n      return \"Your Verification Code\";\n  }\n}\n\n// Helper function to get the email message based on the OTP type\nfunction getEmailMessage(type: string): string {\n  switch (type) {\n    case \"sign-in\":\n      return \"Use the following code to sign in to your account:\";\n    case \"email-verification\":\n      return \"To verify your email address, please enter the following code:\";\n    case \"forget-password\":\n      return \"To reset your password, please enter the following code:\";\n    default:\n      return \"Your verification code is:\";\n  }\n}\n\nexport const auth = betterAuth(config);\nexport type Session = typeof auth.$Infer.Session;\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 767, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 773, "column": 0}, "map": {"version":3,"sources":["file:///Users/andreicruceru/comment.video/packages/auth/src/index.rsc.ts"],"sourcesContent":["import { cache } from \"react\";\nimport { headers } from \"next/headers\";\n\nimport { auth } from \"./auth\";\n\nexport const getSession = async () =>\n  cache(auth.api.getSession)({\n    headers: await headers(),\n  });\n\nexport * from \"./auth\";\n"],"names":[],"mappings":";;;AAAA;AACA;AAEA;;;;AAEO,MAAM,aAAa,UACxB,CAAA,GAAA,uMAAA,CAAA,QAAK,AAAD,EAAE,iIAAA,CAAA,OAAI,CAAC,GAAG,CAAC,UAAU,EAAE;QACzB,SAAS,MAAM,CAAA,GAAA,iIAAA,CAAA,UAAO,AAAD;IACvB","debugId":null}},
    {"offset": {"line": 786, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 803, "column": 0}, "map": {"version":3,"sources":["file:///Users/andreicruceru/comment.video/packages/api/src/trpc.ts"],"sourcesContent":["/**\n * YOU PROBABLY DON'T NEED TO EDIT THIS FILE, UNLESS:\n * 1. You want to modify request context (see Part 1)\n * 2. You want to create a new middleware or type of procedure (see Part 3)\n *\n * tl;dr - this is where all the tRPC server stuff is created and plugged in.\n * The pieces you will need to use are documented accordingly near the end\n */\nimport { initTRPC, TRPCError } from \"@trpc/server\";\nimport superjson from \"superjson\";\nimport { ZodError } from \"zod\";\n\nimport { auth } from \"@acme/auth\";\nimport { db } from \"@acme/db/client\";\n\n/**\n * 1. CONTEXT\n *\n * This section defines the \"contexts\" that are available in the backend API.\n *\n * These allow you to access things when processing a request, like the database, the session, etc.\n *\n * This helper generates the \"internals\" for a tRPC context. The API handler and RSC clients each\n * wrap this and provides the required context.\n *\n * @see https://trpc.io/docs/server/context\n */\nexport const createTRPCContext = async (opts: { headers: Headers }) => {\n  const session = await auth.api.getSession({\n    headers: opts.headers,\n  });\n  return {\n    session,\n    db,\n    // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n    ip: opts.headers.get(\"x-forwarded-for\")!,\n  };\n};\nexport type TRPCContext = Awaited<ReturnType<typeof createTRPCContext>>;\n\n/**\n * 2. INITIALIZATION\n *\n * This is where the trpc api is initialized, connecting the context and\n * transformer\n */\nconst t = initTRPC.context<typeof createTRPCContext>().create({\n  transformer: superjson,\n  errorFormatter: ({ shape, error }) => ({\n    ...shape,\n    data: {\n      ...shape.data,\n      zodError: error.cause instanceof ZodError ? error.cause.flatten() : null,\n    },\n  }),\n});\n\n/**\n * Create a server-side caller\n * @see https://trpc.io/docs/server/server-side-calls\n */\nexport const createCallerFactory = t.createCallerFactory;\n\n/**\n * 3. ROUTER & PROCEDURE (THE IMPORTANT BIT)\n *\n * These are the pieces you use to build your tRPC API. You should import these\n * a lot in the /src/server/api/routers folder\n */\n\n/**\n * This is how you create new routers and subrouters in your tRPC API\n * @see https://trpc.io/docs/router\n */\nexport const createTRPCRouter = t.router;\n\n/**\n * Middleware for timing procedure execution and adding an articifial delay in development.\n *\n * You can remove this if you don't like it, but it can help catch unwanted waterfalls by simulating\n * network latency that would occur in production but not in local development.\n */\nconst timingMiddleware = t.middleware(async ({ next, path }) => {\n  const start = Date.now();\n\n  if (t._config.isDev) {\n    // artificial delay in dev 100-500ms\n    const waitMs = Math.floor(Math.random() * 400) + 100;\n    await new Promise((resolve) => setTimeout(resolve, waitMs));\n  }\n\n  const result = await next();\n\n  const end = Date.now();\n  console.log(`[TRPC] ${path} took ${end - start}ms to execute`);\n\n  return result;\n});\n\n/**\n * Public (unauthed) procedure\n *\n * This is the base piece you use to build new queries and mutations on your\n * tRPC API. It does not guarantee that a user querying is authorized, but you\n * can still access user session data if they are logged in\n */\nexport const publicProcedure = t.procedure.use(timingMiddleware);\n\n/**\n * Protected (authenticated) procedure\n *\n * If you want a query or mutation to ONLY be accessible to logged in users, use this. It verifies\n * the session is valid and guarantees `ctx.session.user` is not null.\n *\n * @see https://trpc.io/docs/procedures\n */\nexport const protectedProcedure = t.procedure\n  .use(timingMiddleware)\n  .use(({ ctx, next }) => {\n    if (!ctx.session?.user) {\n      throw new TRPCError({ code: \"UNAUTHORIZED\" });\n    }\n    return next({\n      ctx: {\n        // infers the `session` as non-nullable\n        session: { ...ctx.session, user: ctx.session.user },\n      },\n    });\n  });\n"],"names":[],"mappings":"AAAA;;;;;;;CAOC;;;;;;;AACD;AAAA;AAAA;AACA;AACA;AAEA;AAAA;AACA;;;;;;AAcO,MAAM,oBAAoB,OAAO;IACtC,MAAM,UAAU,MAAM,iIAAA,CAAA,OAAI,CAAC,GAAG,CAAC,UAAU,CAAC;QACxC,SAAS,KAAK,OAAO;IACvB;IACA,OAAO;QACL;QACA,IAAA,iIAAA,CAAA,KAAE;QACF,oEAAoE;QACpE,IAAI,KAAK,OAAO,CAAC,GAAG,CAAC;IACvB;AACF;AAGA;;;;;CAKC,GACD,MAAM,IAAI,kMAAA,CAAA,WAAQ,CAAC,OAAO,GAA6B,MAAM,CAAC;IAC5D,aAAa,4IAAA,CAAA,UAAS;IACtB,gBAAgB,CAAC,EAAE,KAAK,EAAE,KAAK,EAAE,GAAK,CAAC;YACrC,GAAG,KAAK;YACR,MAAM;gBACJ,GAAG,MAAM,IAAI;gBACb,UAAU,MAAM,KAAK,YAAY,sIAAA,CAAA,WAAQ,GAAG,MAAM,KAAK,CAAC,OAAO,KAAK;YACtE;QACF,CAAC;AACH;AAMO,MAAM,sBAAsB,EAAE,mBAAmB;AAajD,MAAM,mBAAmB,EAAE,MAAM;AAExC;;;;;CAKC,GACD,MAAM,mBAAmB,EAAE,UAAU,CAAC,OAAO,EAAE,IAAI,EAAE,IAAI,EAAE;IACzD,MAAM,QAAQ,KAAK,GAAG;IAEtB,IAAI,EAAE,OAAO,CAAC,KAAK,EAAE;QACnB,oCAAoC;QACpC,MAAM,SAAS,KAAK,KAAK,CAAC,KAAK,MAAM,KAAK,OAAO;QACjD,MAAM,IAAI,QAAQ,CAAC,UAAY,WAAW,SAAS;IACrD;IAEA,MAAM,SAAS,MAAM;IAErB,MAAM,MAAM,KAAK,GAAG;IACpB,QAAQ,GAAG,CAAC,CAAC,OAAO,EAAE,KAAK,MAAM,EAAE,MAAM,MAAM,aAAa,CAAC;IAE7D,OAAO;AACT;AASO,MAAM,kBAAkB,EAAE,SAAS,CAAC,GAAG,CAAC;AAUxC,MAAM,qBAAqB,EAAE,SAAS,CAC1C,GAAG,CAAC,kBACJ,GAAG,CAAC,CAAC,EAAE,GAAG,EAAE,IAAI,EAAE;IACjB,IAAI,CAAC,IAAI,OAAO,EAAE,MAAM;QACtB,MAAM,IAAI,4MAAA,CAAA,YAAS,CAAC;YAAE,MAAM;QAAe;IAC7C;IACA,OAAO,KAAK;QACV,KAAK;YACH,uCAAuC;YACvC,SAAS;gBAAE,GAAG,IAAI,OAAO;gBAAE,MAAM,IAAI,OAAO,CAAC,IAAI;YAAC;QACpD;IACF;AACF","debugId":null}},
    {"offset": {"line": 892, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 898, "column": 0}, "map": {"version":3,"sources":["file:///Users/andreicruceru/comment.video/packages/api/src/router/auth.ts"],"sourcesContent":["import type { TRPCRouterRecord } from \"@trpc/server\";\nimport { protectedProcedure, publicProcedure } from \"../trpc\";\n\nexport const authRouter = {\n  getSession: publicProcedure.query(({ ctx }) => {\n    return ctx.session;\n  }),\n  getSecretMessage: protectedProcedure.query(() => {\n    return \"you can see this secret message!\";\n  }),\n} satisfies TRPCRouterRecord;\n"],"names":[],"mappings":";;;AACA;;AAEO,MAAM,aAAa;IACxB,YAAY,gIAAA,CAAA,kBAAe,CAAC,KAAK,CAAC,CAAC,EAAE,GAAG,EAAE;QACxC,OAAO,IAAI,OAAO;IACpB;IACA,kBAAkB,gIAAA,CAAA,qBAAkB,CAAC,KAAK,CAAC;QACzC,OAAO;IACT;AACF","debugId":null}},
    {"offset": {"line": 911, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 981, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 984, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 998, "column": 0}, "map": {"version":3,"sources":["file:///Users/andreicruceru/comment.video/packages/validators/src/limits.ts"],"sourcesContent":["import { differenceInSeconds, endOfDay, endOfMonth } from \"date-fns\";\nimport { match } from \"ts-pattern\";\n\ntype Plan = \"free\" | \"pro\" | \"team\";\n\n//upload limit in MB\nexport const getUploadSizeLimit = (plan: Plan) =>\n  match(plan)\n    .with(\"free\", () => 500)\n    .with(\"pro\", () => 30 * 1024) // 30 GB in MB\n    .with(\"team\", () => 60 * 1024) // 60 GB in MB\n    .exhaustive();\n\nexport const getImportLimit = (plan: Plan) =>\n  match(plan)\n    .with(\"free\", () => 3)\n    .with(\"pro\", () => 100)\n    .with(\"team\", () => 300)\n    .exhaustive();\n\nexport const getUploadSizeLimitKey = (userId: string) =>\n  `organization:${userId}:uploadSize`;\n\nexport const getImportLimitKey = (userId: string) =>\n  `organization:${userId}:import`;\n\nexport const getEndOfMonthDuration = () => {\n  const now = new Date();\n  const endOfCurrentMonth = endOfMonth(now);\n\n  // Calculate the difference in seconds between now and the end of the month\n  const expiryTime = differenceInSeconds(endOfCurrentMonth, now);\n  return expiryTime;\n};\n\nexport const getEndOfDayDuration = () => {\n  const now = new Date();\n  const endOfCurrentDay = endOfDay(now);\n\n  // Calculate the difference in seconds between now and the end of the day\n  const expiryTime = differenceInSeconds(endOfCurrentDay, now);\n  return expiryTime;\n};\n"],"names":[],"mappings":";;;;;;;;AAAA;AAAA;AAAA;AACA;;;AAKO,MAAM,qBAAqB,CAAC,OACjC,CAAA,GAAA,gJAAA,CAAA,QAAK,AAAD,EAAE,MACH,IAAI,CAAC,QAAQ,IAAM,KACnB,IAAI,CAAC,OAAO,IAAM,KAAK,MAAM,cAAc;KAC3C,IAAI,CAAC,QAAQ,IAAM,KAAK,MAAM,cAAc;KAC5C,UAAU;AAER,MAAM,iBAAiB,CAAC,OAC7B,CAAA,GAAA,gJAAA,CAAA,QAAK,AAAD,EAAE,MACH,IAAI,CAAC,QAAQ,IAAM,GACnB,IAAI,CAAC,OAAO,IAAM,KAClB,IAAI,CAAC,QAAQ,IAAM,KACnB,UAAU;AAER,MAAM,wBAAwB,CAAC,SACpC,CAAC,aAAa,EAAE,OAAO,WAAW,CAAC;AAE9B,MAAM,oBAAoB,CAAC,SAChC,CAAC,aAAa,EAAE,OAAO,OAAO,CAAC;AAE1B,MAAM,wBAAwB;IACnC,MAAM,MAAM,IAAI;IAChB,MAAM,oBAAoB,CAAA,GAAA,2IAAA,CAAA,aAAU,AAAD,EAAE;IAErC,2EAA2E;IAC3E,MAAM,aAAa,CAAA,GAAA,oJAAA,CAAA,sBAAmB,AAAD,EAAE,mBAAmB;IAC1D,OAAO;AACT;AAEO,MAAM,sBAAsB;IACjC,MAAM,MAAM,IAAI;IAChB,MAAM,kBAAkB,CAAA,GAAA,yIAAA,CAAA,WAAQ,AAAD,EAAE;IAEjC,yEAAyE;IACzE,MAAM,aAAa,CAAA,GAAA,oJAAA,CAAA,sBAAmB,AAAD,EAAE,iBAAiB;IACxD,OAAO;AACT","debugId":null}},
    {"offset": {"line": 1032, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 1038, "column": 0}, "map": {"version":3,"sources":["file:///Users/andreicruceru/comment.video/packages/validators/src/redis.ts"],"sourcesContent":["import { Redis } from \"@upstash/redis\";\nimport humanId from \"human-id\";\n\nimport type { Plan } from \"./plans\";\nimport {\n  getEndOfMonthDuration,\n  getImportLimitKey,\n  getUploadSizeLimit,\n  getUploadSizeLimitKey,\n} from \"./limits\";\n\nconst redis = Redis.fromEnv();\n\nexport const checkUploadLimit = async (\n  plan: Plan,\n  organizationId: string,\n  sizeInMB: number,\n) => {\n  const uploadSizeKey = getUploadSizeLimitKey(organizationId);\n  const importCountKey = getImportLimitKey(organizationId);\n\n  const limits = getUploadSizeLimit(plan);\n\n  const uploadSize = await redis.incrby(uploadSizeKey, sizeInMB);\n  const importCount = await redis.incrby(importCountKey, 1);\n\n  const endOfMonth = getEndOfMonthDuration();\n\n  if (importCount === 1 && uploadSize) {\n    await redis.expire(uploadSizeKey, endOfMonth);\n    await redis.expire(importCountKey, endOfMonth);\n  }\n\n  //allow 100MB more than the limit for the upload\n  if (uploadSize > limits + 100) return true;\n\n  return false;\n};\n\nexport const generateAnonUser = async (ip: string) => {\n  const name = humanId({\n    separator: \"-\",\n    capitalize: false,\n  });\n\n  await redis.set(`anon:${ip}`, name);\n\n  return name;\n};\n\nexport const getAnonUser = async (ip: string) => {\n  const name = await redis.get<string>(`anon:${ip}`);\n\n  if (!name) {\n    const generatedUser = await generateAnonUser(ip);\n    return { name: generatedUser };\n  }\n\n  return { name };\n};\n"],"names":[],"mappings":";;;;;AAAA;AAAA;AACA;AAGA;;;;AAOA,MAAM,QAAQ,+JAAA,CAAA,QAAK,CAAC,OAAO;AAEpB,MAAM,mBAAmB,OAC9B,MACA,gBACA;IAEA,MAAM,gBAAgB,CAAA,GAAA,yIAAA,CAAA,wBAAqB,AAAD,EAAE;IAC5C,MAAM,iBAAiB,CAAA,GAAA,yIAAA,CAAA,oBAAiB,AAAD,EAAE;IAEzC,MAAM,SAAS,CAAA,GAAA,yIAAA,CAAA,qBAAkB,AAAD,EAAE;IAElC,MAAM,aAAa,MAAM,MAAM,MAAM,CAAC,eAAe;IACrD,MAAM,cAAc,MAAM,MAAM,MAAM,CAAC,gBAAgB;IAEvD,MAAM,aAAa,CAAA,GAAA,yIAAA,CAAA,wBAAqB,AAAD;IAEvC,IAAI,gBAAgB,KAAK,YAAY;QACnC,MAAM,MAAM,MAAM,CAAC,eAAe;QAClC,MAAM,MAAM,MAAM,CAAC,gBAAgB;IACrC;IAEA,gDAAgD;IAChD,IAAI,aAAa,SAAS,KAAK,OAAO;IAEtC,OAAO;AACT;AAEO,MAAM,mBAAmB,OAAO;IACrC,MAAM,OAAO,CAAA,GAAA,8IAAA,CAAA,UAAO,AAAD,EAAE;QACnB,WAAW;QACX,YAAY;IACd;IAEA,MAAM,MAAM,GAAG,CAAC,CAAC,KAAK,EAAE,IAAI,EAAE;IAE9B,OAAO;AACT;AAEO,MAAM,cAAc,OAAO;IAChC,MAAM,OAAO,MAAM,MAAM,GAAG,CAAS,CAAC,KAAK,EAAE,IAAI;IAEjD,IAAI,CAAC,MAAM;QACT,MAAM,gBAAgB,MAAM,iBAAiB;QAC7C,OAAO;YAAE,MAAM;QAAc;IAC/B;IAEA,OAAO;QAAE;IAAK;AAChB","debugId":null}},
    {"offset": {"line": 1086, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 1092, "column": 0}, "map": {"version":3,"sources":["file:///Users/andreicruceru/comment.video/packages/api/src/router/aws.ts"],"sourcesContent":["import type { TRPCRouterRecord } from \"@trpc/server\";\nimport {\n  AbortMultipartUploadCommand,\n  CompleteMultipartUploadCommand,\n  CreateMultipartUploadCommand,\n  S3Client,\n  UploadPartCommand,\n} from \"@aws-sdk/client-s3\";\nimport { getSignedUrl } from \"@aws-sdk/s3-request-presigner\";\nimport { TRPCError } from \"@trpc/server\";\nimport { z } from \"zod\";\n\nimport type { Plan } from \"@acme/validators/plans\";\nimport { eq } from \"@acme/db\";\nimport { subscription, Video } from \"@acme/db/schema\";\nimport { checkUploadLimit } from \"@acme/validators/redis\";\n\nimport { protectedProcedure } from \"../trpc\";\n\nconst bucketName = process.env.AWS_BUCKET_NAME;\nconst maxMB = 700;\n\nexport const awsRouter = {\n  initiateMultipartUpload: protectedProcedure\n    .input(\n      z.object({\n        videoId: z.string(),\n        parts: z.number(),\n        contentLength: z.number(),\n        fileExtension: z.string(),\n      }),\n    )\n    .mutation(async ({ ctx, input }) => {\n      if (!ctx.session.session.activeOrganizationId) {\n        throw new TRPCError({\n          code: \"FORBIDDEN\",\n          message: \"You must be in an organization to upload a video\",\n        });\n      }\n\n      const sub = await ctx.db.query.subscription.findFirst({\n        where: eq(\n          subscription.referenceId,\n          ctx.session.session.activeOrganizationId,\n        ),\n      });\n\n      // Convert content length from bytes to MB for consistent comparison\n      const contentLengthInMB = Math.ceil(input.contentLength / (1024 * 1024));\n\n      const organizationId = ctx.session.session.activeOrganizationId;\n      if (!organizationId) {\n        throw new TRPCError({\n          code: \"FORBIDDEN\",\n          message: \"You must be in an organization to upload a video\",\n        });\n      }\n\n      const limitExceeded = await checkUploadLimit(\n        (sub?.plan ?? \"free\") as Plan,\n        organizationId,\n        contentLengthInMB,\n      );\n\n      if (limitExceeded) {\n        throw new TRPCError({\n          code: \"FORBIDDEN\",\n          message: \"You have reached your upload limit\",\n        });\n      }\n\n      const key = `${input.videoId}/video.${input.fileExtension}`;\n\n      if (contentLengthInMB > maxMB) {\n        throw new TRPCError({\n          code: \"PRECONDITION_FAILED\",\n          message: `File is too large. Maximum size is ${maxMB} MB.`,\n        });\n      }\n\n      const client = new S3Client({\n        useAccelerateEndpoint: true,\n      });\n\n      const createCommand = new CreateMultipartUploadCommand({\n        Bucket: bucketName,\n        Key: key,\n        Metadata: {\n          videoid: input.videoId,\n          userid: ctx.session.user.id,\n        },\n      });\n\n      const { UploadId } = await client.send(createCommand);\n      if (!UploadId) throw new Error(\"Failed to initiate multipart upload\");\n\n      const signedUrls = await Promise.all(\n        Array.from({ length: input.parts }, async (_, index) => {\n          const uploadPartCommand = new UploadPartCommand({\n            Bucket: bucketName,\n            Key: key,\n            UploadId,\n            PartNumber: index + 1,\n          });\n\n          const signedUrl = await getSignedUrl(client, uploadPartCommand, {\n            expiresIn: 3600,\n          });\n          return { url: signedUrl, partNumber: index + 1 };\n        }),\n      );\n\n      return {\n        uploadId: UploadId,\n        signedUrls,\n      };\n    }),\n  completeMultipartUpload: protectedProcedure\n    .input(\n      z.object({\n        videoId: z.string(),\n        uploadId: z.string(),\n        parts: z.array(\n          z.object({\n            ETag: z.string(),\n            PartNumber: z.number(),\n          }),\n        ),\n        fileExtension: z.string(),\n      }),\n    )\n    .mutation(async ({ ctx, input }) => {\n      const key = `${input.videoId}/video.${input.fileExtension}`;\n\n      const client = new S3Client({\n        useAccelerateEndpoint: true,\n      });\n\n      try {\n        const command = new CompleteMultipartUploadCommand({\n          Bucket: bucketName,\n          Key: key,\n          UploadId: input.uploadId,\n          MultipartUpload: {\n            Parts: input.parts,\n          },\n        });\n\n        await client.send(command);\n\n        const videoUrl = `https://${bucketName}.s3.amazonaws.com/${key}`;\n\n        await ctx.db\n          .update(Video)\n          .set({ url: videoUrl })\n          .where(eq(Video.id, input.videoId));\n\n        return { success: true, videoUrl };\n      } catch (_error) {\n        await client.send(\n          new AbortMultipartUploadCommand({\n            Bucket: bucketName,\n            Key: key,\n            UploadId: input.uploadId,\n          }),\n        );\n        // Sentry.captureException(_error);\n\n        throw new TRPCError({\n          code: \"INTERNAL_SERVER_ERROR\",\n          message: \"Failed to complete multipart upload\",\n        });\n      }\n    }),\n} satisfies TRPCRouterRecord;\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 1237, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 1243, "column": 0}, "map": {"version":3,"sources":["file:///Users/andreicruceru/comment.video/packages/api/src/rate-limit.ts"],"sourcesContent":["import type { Duration } from \"@upstash/ratelimit\";\nimport { TRPCError } from \"@trpc/server\";\nimport { Ratelimit } from \"@upstash/ratelimit\"; // for deno: see above\nimport { Redis } from \"@upstash/redis\"; // see below for cloudflare and fastly adapters\n\nimport { Reviewers } from \"@acme/db/schema\";\nimport { getAnonUser } from \"@acme/validators/redis\";\n\nimport type { TRPCContext } from \"./trpc\";\n\n// Create a new ratelimiter, that allows 10 requests per 10 seconds\n\nexport const checkLimitsPublic = async (\n  ctx: TRPCContext,\n  type: string,\n  tokens: number,\n  duration: Duration,\n) => {\n  const ip = ctx.ip;\n\n  const isLoggedIn = ctx.session?.user;\n\n  if (isLoggedIn && ctx.session?.user.id)\n    return {\n      type: \"user\" as const,\n      userId: ctx.session.user.id,\n    };\n\n  const ratelimit = new Ratelimit({\n    redis: Redis.fromEnv(),\n    limiter: Ratelimit.slidingWindow(tokens, duration),\n    analytics: true,\n  });\n\n  const { success } = await ratelimit.limit(`${type}:${ip}`);\n\n  if (!success) {\n    throw new TRPCError({ code: \"TOO_MANY_REQUESTS\" });\n  }\n\n  const anonUser = await getAnonUser(ctx.ip);\n\n  return {\n    type: \"anon\" as const,\n    anonUser,\n  };\n};\n\nexport const makeReviewer = async (\n  db: TRPCContext[\"db\"],\n  data: Awaited<ReturnType<typeof checkLimitsPublic>>,\n  videoId: string,\n) => {\n  const [reviewer] = await db\n    .insert(Reviewers)\n    .values({\n      anonUserId: data.anonUser?.name,\n      userId: data.userId,\n      videoId: videoId,\n    })\n    .onConflictDoUpdate({\n      set: {\n        userId: data.userId,\n        anonUserId: data.anonUser?.name,\n      },\n      target: [Reviewers.videoId, Reviewers.userId, Reviewers.anonUserId],\n    })\n    .returning();\n\n  // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n  return reviewer!;\n};\n"],"names":[],"mappings":";;;;AACA;AAAA;AACA,6QAAgD,sBAAsB;AACtE,4SAAwC,+CAA+C;AAAvF;AAEA;AAAA;AACA;;;;;;AAMO,MAAM,oBAAoB,OAC/B,KACA,MACA,QACA;IAEA,MAAM,KAAK,IAAI,EAAE;IAEjB,MAAM,aAAa,IAAI,OAAO,EAAE;IAEhC,IAAI,cAAc,IAAI,OAAO,EAAE,KAAK,IAClC,OAAO;QACL,MAAM;QACN,QAAQ,IAAI,OAAO,CAAC,IAAI,CAAC,EAAE;IAC7B;IAEF,MAAM,YAAY,IAAI,yJAAA,CAAA,YAAS,CAAC;QAC9B,OAAO,+JAAA,CAAA,QAAK,CAAC,OAAO;QACpB,SAAS,yJAAA,CAAA,YAAS,CAAC,aAAa,CAAC,QAAQ;QACzC,WAAW;IACb;IAEA,MAAM,EAAE,OAAO,EAAE,GAAG,MAAM,UAAU,KAAK,CAAC,GAAG,KAAK,CAAC,EAAE,IAAI;IAEzD,IAAI,CAAC,SAAS;QACZ,MAAM,IAAI,4MAAA,CAAA,YAAS,CAAC;YAAE,MAAM;QAAoB;IAClD;IAEA,MAAM,WAAW,MAAM,CAAA,GAAA,wIAAA,CAAA,cAAW,AAAD,EAAE,IAAI,EAAE;IAEzC,OAAO;QACL,MAAM;QACN;IACF;AACF;AAEO,MAAM,eAAe,OAC1B,IACA,MACA;IAEA,MAAM,CAAC,SAAS,GAAG,MAAM,GACtB,MAAM,CAAC,iJAAA,CAAA,YAAS,EAChB,MAAM,CAAC;QACN,YAAY,KAAK,QAAQ,EAAE;QAC3B,QAAQ,KAAK,MAAM;QACnB,SAAS;IACX,GACC,kBAAkB,CAAC;QAClB,KAAK;YACH,QAAQ,KAAK,MAAM;YACnB,YAAY,KAAK,QAAQ,EAAE;QAC7B;QACA,QAAQ;YAAC,iJAAA,CAAA,YAAS,CAAC,OAAO;YAAE,iJAAA,CAAA,YAAS,CAAC,MAAM;YAAE,iJAAA,CAAA,YAAS,CAAC,UAAU;SAAC;IACrE,GACC,SAAS;IAEZ,oEAAoE;IACpE,OAAO;AACT","debugId":null}},
    {"offset": {"line": 1303, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 1309, "column": 0}, "map": {"version":3,"sources":["file:///Users/andreicruceru/comment.video/packages/api/src/router/comment.ts"],"sourcesContent":["import type { TRPCRouterRecord } from \"@trpc/server\";\nimport { z } from \"zod\";\n\nimport { and, eq } from \"@acme/db\";\nimport { VideoComment } from \"@acme/db/schema\";\n\nimport { checkLimitsPublic, makeReviewer } from \"../rate-limit\";\nimport { protectedProcedure, publicProcedure } from \"../trpc\";\n\nexport const commentRouter = {\n  byVideoId: publicProcedure\n    .input(\n      z.object({\n        videoId: z.string(),\n        reviewerId: z.string().nullable(),\n      }),\n    )\n    .query(async ({ ctx, input }) => {\n      const comments = await ctx.db.query.VideoComment.findMany({\n        where: input.reviewerId\n          ? and(\n              eq(VideoComment.videoId, input.videoId),\n              eq(VideoComment.reviewerId, input.reviewerId),\n            )\n          : eq(VideoComment.videoId, input.videoId),\n        orderBy: (videoComment, { desc }) => [desc(videoComment.createdAt)],\n        with: {\n          reviewer: {\n            with: {\n              user: true,\n            },\n          },\n        },\n      });\n\n      const sortedComments = comments.sort((a, b) => {\n        return (a.startTime ?? 0) - (b.startTime ?? 0);\n      });\n\n      return sortedComments;\n    }),\n\n  create: publicProcedure\n    .input(\n      z.object({\n        id: z.string(),\n        videoId: z.string(),\n        content: z.string(),\n        startTime: z.number(),\n        endTime: z.number().optional(),\n      }),\n    )\n    .mutation(async ({ ctx, input }) => {\n      const checkLimitsData = await checkLimitsPublic(\n        ctx,\n        \"comments\",\n        5,\n        \"10s\",\n      );\n\n      const reviewer = await makeReviewer(\n        ctx.db,\n        checkLimitsData,\n        input.videoId,\n      );\n\n      return ctx.db\n        .insert(VideoComment)\n        .values({\n          id: input.id,\n          videoId: input.videoId,\n          content: input.content,\n          startTime: input.startTime,\n          endTime: input.endTime,\n          reviewerId: reviewer.id,\n        })\n        .returning({ id: VideoComment.id });\n    }),\n\n  delete: protectedProcedure\n    .input(z.string())\n    .mutation(async ({ ctx, input }) => {\n      return ctx.db.delete(VideoComment).where(eq(VideoComment.id, input));\n    }),\n} satisfies TRPCRouterRecord;\n"],"names":[],"mappings":";;;AACA;AAEA;AAAA;AACA;AAAA;AAEA;AACA;;;;;;AAEO,MAAM,gBAAgB;IAC3B,WAAW,gIAAA,CAAA,kBAAe,CACvB,KAAK,CACJ,sIAAA,CAAA,IAAC,CAAC,MAAM,CAAC;QACP,SAAS,sIAAA,CAAA,IAAC,CAAC,MAAM;QACjB,YAAY,sIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ;IACjC,IAED,KAAK,CAAC,OAAO,EAAE,GAAG,EAAE,KAAK,EAAE;QAC1B,MAAM,WAAW,MAAM,IAAI,EAAE,CAAC,KAAK,CAAC,YAAY,CAAC,QAAQ,CAAC;YACxD,OAAO,MAAM,UAAU,GACnB,CAAA,GAAA,oKAAA,CAAA,MAAG,AAAD,EACA,CAAA,GAAA,oKAAA,CAAA,KAAE,AAAD,EAAE,iJAAA,CAAA,eAAY,CAAC,OAAO,EAAE,MAAM,OAAO,GACtC,CAAA,GAAA,oKAAA,CAAA,KAAE,AAAD,EAAE,iJAAA,CAAA,eAAY,CAAC,UAAU,EAAE,MAAM,UAAU,KAE9C,CAAA,GAAA,oKAAA,CAAA,KAAE,AAAD,EAAE,iJAAA,CAAA,eAAY,CAAC,OAAO,EAAE,MAAM,OAAO;YAC1C,SAAS,CAAC,cAAc,EAAE,IAAI,EAAE,GAAK;oBAAC,KAAK,aAAa,SAAS;iBAAE;YACnE,MAAM;gBACJ,UAAU;oBACR,MAAM;wBACJ,MAAM;oBACR;gBACF;YACF;QACF;QAEA,MAAM,iBAAiB,SAAS,IAAI,CAAC,CAAC,GAAG;YACvC,OAAO,CAAC,EAAE,SAAS,IAAI,CAAC,IAAI,CAAC,EAAE,SAAS,IAAI,CAAC;QAC/C;QAEA,OAAO;IACT;IAEF,QAAQ,gIAAA,CAAA,kBAAe,CACpB,KAAK,CACJ,sIAAA,CAAA,IAAC,CAAC,MAAM,CAAC;QACP,IAAI,sIAAA,CAAA,IAAC,CAAC,MAAM;QACZ,SAAS,sIAAA,CAAA,IAAC,CAAC,MAAM;QACjB,SAAS,sIAAA,CAAA,IAAC,CAAC,MAAM;QACjB,WAAW,sIAAA,CAAA,IAAC,CAAC,MAAM;QACnB,SAAS,sIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ;IAC9B,IAED,QAAQ,CAAC,OAAO,EAAE,GAAG,EAAE,KAAK,EAAE;QAC7B,MAAM,kBAAkB,MAAM,CAAA,GAAA,yIAAA,CAAA,oBAAiB,AAAD,EAC5C,KACA,YACA,GACA;QAGF,MAAM,WAAW,MAAM,CAAA,GAAA,yIAAA,CAAA,eAAY,AAAD,EAChC,IAAI,EAAE,EACN,iBACA,MAAM,OAAO;QAGf,OAAO,IAAI,EAAE,CACV,MAAM,CAAC,iJAAA,CAAA,eAAY,EACnB,MAAM,CAAC;YACN,IAAI,MAAM,EAAE;YACZ,SAAS,MAAM,OAAO;YACtB,SAAS,MAAM,OAAO;YACtB,WAAW,MAAM,SAAS;YAC1B,SAAS,MAAM,OAAO;YACtB,YAAY,SAAS,EAAE;QACzB,GACC,SAAS,CAAC;YAAE,IAAI,iJAAA,CAAA,eAAY,CAAC,EAAE;QAAC;IACrC;IAEF,QAAQ,gIAAA,CAAA,qBAAkB,CACvB,KAAK,CAAC,sIAAA,CAAA,IAAC,CAAC,MAAM,IACd,QAAQ,CAAC,OAAO,EAAE,GAAG,EAAE,KAAK,EAAE;QAC7B,OAAO,IAAI,EAAE,CAAC,MAAM,CAAC,iJAAA,CAAA,eAAY,EAAE,KAAK,CAAC,CAAA,GAAA,oKAAA,CAAA,KAAE,AAAD,EAAE,iJAAA,CAAA,eAAY,CAAC,EAAE,EAAE;IAC/D;AACJ","debugId":null}},
    {"offset": {"line": 1371, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 1377, "column": 0}, "map": {"version":3,"sources":["file:///Users/andreicruceru/comment.video/packages/api/src/router/limits.ts"],"sourcesContent":["import { Redis } from \"@upstash/redis\";\n\nimport {\n  getImportLimitKey,\n  getUploadSizeLimitKey,\n} from \"@acme/validators/limits\";\n\nimport { createTRPCRouter, protectedProcedure } from \"../trpc\";\n\nconst redis = Redis.fromEnv();\n\nexport const limitsRouter = createTRPCRouter({\n  get: protectedProcedure.query(async ({ ctx }) => {\n    if (!ctx.session.session.activeOrganizationId) {\n      throw new Error(\"No active organization\");\n    }\n\n    const [uploadLimit, importLimit] = await redis.mget<[number, number]>(\n      getUploadSizeLimitKey(ctx.session.session.activeOrganizationId),\n      getImportLimitKey(ctx.session.session.activeOrganizationId),\n    );\n\n    return {\n      uploadLimit,\n      importLimit,\n    };\n  }),\n});\n"],"names":[],"mappings":";;;AAAA;AAAA;AAEA;AAKA;;;;AAEA,MAAM,QAAQ,+JAAA,CAAA,QAAK,CAAC,OAAO;AAEpB,MAAM,eAAe,CAAA,GAAA,gIAAA,CAAA,mBAAgB,AAAD,EAAE;IAC3C,KAAK,gIAAA,CAAA,qBAAkB,CAAC,KAAK,CAAC,OAAO,EAAE,GAAG,EAAE;QAC1C,IAAI,CAAC,IAAI,OAAO,CAAC,OAAO,CAAC,oBAAoB,EAAE;YAC7C,MAAM,IAAI,MAAM;QAClB;QAEA,MAAM,CAAC,aAAa,YAAY,GAAG,MAAM,MAAM,IAAI,CACjD,CAAA,GAAA,yIAAA,CAAA,wBAAqB,AAAD,EAAE,IAAI,OAAO,CAAC,OAAO,CAAC,oBAAoB,GAC9D,CAAA,GAAA,yIAAA,CAAA,oBAAiB,AAAD,EAAE,IAAI,OAAO,CAAC,OAAO,CAAC,oBAAoB;QAG5D,OAAO;YACL;YACA;QACF;IACF;AACF","debugId":null}},
    {"offset": {"line": 1400, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 1446, "column": 0}, "map": {"version":3,"sources":["file:///Users/andreicruceru/comment.video/packages/api/src/services/email.ts"],"sourcesContent":["import { render } from \"@react-email/render\";\nimport { TRPCError } from \"@trpc/server\";\nimport nodemailer from \"nodemailer\";\n\ninterface SendInvitationEmailParams {\n  inviterName: string;\n  organizationName: string;\n  invitationToken: string;\n  inviteeEmail: string;\n  role: string;\n}\n\n/**\n * Email service for sending various types of emails\n */\nexport class EmailService {\n  private transporter: nodemailer.Transporter;\n  private readonly baseUrl: string;\n\n  constructor() {\n    // In production, you would use real SMTP credentials\n    // For development, we can use nodemailer's ethereal email testing service\n    this.transporter = nodemailer.createTransport({\n      host: process.env.SMTP_HOST || \"smtp.ethereal.email\",\n      port: parseInt(process.env.SMTP_PORT || \"587\", 10),\n      secure: process.env.SMTP_SECURE === \"true\",\n      auth: {\n        user: process.env.SMTP_USER || \"\",\n        pass: process.env.SMTP_PASS || \"\",\n      },\n    });\n\n    this.baseUrl = process.env.NEXT_PUBLIC_APP_URL || \"http://localhost:3001\";\n  }\n\n  /**\n   * Sends an invitation email to join an organization\n   */\n  async sendInvitationEmail({\n    inviterName,\n    organizationName,\n    invitationToken,\n    inviteeEmail,\n    role,\n  }: SendInvitationEmailParams): Promise<void> {\n    try {\n      const invitationLink = `${this.baseUrl}/invitation/${invitationToken}`;\n\n      // Render the React Email component to HTML\n\n      // Send the email\n\n      console.log(`Invitation email sent to ${inviteeEmail}`);\n    } catch (error) {\n      console.error(\"Failed to send invitation email:\", error);\n      throw new TRPCError({\n        code: \"INTERNAL_SERVER_ERROR\",\n        message: \"Failed to send invitation email\",\n        cause: error,\n      });\n    }\n  }\n}\n\n// Export a singleton instance\nexport const emailService = new EmailService();\n"],"names":[],"mappings":";;;;AACA;AAAA;AACA;;;AAaO,MAAM;IACH,YAAoC;IAC3B,QAAgB;IAEjC,aAAc;QACZ,qDAAqD;QACrD,0EAA0E;QAC1E,IAAI,CAAC,WAAW,GAAG,iJAAA,CAAA,UAAU,CAAC,eAAe,CAAC;YAC5C,MAAM,QAAQ,GAAG,CAAC,SAAS,IAAI;YAC/B,MAAM,SAAS,QAAQ,GAAG,CAAC,SAAS,IAAI,OAAO;YAC/C,QAAQ,QAAQ,GAAG,CAAC,WAAW,KAAK;YACpC,MAAM;gBACJ,MAAM,QAAQ,GAAG,CAAC,SAAS,IAAI;gBAC/B,MAAM,QAAQ,GAAG,CAAC,SAAS,IAAI;YACjC;QACF;QAEA,IAAI,CAAC,OAAO,GAAG,QAAQ,GAAG,CAAC,mBAAmB,IAAI;IACpD;IAEA;;GAEC,GACD,MAAM,oBAAoB,EACxB,WAAW,EACX,gBAAgB,EAChB,eAAe,EACf,YAAY,EACZ,IAAI,EACsB,EAAiB;QAC3C,IAAI;YACF,MAAM,iBAAiB,GAAG,IAAI,CAAC,OAAO,CAAC,YAAY,EAAE,iBAAiB;YAEtE,2CAA2C;YAE3C,iBAAiB;YAEjB,QAAQ,GAAG,CAAC,CAAC,yBAAyB,EAAE,cAAc;QACxD,EAAE,OAAO,OAAO;YACd,QAAQ,KAAK,CAAC,oCAAoC;YAClD,MAAM,IAAI,4MAAA,CAAA,YAAS,CAAC;gBAClB,MAAM;gBACN,SAAS;gBACT,OAAO;YACT;QACF;IACF;AACF;AAGO,MAAM,eAAe,IAAI","debugId":null}},
    {"offset": {"line": 1491, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 1497, "column": 0}, "map": {"version":3,"sources":["file:///Users/andreicruceru/comment.video/packages/api/src/router/organization.ts"],"sourcesContent":["import type { TRPCRouterRecord } from \"@trpc/server\";\nimport { TRPCError } from \"@trpc/server\";\nimport { z } from \"zod\";\n\nimport { eq } from \"@acme/db\";\nimport { subscription } from \"@acme/db/schema\";\n\nimport { emailService } from \"../services/email\";\nimport { protectedProcedure } from \"../trpc\";\n\n// Schema for invitation request\nconst invitationSchema = z.object({\n  email: z.string().email(),\n  role: z.enum([\"admin\", \"member\", \"guest\"]).default(\"member\"),\n});\n\nexport const organizationRouter = {\n  subscription: protectedProcedure.query(async ({ ctx }) => {\n    const { session } = ctx;\n    if (!session.session.activeOrganizationId) {\n      throw new TRPCError({\n        code: \"UNAUTHORIZED\",\n        message: \"No active organization\",\n      });\n    }\n    const sub = await ctx.db.query.subscription.findFirst({\n      where: eq(subscription.referenceId, session.session.activeOrganizationId),\n    });\n    return sub ?? null;\n  }),\n\n  // Add a new endpoint for inviting members\n  inviteMember: protectedProcedure\n    .input(invitationSchema)\n    .mutation(async ({ ctx, input }) => {\n      const { session } = ctx;\n\n      // Check if user has an active organization\n      if (!session.session.activeOrganizationId) {\n        throw new TRPCError({\n          code: \"UNAUTHORIZED\",\n          message: \"No active organization\",\n        });\n      }\n\n      // We would normally create a record in the database and generate a token here\n      const invitationToken = `invite_${Math.random().toString(36).substring(2, 15)}`;\n\n      try {\n        // In a real implementation, you would:\n        // 1. Check if the email already exists in the organization\n        // 2. Create an invitation record in the database\n        // 3. Generate a secure token\n\n        // Send the invitation email\n        await emailService.sendInvitationEmail({\n          inviterName: session.user.name || \"Team Member\",\n          organizationName: \"Your Organization\",\n          invitationToken,\n          inviteeEmail: input.email,\n          role: input.role,\n        });\n\n        return {\n          success: true,\n          email: input.email,\n          message: `Invitation sent to ${input.email}`,\n        };\n      } catch (error) {\n        console.error(\"Failed to invite member:\", error);\n        throw new TRPCError({\n          code: \"INTERNAL_SERVER_ERROR\",\n          message: \"Failed to send invitation\",\n          cause: error,\n        });\n      }\n    }),\n} satisfies TRPCRouterRecord;\n"],"names":[],"mappings":";;;AACA;AAAA;AACA;AAEA;AAAA;AACA;AAAA;AAEA;AACA;;;;;;;AAEA,gCAAgC;AAChC,MAAM,mBAAmB,sIAAA,CAAA,IAAC,CAAC,MAAM,CAAC;IAChC,OAAO,sIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,KAAK;IACvB,MAAM,sIAAA,CAAA,IAAC,CAAC,IAAI,CAAC;QAAC;QAAS;QAAU;KAAQ,EAAE,OAAO,CAAC;AACrD;AAEO,MAAM,qBAAqB;IAChC,cAAc,gIAAA,CAAA,qBAAkB,CAAC,KAAK,CAAC,OAAO,EAAE,GAAG,EAAE;QACnD,MAAM,EAAE,OAAO,EAAE,GAAG;QACpB,IAAI,CAAC,QAAQ,OAAO,CAAC,oBAAoB,EAAE;YACzC,MAAM,IAAI,4MAAA,CAAA,YAAS,CAAC;gBAClB,MAAM;gBACN,SAAS;YACX;QACF;QACA,MAAM,MAAM,MAAM,IAAI,EAAE,CAAC,KAAK,CAAC,YAAY,CAAC,SAAS,CAAC;YACpD,OAAO,CAAA,GAAA,oKAAA,CAAA,KAAE,AAAD,EAAE,yIAAA,CAAA,eAAY,CAAC,WAAW,EAAE,QAAQ,OAAO,CAAC,oBAAoB;QAC1E;QACA,OAAO,OAAO;IAChB;IAEA,0CAA0C;IAC1C,cAAc,gIAAA,CAAA,qBAAkB,CAC7B,KAAK,CAAC,kBACN,QAAQ,CAAC,OAAO,EAAE,GAAG,EAAE,KAAK,EAAE;QAC7B,MAAM,EAAE,OAAO,EAAE,GAAG;QAEpB,2CAA2C;QAC3C,IAAI,CAAC,QAAQ,OAAO,CAAC,oBAAoB,EAAE;YACzC,MAAM,IAAI,4MAAA,CAAA,YAAS,CAAC;gBAClB,MAAM;gBACN,SAAS;YACX;QACF;QAEA,8EAA8E;QAC9E,MAAM,kBAAkB,CAAC,OAAO,EAAE,KAAK,MAAM,GAAG,QAAQ,CAAC,IAAI,SAAS,CAAC,GAAG,KAAK;QAE/E,IAAI;YACF,uCAAuC;YACvC,2DAA2D;YAC3D,iDAAiD;YACjD,6BAA6B;YAE7B,4BAA4B;YAC5B,MAAM,6IAAA,CAAA,eAAY,CAAC,mBAAmB,CAAC;gBACrC,aAAa,QAAQ,IAAI,CAAC,IAAI,IAAI;gBAClC,kBAAkB;gBAClB;gBACA,cAAc,MAAM,KAAK;gBACzB,MAAM,MAAM,IAAI;YAClB;YAEA,OAAO;gBACL,SAAS;gBACT,OAAO,MAAM,KAAK;gBAClB,SAAS,CAAC,mBAAmB,EAAE,MAAM,KAAK,EAAE;YAC9C;QACF,EAAE,OAAO,OAAO;YACd,QAAQ,KAAK,CAAC,4BAA4B;YAC1C,MAAM,IAAI,4MAAA,CAAA,YAAS,CAAC;gBAClB,MAAM;gBACN,SAAS;gBACT,OAAO;YACT;QACF;IACF;AACJ","debugId":null}},
    {"offset": {"line": 1578, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 1584, "column": 0}, "map": {"version":3,"sources":["file:///Users/andreicruceru/comment.video/packages/api/src/router/reviewer.ts"],"sourcesContent":["import type { TRPCRouterRecord } from \"@trpc/server\";\nimport { z } from \"zod\";\n\nimport { publicProcedure } from \"../trpc\";\n\nexport const reviewerRouter = {\n  byVideoId: publicProcedure.input(z.string()).query(async ({ ctx, input }) => {\n    const reviewers = await ctx.db.query.Reviewers.findMany({\n      where: (reviewer, { eq }) => eq(reviewer.videoId, input),\n      with: {\n        user: true,\n      },\n    });\n\n    return reviewers;\n  }),\n} satisfies TRPCRouterRecord;\n"],"names":[],"mappings":";;;AACA;AAEA;;;AAEO,MAAM,iBAAiB;IAC5B,WAAW,gIAAA,CAAA,kBAAe,CAAC,KAAK,CAAC,sIAAA,CAAA,IAAC,CAAC,MAAM,IAAI,KAAK,CAAC,OAAO,EAAE,GAAG,EAAE,KAAK,EAAE;QACtE,MAAM,YAAY,MAAM,IAAI,EAAE,CAAC,KAAK,CAAC,SAAS,CAAC,QAAQ,CAAC;YACtD,OAAO,CAAC,UAAU,EAAE,EAAE,EAAE,GAAK,GAAG,SAAS,OAAO,EAAE;YAClD,MAAM;gBACJ,MAAM;YACR;QACF;QAEA,OAAO;IACT;AACF","debugId":null}},
    {"offset": {"line": 1602, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 1616, "column": 0}, "map": {"version":3,"sources":["file:///Users/andreicruceru/comment.video/packages/api/src/router/video.ts"],"sourcesContent":["import type { TRPCRouterRecord } from \"@trpc/server\";\nimport {\n  InvocationType,\n  InvokeCommand,\n  LambdaClient,\n} from \"@aws-sdk/client-lambda\";\nimport { z } from \"zod\";\n\nimport { eq } from \"@acme/db\";\nimport { Video } from \"@acme/db/schema\";\n\nimport { protectedProcedure, publicProcedure } from \"../trpc\";\n\nexport const videoRouter = {\n  create: protectedProcedure\n    .input(\n      z.object({\n        title: z.string(),\n      }),\n    )\n    .mutation(async ({ ctx, input }) => {\n      if (!ctx.session.session.activeOrganizationId) {\n        throw new Error(\"No active organization\");\n      }\n      return ctx.db\n        .insert(Video)\n        .values({\n          title: input.title,\n          organizationId: ctx.session.session.activeOrganizationId,\n        })\n        .returning({ id: Video.id });\n    }),\n  all: protectedProcedure.query(async ({ ctx }) => {\n    if (!ctx.session.session.activeOrganizationId) {\n      throw new Error(\"No active organization\");\n    }\n    return ctx.db.query.Video.findMany({\n      where: eq(Video.organizationId, ctx.session.session.activeOrganizationId),\n    });\n  }),\n  delete: protectedProcedure\n    .input(z.string())\n    .mutation(async ({ ctx, input }) => {\n      return ctx.db.delete(Video).where(eq(Video.id, input));\n    }),\n  rename: protectedProcedure\n    .input(\n      z.object({\n        id: z.string(),\n        title: z.string(),\n      }),\n    )\n    .mutation(async ({ ctx, input }) => {\n      return ctx.db\n        .update(Video)\n        .set({ title: input.title })\n        .where(eq(Video.id, input.id))\n        .returning({ id: Video.id });\n    }),\n  byId: publicProcedure.input(z.string()).query(async ({ ctx, input }) => {\n    return ctx.db.query.Video.findFirst({\n      where: eq(Video.id, input),\n    });\n  }),\n  thumbnailCheck: protectedProcedure\n    .input(z.string())\n    .mutation(async ({ ctx, input }) => {\n      const video = await ctx.db.query.Video.findFirst({\n        where: eq(Video.id, input),\n      });\n\n      if (!video) {\n        throw new Error(\"Video not found\");\n      }\n\n      const url = video.url;\n\n      if (!url) {\n        throw new Error(\"Video URL not found\");\n      }\n\n      // Extract key from URL\n      // Assuming URL format is something like: https://example.com/path/to/key\n      const urlParts = url.split(\"/\");\n      const key = `${input}/${urlParts[urlParts.length - 1]}`;\n\n      // Initialize the Lambda client\n      const lambdaClient = new LambdaClient(); // Replace with your AWS region\n\n      // Prepare the Lambda invocation parameters\n      const params = {\n        FunctionName:\n          \"comment-video-production-GenerateThumbnailsFunction-mvwebmet\", // Replace with your actual Lambda function name\n        InvocationType: InvocationType.RequestResponse,\n        Payload: JSON.stringify({ key }),\n      };\n\n      // Invoke the Lambda function\n      const command = new InvokeCommand(params);\n      const response = await lambdaClient.send(command);\n\n      // Process the response\n      let responsePayload = {};\n      if (response.Payload) {\n        const textDecoder = new TextDecoder();\n        const jsonString = textDecoder.decode(response.Payload);\n        responsePayload = JSON.parse(jsonString);\n      }\n\n      return {\n        success: true,\n        key,\n        response: responsePayload,\n      };\n    }),\n} satisfies TRPCRouterRecord;\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 1715, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 1721, "column": 0}, "map": {"version":3,"sources":["file:///Users/andreicruceru/comment.video/packages/api/src/root.ts"],"sourcesContent":["import { authRouter } from \"./router/auth\";\nimport { awsRouter } from \"./router/aws\";\nimport { commentRouter } from \"./router/comment\";\nimport { limitsRouter } from \"./router/limits\";\nimport { organizationRouter } from \"./router/organization\";\nimport { reviewerRouter } from \"./router/reviewer\";\nimport { videoRouter } from \"./router/video\";\nimport { createTRPCRouter } from \"./trpc\";\n\nexport const appRouter = createTRPCRouter({\n  auth: authRouter,\n  aws: awsRouter,\n  video: videoRouter,\n  comment: commentRouter,\n  limits: limitsRouter,\n  reviewer: reviewerRouter,\n  organization: organizationRouter,\n});\n\n// export type definition of API\nexport type AppRouter = typeof appRouter;\n"],"names":[],"mappings":";;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;AAEO,MAAM,YAAY,CAAA,GAAA,gIAAA,CAAA,mBAAgB,AAAD,EAAE;IACxC,MAAM,0IAAA,CAAA,aAAU;IAChB,KAAK,yIAAA,CAAA,YAAS;IACd,OAAO,2IAAA,CAAA,cAAW;IAClB,SAAS,6IAAA,CAAA,gBAAa;IACtB,QAAQ,4IAAA,CAAA,eAAY;IACpB,UAAU,8IAAA,CAAA,iBAAc;IACxB,cAAc,kJAAA,CAAA,qBAAkB;AAClC","debugId":null}},
    {"offset": {"line": 1749, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 1755, "column": 0}, "map": {"version":3,"sources":["file:///Users/andreicruceru/comment.video/packages/api/src/index.ts"],"sourcesContent":["import type { inferRouterInputs, inferRouterOutputs } from \"@trpc/server\";\n\nimport type { AppRouter } from \"./root\";\nimport { appRouter } from \"./root\";\nimport { createCallerFactory, createTRPCContext } from \"./trpc\";\n\n/**\n * Create a server-side caller for the tRPC API\n * @example\n * const trpc = createCaller(createContext);\n * const res = await trpc.post.all();\n *       ^? Post[]\n */\nconst createCaller = createCallerFactory(appRouter);\n\n/**\n * Inference helpers for input types\n * @example\n * type PostByIdInput = RouterInputs['post']['byId']\n *      ^? { id: number }\n **/\ntype RouterInputs = inferRouterInputs<AppRouter>;\n\n/**\n * Inference helpers for output types\n * @example\n * type AllPostsOutput = RouterOutputs['post']['all']\n *      ^? Post[]\n **/\ntype RouterOutputs = inferRouterOutputs<AppRouter>;\n\nexport { createTRPCContext, appRouter, createCaller };\nexport type { AppRouter, RouterInputs, RouterOutputs };\n"],"names":[],"mappings":";;;AAGA;AACA;;;AAEA;;;;;;CAMC,GACD,MAAM,eAAe,CAAA,GAAA,gIAAA,CAAA,sBAAmB,AAAD,EAAE,gIAAA,CAAA,YAAS","debugId":null}},
    {"offset": {"line": 1770, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 1786, "column": 0}, "map": {"version":3,"sources":["file:///Users/andreicruceru/comment.video/apps/nextjs/src/app/api/trpc/%5Btrpc%5D/route.ts"],"sourcesContent":["import type { NextRequest } from \"next/server\";\nimport { fetchRequestHandler } from \"@trpc/server/adapters/fetch\";\n\nimport { appRouter, createTRPCContext } from \"@acme/api\";\n\n// export const runtime = \"edge\";\n\n/**\n * Configure basic CORS headers\n * You should extend this to match your needs\n */\nconst setCorsHeaders = (res: Response) => {\n  res.headers.set(\"Access-Control-Allow-Origin\", \"*\");\n  res.headers.set(\"Access-Control-Request-Method\", \"*\");\n  res.headers.set(\"Access-Control-Allow-Methods\", \"OPTIONS, GET, POST\");\n  res.headers.set(\"Access-Control-Allow-Headers\", \"*\");\n};\n\nexport const OPTIONS = () => {\n  const response = new Response(null, {\n    status: 204,\n  });\n  setCorsHeaders(response);\n  return response;\n};\n\nconst handler = async (req: NextRequest) => {\n  const response = await fetchRequestHandler({\n    endpoint: \"/api/trpc\",\n    router: appRouter,\n    req,\n    createContext: () =>\n      createTRPCContext({\n        headers: req.headers,\n      }),\n    onError({ error, path }) {\n      console.error(`>>> tRPC Error on '${path}'`, error);\n    },\n  });\n\n  setCorsHeaders(response);\n  return response;\n};\n\nexport { handler as GET, handler as POST };\n"],"names":[],"mappings":";;;;;AACA;AAAA;AAEA;AAAA;AAAA;;;AAEA,iCAAiC;AAEjC;;;CAGC,GACD,MAAM,iBAAiB,CAAC;IACtB,IAAI,OAAO,CAAC,GAAG,CAAC,+BAA+B;IAC/C,IAAI,OAAO,CAAC,GAAG,CAAC,iCAAiC;IACjD,IAAI,OAAO,CAAC,GAAG,CAAC,gCAAgC;IAChD,IAAI,OAAO,CAAC,GAAG,CAAC,gCAAgC;AAClD;AAEO,MAAM,UAAU;IACrB,MAAM,WAAW,IAAI,SAAS,MAAM;QAClC,QAAQ;IACV;IACA,eAAe;IACf,OAAO;AACT;AAEA,MAAM,UAAU,OAAO;IACrB,MAAM,WAAW,MAAM,CAAA,GAAA,uLAAA,CAAA,sBAAmB,AAAD,EAAE;QACzC,UAAU;QACV,QAAQ,gIAAA,CAAA,YAAS;QACjB;QACA,eAAe,IACb,CAAA,GAAA,gIAAA,CAAA,oBAAiB,AAAD,EAAE;gBAChB,SAAS,IAAI,OAAO;YACtB;QACF,SAAQ,EAAE,KAAK,EAAE,IAAI,EAAE;YACrB,QAAQ,KAAK,CAAC,CAAC,mBAAmB,EAAE,KAAK,CAAC,CAAC,EAAE;QAC/C;IACF;IAEA,eAAe;IACf,OAAO;AACT","debugId":null}},
    {"offset": {"line": 1831, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}