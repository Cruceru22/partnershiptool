{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 7, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 8, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 62, "column": 0}, "map": {"version":3,"sources":["file:///Users/andreicruceru/comment.video/packages/db/src/auth-schema.ts"],"sourcesContent":["import { pgTable, text, timestamp, boolean } from \"drizzle-orm/pg-core\";\n\nexport const user = pgTable(\"user\", {\n\tid: text(\"id\").primaryKey(),\n\tname: text('name').notNull(),\n\temail: text('email').notNull().unique(),\n\temailVerified: boolean('email_verified').notNull(),\n\timage: text('image'),\n\tcreatedAt: timestamp('created_at').notNull(),\n\tupdatedAt: timestamp('updated_at').notNull()\n});\n\nexport const session = pgTable(\"session\", {\n\tid: text(\"id\").primaryKey(),\n\texpiresAt: timestamp('expires_at').notNull(),\n\ttoken: text('token').notNull().unique(),\n\tcreatedAt: timestamp('created_at').notNull(),\n\tupdatedAt: timestamp('updated_at').notNull(),\n\tipAddress: text('ip_address'),\n\tuserAgent: text('user_agent'),\n\tuserId: text('user_id').notNull().references(() => user.id)\n});\n\nexport const account = pgTable(\"account\", {\n\tid: text(\"id\").primaryKey(),\n\taccountId: text('account_id').notNull(),\n\tproviderId: text('provider_id').notNull(),\n\tuserId: text('user_id').notNull().references(() => user.id),\n\taccessToken: text('access_token'),\n\trefreshToken: text('refresh_token'),\n\tidToken: text('id_token'),\n\taccessTokenExpiresAt: timestamp('access_token_expires_at'),\n\trefreshTokenExpiresAt: timestamp('refresh_token_expires_at'),\n\tscope: text('scope'),\n\tpassword: text('password'),\n\tcreatedAt: timestamp('created_at').notNull(),\n\tupdatedAt: timestamp('updated_at').notNull()\n});\n\nexport const verification = pgTable(\"verification\", {\n\tid: text(\"id\").primaryKey(),\n\tidentifier: text('identifier').notNull(),\n\tvalue: text('value').notNull(),\n\texpiresAt: timestamp('expires_at').notNull(),\n\tcreatedAt: timestamp('created_at'),\n\tupdatedAt: timestamp('updated_at')\n});\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 115, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 121, "column": 0}, "map": {"version":3,"sources":["file:///Users/andreicruceru/comment.video/packages/db/src/schema.ts"],"sourcesContent":["import { relations, sql } from \"drizzle-orm\";\nimport { pgTable } from \"drizzle-orm/pg-core\";\nimport { createInsertSchema } from \"drizzle-zod\";\nimport { z } from \"zod\";\n\nimport { user } from \"./auth-schema\";\n\nexport const Post = pgTable(\"post\", (t) => ({\n  id: t.uuid().notNull().primaryKey().defaultRandom(),\n  title: t.varchar({ length: 256 }).notNull(),\n  content: t.text().notNull(),\n  createdAt: t.timestamp().defaultNow().notNull(),\n  updatedAt: t\n    .timestamp({ mode: \"date\", withTimezone: true })\n    .$onUpdateFn(() => sql`now()`),\n}));\n\nexport const Video = pgTable(\"video\", (t) => ({\n  id: t.uuid().notNull().primaryKey().defaultRandom(),\n  title: t.varchar({ length: 256 }).notNull(),\n  description: t.text(),\n\n  userId: t\n    .text(\"user_id\")\n    .notNull()\n    .references(() => user.id),\n\n  createdAt: t.timestamp().defaultNow().notNull(),\n  updatedAt: t\n    .timestamp({ mode: \"date\", withTimezone: true })\n    .$onUpdateFn(() => sql`now()`),\n}));\n\nexport const VideoComment = pgTable(\"video_comment\", (t) => ({\n  id: t.uuid().notNull().primaryKey().defaultRandom(),\n\n  content: t.text(),\n\n  startTime: t.real(),\n  endTime: t.real(),\n\n  createdAt: t.timestamp().defaultNow().notNull(),\n  updatedAt: t\n    .timestamp({ mode: \"date\", withTimezone: true })\n    .$onUpdateFn(() => sql`now()`),\n\n  videoId: t\n    .uuid(\"video_id\")\n    .notNull()\n    .references(() => Video.id),\n\n  userId: t\n    .text(\"user_id\")\n    .notNull()\n    .references(() => user.id),\n}));\n\nexport const videoCommentRelations = relations(VideoComment, ({ one }) => ({\n  video: one(Video, {\n    fields: [VideoComment.videoId],\n    references: [Video.id],\n  }),\n  user: one(user, {\n    fields: [VideoComment.userId],\n    references: [user.id],\n  }),\n}));\n\nexport const CreatePostSchema = createInsertSchema(Post, {\n  title: z.string().max(256),\n  content: z.string().max(256),\n}).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport * from \"./auth-schema\";\n"],"names":[],"mappings":";;;;;;;AAAA;AAAA;AACA;AACA;AACA;AAEA;;;;;;AAEO,MAAM,OAAO,CAAA,GAAA,uJAAA,CAAA,UAAO,AAAD,EAAE,QAAQ,CAAC,IAAM,CAAC;QAC1C,IAAI,EAAE,IAAI,GAAG,OAAO,GAAG,UAAU,GAAG,aAAa;QACjD,OAAO,EAAE,OAAO,CAAC;YAAE,QAAQ;QAAI,GAAG,OAAO;QACzC,SAAS,EAAE,IAAI,GAAG,OAAO;QACzB,WAAW,EAAE,SAAS,GAAG,UAAU,GAAG,OAAO;QAC7C,WAAW,EACR,SAAS,CAAC;YAAE,MAAM;YAAQ,cAAc;QAAK,GAC7C,WAAW,CAAC,IAAM,8IAAA,CAAA,MAAG,CAAC,KAAK,CAAC;IACjC,CAAC;AAEM,MAAM,QAAQ,CAAA,GAAA,uJAAA,CAAA,UAAO,AAAD,EAAE,SAAS,CAAC,IAAM,CAAC;QAC5C,IAAI,EAAE,IAAI,GAAG,OAAO,GAAG,UAAU,GAAG,aAAa;QACjD,OAAO,EAAE,OAAO,CAAC;YAAE,QAAQ;QAAI,GAAG,OAAO;QACzC,aAAa,EAAE,IAAI;QAEnB,QAAQ,EACL,IAAI,CAAC,WACL,OAAO,GACP,UAAU,CAAC,IAAM,yIAAA,CAAA,OAAI,CAAC,EAAE;QAE3B,WAAW,EAAE,SAAS,GAAG,UAAU,GAAG,OAAO;QAC7C,WAAW,EACR,SAAS,CAAC;YAAE,MAAM;YAAQ,cAAc;QAAK,GAC7C,WAAW,CAAC,IAAM,8IAAA,CAAA,MAAG,CAAC,KAAK,CAAC;IACjC,CAAC;AAEM,MAAM,eAAe,CAAA,GAAA,uJAAA,CAAA,UAAO,AAAD,EAAE,iBAAiB,CAAC,IAAM,CAAC;QAC3D,IAAI,EAAE,IAAI,GAAG,OAAO,GAAG,UAAU,GAAG,aAAa;QAEjD,SAAS,EAAE,IAAI;QAEf,WAAW,EAAE,IAAI;QACjB,SAAS,EAAE,IAAI;QAEf,WAAW,EAAE,SAAS,GAAG,UAAU,GAAG,OAAO;QAC7C,WAAW,EACR,SAAS,CAAC;YAAE,MAAM;YAAQ,cAAc;QAAK,GAC7C,WAAW,CAAC,IAAM,8IAAA,CAAA,MAAG,CAAC,KAAK,CAAC;QAE/B,SAAS,EACN,IAAI,CAAC,YACL,OAAO,GACP,UAAU,CAAC,IAAM,MAAM,EAAE;QAE5B,QAAQ,EACL,IAAI,CAAC,WACL,OAAO,GACP,UAAU,CAAC,IAAM,yIAAA,CAAA,OAAI,CAAC,EAAE;IAC7B,CAAC;AAEM,MAAM,wBAAwB,CAAA,GAAA,6IAAA,CAAA,YAAS,AAAD,EAAE,cAAc,CAAC,EAAE,GAAG,EAAE,GAAK,CAAC;QACzE,OAAO,IAAI,OAAO;YAChB,QAAQ;gBAAC,aAAa,OAAO;aAAC;YAC9B,YAAY;gBAAC,MAAM,EAAE;aAAC;QACxB;QACA,MAAM,IAAI,yIAAA,CAAA,OAAI,EAAE;YACd,QAAQ;gBAAC,aAAa,MAAM;aAAC;YAC7B,YAAY;gBAAC,yIAAA,CAAA,OAAI,CAAC,EAAE;aAAC;QACvB;IACF,CAAC;AAEM,MAAM,mBAAmB,CAAA,GAAA,0IAAA,CAAA,qBAAkB,AAAD,EAAE,MAAM;IACvD,OAAO,sIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,GAAG,CAAC;IACtB,SAAS,sIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,GAAG,CAAC;AAC1B,GAAG,IAAI,CAAC;IACN,IAAI;IACJ,WAAW;IACX,WAAW;AACb","debugId":null}},
    {"offset": {"line": 204, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 258, "column": 0}, "map": {"version":3,"sources":["file:///Users/andreicruceru/comment.video/packages/db/src/client.ts"],"sourcesContent":["import { drizzle } from \"drizzle-orm/node-postgres\";\n\nimport * as schema from \"./schema\";\n\n// eslint-disable-next-line @typescript-eslint/no-non-null-assertion\nexport const db = drizzle(process.env.POSTGRES_URL!, {\n  schema,\n  casing: \"snake_case\",\n});\n"],"names":[],"mappings":";;;AAAA;AAEA;AAAA;;;AAGO,MAAM,KAAK,CAAA,GAAA,8JAAA,CAAA,UAAO,AAAD,EAAE,QAAQ,GAAG,CAAC,YAAY,EAAG;IACnD,QAAA;IACA,QAAQ;AACV","debugId":null}},
    {"offset": {"line": 270, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 342, "column": 0}, "map": {"version":3,"sources":["file:///Users/andreicruceru/comment.video/packages/auth/env.ts"],"sourcesContent":["import { createEnv } from \"@t3-oss/env-nextjs\";\nimport { z } from \"zod\";\n\nexport const env = createEnv({\n  server: {\n    GOOGLE_CLIENT_ID: z.string().min(1),\n    GOOGLE_CLIENT_SECRET: z.string().min(1),\n    RESEND_API_KEY: z.string().min(1),\n\n    BETTER_AUTH_URL: z.string().min(1),\n\n    AUTH_SECRET: z.string().min(1),\n    NODE_ENV: z.enum([\"development\", \"production\"]).optional(),\n  },\n  client: {},\n  experimental__runtimeEnv: {},\n  skipValidation:\n    !!process.env.CI || process.env.npm_lifecycle_event === \"lint\",\n});\n"],"names":[],"mappings":";;;AAAA;AACA;;;AAEO,MAAM,MAAM,CAAA,GAAA,+JAAA,CAAA,YAAS,AAAD,EAAE;IAC3B,QAAQ;QACN,kBAAkB,sIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,GAAG,CAAC;QACjC,sBAAsB,sIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,GAAG,CAAC;QACrC,gBAAgB,sIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,GAAG,CAAC;QAE/B,iBAAiB,sIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,GAAG,CAAC;QAEhC,aAAa,sIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,GAAG,CAAC;QAC5B,UAAU,sIAAA,CAAA,IAAC,CAAC,IAAI,CAAC;YAAC;YAAe;SAAa,EAAE,QAAQ;IAC1D;IACA,QAAQ,CAAC;IACT,0BAA0B,CAAC;IAC3B,gBACE,CAAC,CAAC,QAAQ,GAAG,CAAC,EAAE,IAAI,QAAQ,GAAG,CAAC,mBAAmB,KAAK;AAC5D","debugId":null}},
    {"offset": {"line": 365, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 371, "column": 0}, "map": {"version":3,"sources":["file:///Users/andreicruceru/comment.video/packages/auth/src/auth.ts"],"sourcesContent":["import type { BetterAuthOptions } from \"better-auth\";\nimport { expo } from \"@better-auth/expo\";\nimport { betterAuth } from \"better-auth\";\nimport { drizzleAdapter } from \"better-auth/adapters/drizzle\";\nimport { emailOTP, oAuthProxy } from \"better-auth/plugins\";\nimport { Resend } from \"resend\";\n\n// import sgMail from \"@sendgrid/mail\"; // Uncomment this in production\n\nimport { db } from \"@acme/db/client\";\n\nimport { env } from \"../env\";\n\n// Initialize Resend with your API key\nconst resend = new Resend(env.RESEND_API_KEY);\n\n// Configure SendGrid with your API key\n// sgMail.setApiKey(env.SENDGRID_API_KEY); // Uncomment this in production\n\nexport const config = {\n  database: drizzleAdapter(db, {\n    provider: \"pg\",\n  }),\n  secret: env.AUTH_SECRET,\n  plugins: [\n    oAuthProxy(),\n    expo(),\n    emailOTP({\n      async sendVerificationOTP({ email, otp, type }) {\n        // Always log the OTP to the console for testing\n        console.log(`Sending ${type} OTP to ${email}: ${otp}`);\n\n        try {\n          // In test mode, Resend only allows sending to the verified email\n          const verifiedEmail = \"cruceru.andrei2202@gmail.com\";\n\n          // Send the email using Resend to the verified email, but include the intended recipient in the subject\n          const { data, error } = await resend.emails.send({\n            from: \"onboarding@resend.dev\",\n            to: verifiedEmail,\n            subject: `${getSubject(type)} [For: ${email}]`, // Include the intended recipient in the subject\n            html: `\n              <!DOCTYPE html>\n              <html>\n              <head>\n                <meta charset=\"utf-8\">\n                <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n                <title>${getSubject(type)}</title>\n                <style>\n                  body {\n                    font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;\n                    line-height: 1.6;\n                    color: #333;\n                    margin: 0;\n                    padding: 0;\n                    background-color: #f9f9f9;\n                  }\n                  .container {\n                    max-width: 600px;\n                    margin: 0 auto;\n                    padding: 20px;\n                    background-color: #ffffff;\n                    border-radius: 8px;\n                    box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);\n                  }\n                  .header {\n                    text-align: center;\n                    padding: 20px 0;\n                    border-bottom: 1px solid #eaeaea;\n                  }\n                  .logo {\n                    font-size: 24px;\n                    font-weight: bold;\n                    color: #4f46e5;\n                  }\n                  .content {\n                    padding: 30px 20px;\n                    text-align: center;\n                  }\n                  .code {\n                    font-size: 32px;\n                    font-weight: bold;\n                    letter-spacing: 8px;\n                    padding: 15px;\n                    margin: 25px 0;\n                    background-color: #f3f4f6;\n                    border-radius: 6px;\n                    display: inline-block;\n                  }\n                  .footer {\n                    text-align: center;\n                    padding: 20px 0;\n                    color: #6b7280;\n                    font-size: 14px;\n                    border-top: 1px solid #eaeaea;\n                  }\n                  .button {\n                    display: inline-block;\n                    padding: 12px 24px;\n                    background-color: #4f46e5;\n                    color: white;\n                    text-decoration: none;\n                    border-radius: 4px;\n                    font-weight: 600;\n                    margin-top: 20px;\n                  }\n                  .note {\n                    margin-top: 20px;\n                    font-size: 14px;\n                    color: #6b7280;\n                  }\n                </style>\n              </head>\n              <body>\n                <div class=\"container\">\n                  <div class=\"header\">\n                    <div class=\"logo\">comment.video</div>\n                  </div>\n                  <div class=\"content\">\n                    <div style=\"background-color: #ffe8e8; padding: 10px; margin-bottom: 20px; border-radius: 4px; text-align: left;\">\n                      <strong>Development Mode Notice:</strong> This email was intended for <strong>${email}</strong> but was sent to you because of Resend's test mode limitations.\n                    </div>\n                    <h2>${getEmailHeading(type)}</h2>\n                    <p>${getEmailMessage(type)}</p>\n                    <div class=\"code\">${otp}</div>\n                    <p>This code will expire in 5 minutes.</p>\n                    <p class=\"note\">If you didn't request this code, you can safely ignore this email.</p>\n                  </div>\n                  <div class=\"footer\">\n                    &copy; ${new Date().getFullYear()} comment.video. All rights reserved.\n                  </div>\n                </div>\n              </body>\n              </html>\n            `,\n          });\n\n          if (error) {\n            console.error(\"Resend API Error:\", error);\n          } else {\n            console.log(\"Email sent successfully:\", data);\n          }\n        } catch (error) {\n          console.error(\"Error sending email:\", error);\n          // Still allow the OTP to be generated even if email sending fails\n        }\n      },\n      // Set OTP length to 6 digits\n      otpLength: 6,\n      // OTP expires in 5 minutes (300 seconds)\n      expiresIn: 300,\n      // Allow automatic sign-up when the user is not registered\n      disableSignUp: false,\n    }),\n  ],\n  socialProviders: {\n    google: {\n      clientId: env.GOOGLE_CLIENT_ID,\n      clientSecret: env.GOOGLE_CLIENT_SECRET,\n      // redirectURI: \"http://localhost:3000/api/auth/callback/discord\",\n    },\n  },\n  trustedOrigins: [\"exp://\"],\n} satisfies BetterAuthOptions;\n\n// Helper function to get the subject line based on the OTP type\nfunction getSubject(type: string): string {\n  switch (type) {\n    case \"sign-in\":\n      return \"Your Sign In Code for comment.video\";\n    case \"email-verification\":\n      return \"Verify Your Email Address for comment.video\";\n    case \"forget-password\":\n      return \"Reset Your Password for comment.video\";\n    default:\n      return \"Your Verification Code for comment.video\";\n  }\n}\n\n// Helper function to get the email heading based on the OTP type\nfunction getEmailHeading(type: string): string {\n  switch (type) {\n    case \"sign-in\":\n      return \"Sign In to Your Account\";\n    case \"email-verification\":\n      return \"Verify Your Email Address\";\n    case \"forget-password\":\n      return \"Reset Your Password\";\n    default:\n      return \"Your Verification Code\";\n  }\n}\n\n// Helper function to get the email message based on the OTP type\nfunction getEmailMessage(type: string): string {\n  switch (type) {\n    case \"sign-in\":\n      return \"Use the following code to sign in to your account:\";\n    case \"email-verification\":\n      return \"To verify your email address, please enter the following code:\";\n    case \"forget-password\":\n      return \"To reset your password, please enter the following code:\";\n    default:\n      return \"Your verification code is:\";\n  }\n}\n\nexport const auth = betterAuth(config);\nexport type Session = typeof auth.$Infer.Session;\n"],"names":[],"mappings":";;;;AACA;AACA;AAAA;AACA;AACA;AAAA;AAAA;AACA;AAEA,uEAAuE;AAEvE;AAEA;;;;;;;;AAEA,sCAAsC;AACtC,MAAM,SAAS,IAAI,0IAAA,CAAA,SAAM,CAAC,yHAAA,CAAA,MAAG,CAAC,cAAc;AAKrC,MAAM,SAAS;IACpB,UAAU,CAAA,GAAA,oLAAA,CAAA,iBAAc,AAAD,EAAE,iIAAA,CAAA,KAAE,EAAE;QAC3B,UAAU;IACZ;IACA,QAAQ,yHAAA,CAAA,MAAG,CAAC,WAAW;IACvB,SAAS;QACP,CAAA,GAAA,+KAAA,CAAA,aAAU,AAAD;QACT,CAAA,GAAA,4JAAA,CAAA,OAAI,AAAD;QACH,CAAA,GAAA,6KAAA,CAAA,WAAQ,AAAD,EAAE;YACP,MAAM,qBAAoB,EAAE,KAAK,EAAE,GAAG,EAAE,IAAI,EAAE;gBAC5C,gDAAgD;gBAChD,QAAQ,GAAG,CAAC,CAAC,QAAQ,EAAE,KAAK,QAAQ,EAAE,MAAM,EAAE,EAAE,KAAK;gBAErD,IAAI;oBACF,iEAAiE;oBACjE,MAAM,gBAAgB;oBAEtB,uGAAuG;oBACvG,MAAM,EAAE,IAAI,EAAE,KAAK,EAAE,GAAG,MAAM,OAAO,MAAM,CAAC,IAAI,CAAC;wBAC/C,MAAM;wBACN,IAAI;wBACJ,SAAS,GAAG,WAAW,MAAM,OAAO,EAAE,MAAM,CAAC,CAAC;wBAC9C,MAAM,CAAC;;;;;;uBAMI,EAAE,WAAW,MAAM;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;oGAyE0D,EAAE,MAAM;;wBAEpF,EAAE,gBAAgB,MAAM;uBACzB,EAAE,gBAAgB,MAAM;sCACT,EAAE,IAAI;;;;;2BAKjB,EAAE,IAAI,OAAO,WAAW,GAAG;;;;;YAK1C,CAAC;oBACH;oBAEA,IAAI,OAAO;wBACT,QAAQ,KAAK,CAAC,qBAAqB;oBACrC,OAAO;wBACL,QAAQ,GAAG,CAAC,4BAA4B;oBAC1C;gBACF,EAAE,OAAO,OAAO;oBACd,QAAQ,KAAK,CAAC,wBAAwB;gBACtC,kEAAkE;gBACpE;YACF;YACA,6BAA6B;YAC7B,WAAW;YACX,yCAAyC;YACzC,WAAW;YACX,0DAA0D;YAC1D,eAAe;QACjB;KACD;IACD,iBAAiB;QACf,QAAQ;YACN,UAAU,yHAAA,CAAA,MAAG,CAAC,gBAAgB;YAC9B,cAAc,yHAAA,CAAA,MAAG,CAAC,oBAAoB;QAExC;IACF;IACA,gBAAgB;QAAC;KAAS;AAC5B;AAEA,gEAAgE;AAChE,SAAS,WAAW,IAAY;IAC9B,OAAQ;QACN,KAAK;YACH,OAAO;QACT,KAAK;YACH,OAAO;QACT,KAAK;YACH,OAAO;QACT;YACE,OAAO;IACX;AACF;AAEA,iEAAiE;AACjE,SAAS,gBAAgB,IAAY;IACnC,OAAQ;QACN,KAAK;YACH,OAAO;QACT,KAAK;YACH,OAAO;QACT,KAAK;YACH,OAAO;QACT;YACE,OAAO;IACX;AACF;AAEA,iEAAiE;AACjE,SAAS,gBAAgB,IAAY;IACnC,OAAQ;QACN,KAAK;YACH,OAAO;QACT,KAAK;YACH,OAAO;QACT,KAAK;YACH,OAAO;QACT;YACE,OAAO;IACX;AACF;AAEO,MAAM,OAAO,CAAA,GAAA,kKAAA,CAAA,aAAU,AAAD,EAAE","debugId":null}},
    {"offset": {"line": 578, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 584, "column": 0}, "map": {"version":3,"sources":["file:///Users/andreicruceru/comment.video/packages/auth/src/index.rsc.ts"],"sourcesContent":["import { cache } from \"react\";\nimport { headers } from \"next/headers\";\n\nimport { auth } from \"./auth\";\n\nexport const getSession = async () =>\n  cache(auth.api.getSession)({\n    headers: await headers(),\n  });\n\nexport * from \"./auth\";\n"],"names":[],"mappings":";;;AAAA;AACA;AAEA;;;;AAEO,MAAM,aAAa,UACxB,CAAA,GAAA,uMAAA,CAAA,QAAK,AAAD,EAAE,iIAAA,CAAA,OAAI,CAAC,GAAG,CAAC,UAAU,EAAE;QACzB,SAAS,MAAM,CAAA,GAAA,iIAAA,CAAA,UAAO,AAAD;IACvB","debugId":null}},
    {"offset": {"line": 597, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 614, "column": 0}, "map": {"version":3,"sources":["file:///Users/andreicruceru/comment.video/packages/api/src/trpc.ts"],"sourcesContent":["/**\n * YOU PROBABLY DON'T NEED TO EDIT THIS FILE, UNLESS:\n * 1. You want to modify request context (see Part 1)\n * 2. You want to create a new middleware or type of procedure (see Part 3)\n *\n * tl;dr - this is where all the tRPC server stuff is created and plugged in.\n * The pieces you will need to use are documented accordingly near the end\n */\nimport { initTRPC, TRPCError } from \"@trpc/server\";\nimport superjson from \"superjson\";\nimport { ZodError } from \"zod\";\nimport { db } from \"@acme/db/client\";\nimport { auth } from \"@acme/auth\";\n\n/**\n * 1. CONTEXT\n *\n * This section defines the \"contexts\" that are available in the backend API.\n *\n * These allow you to access things when processing a request, like the database, the session, etc.\n *\n * This helper generates the \"internals\" for a tRPC context. The API handler and RSC clients each\n * wrap this and provides the required context.\n *\n * @see https://trpc.io/docs/server/context\n */\nexport const createTRPCContext = async (opts: {\n  headers: Headers;\n}) => {\n  const session = await auth.api.getSession({\n    headers: opts.headers,\n  })\n  return {\n    session,\n    db,\n  };\n};\n\n/**\n * 2. INITIALIZATION\n *\n * This is where the trpc api is initialized, connecting the context and\n * transformer\n */\nconst t = initTRPC.context<typeof createTRPCContext>().create({\n  transformer: superjson,\n  errorFormatter: ({ shape, error }) => ({\n    ...shape,\n    data: {\n      ...shape.data,\n      zodError: error.cause instanceof ZodError ? error.cause.flatten() : null,\n    },\n  }),\n});\n\n/**\n * Create a server-side caller\n * @see https://trpc.io/docs/server/server-side-calls\n */\nexport const createCallerFactory = t.createCallerFactory;\n\n/**\n * 3. ROUTER & PROCEDURE (THE IMPORTANT BIT)\n *\n * These are the pieces you use to build your tRPC API. You should import these\n * a lot in the /src/server/api/routers folder\n */\n\n/**\n * This is how you create new routers and subrouters in your tRPC API\n * @see https://trpc.io/docs/router\n */\nexport const createTRPCRouter = t.router;\n\n/**\n * Middleware for timing procedure execution and adding an articifial delay in development.\n *\n * You can remove this if you don't like it, but it can help catch unwanted waterfalls by simulating\n * network latency that would occur in production but not in local development.\n */\nconst timingMiddleware = t.middleware(async ({ next, path }) => {\n  const start = Date.now();\n\n  if (t._config.isDev) {\n    // artificial delay in dev 100-500ms\n    const waitMs = Math.floor(Math.random() * 400) + 100;\n    await new Promise((resolve) => setTimeout(resolve, waitMs));\n  }\n\n  const result = await next();\n\n  const end = Date.now();\n  console.log(`[TRPC] ${path} took ${end - start}ms to execute`);\n\n  return result;\n});\n\n/**\n * Public (unauthed) procedure\n *\n * This is the base piece you use to build new queries and mutations on your\n * tRPC API. It does not guarantee that a user querying is authorized, but you\n * can still access user session data if they are logged in\n */\nexport const publicProcedure = t.procedure.use(timingMiddleware);\n\n/**\n * Protected (authenticated) procedure\n *\n * If you want a query or mutation to ONLY be accessible to logged in users, use this. It verifies\n * the session is valid and guarantees `ctx.session.user` is not null.\n *\n * @see https://trpc.io/docs/procedures\n */\nexport const protectedProcedure = t.procedure\n  .use(timingMiddleware)\n  .use(({ ctx, next }) => {\n    if (!ctx.session?.user) {\n      throw new TRPCError({ code: \"UNAUTHORIZED\" });\n    }\n    return next({\n      ctx: {\n        // infers the `session` as non-nullable\n        session: { ...ctx.session, user: ctx.session.user },\n      },\n    });\n  });\n"],"names":[],"mappings":"AAAA;;;;;;;CAOC;;;;;;;AACD;AAAA;AAAA;AACA;AACA;AACA;AACA;AAAA;;;;;;AAcO,MAAM,oBAAoB,OAAO;IAGtC,MAAM,UAAU,MAAM,iIAAA,CAAA,OAAI,CAAC,GAAG,CAAC,UAAU,CAAC;QACxC,SAAS,KAAK,OAAO;IACvB;IACA,OAAO;QACL;QACA,IAAA,iIAAA,CAAA,KAAE;IACJ;AACF;AAEA;;;;;CAKC,GACD,MAAM,IAAI,kMAAA,CAAA,WAAQ,CAAC,OAAO,GAA6B,MAAM,CAAC;IAC5D,aAAa,4IAAA,CAAA,UAAS;IACtB,gBAAgB,CAAC,EAAE,KAAK,EAAE,KAAK,EAAE,GAAK,CAAC;YACrC,GAAG,KAAK;YACR,MAAM;gBACJ,GAAG,MAAM,IAAI;gBACb,UAAU,MAAM,KAAK,YAAY,sIAAA,CAAA,WAAQ,GAAG,MAAM,KAAK,CAAC,OAAO,KAAK;YACtE;QACF,CAAC;AACH;AAMO,MAAM,sBAAsB,EAAE,mBAAmB;AAajD,MAAM,mBAAmB,EAAE,MAAM;AAExC;;;;;CAKC,GACD,MAAM,mBAAmB,EAAE,UAAU,CAAC,OAAO,EAAE,IAAI,EAAE,IAAI,EAAE;IACzD,MAAM,QAAQ,KAAK,GAAG;IAEtB,IAAI,EAAE,OAAO,CAAC,KAAK,EAAE;QACnB,oCAAoC;QACpC,MAAM,SAAS,KAAK,KAAK,CAAC,KAAK,MAAM,KAAK,OAAO;QACjD,MAAM,IAAI,QAAQ,CAAC,UAAY,WAAW,SAAS;IACrD;IAEA,MAAM,SAAS,MAAM;IAErB,MAAM,MAAM,KAAK,GAAG;IACpB,QAAQ,GAAG,CAAC,CAAC,OAAO,EAAE,KAAK,MAAM,EAAE,MAAM,MAAM,aAAa,CAAC;IAE7D,OAAO;AACT;AASO,MAAM,kBAAkB,EAAE,SAAS,CAAC,GAAG,CAAC;AAUxC,MAAM,qBAAqB,EAAE,SAAS,CAC1C,GAAG,CAAC,kBACJ,GAAG,CAAC,CAAC,EAAE,GAAG,EAAE,IAAI,EAAE;IACjB,IAAI,CAAC,IAAI,OAAO,EAAE,MAAM;QACtB,MAAM,IAAI,4MAAA,CAAA,YAAS,CAAC;YAAE,MAAM;QAAe;IAC7C;IACA,OAAO,KAAK;QACV,KAAK;YACH,uCAAuC;YACvC,SAAS;gBAAE,GAAG,IAAI,OAAO;gBAAE,MAAM,IAAI,OAAO,CAAC,IAAI;YAAC;QACpD;IACF;AACF","debugId":null}},
    {"offset": {"line": 701, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 707, "column": 0}, "map": {"version":3,"sources":["file:///Users/andreicruceru/comment.video/packages/api/src/router/auth.ts"],"sourcesContent":["import type { TRPCRouterRecord } from \"@trpc/server\";\nimport { protectedProcedure, publicProcedure } from \"../trpc\";\n\nexport const authRouter = {\n  getSession: publicProcedure.query(({ ctx }) => {\n    return ctx.session;\n  }),\n  getSecretMessage: protectedProcedure.query(() => {\n    return \"you can see this secret message!\";\n  }),\n} satisfies TRPCRouterRecord;\n"],"names":[],"mappings":";;;AACA;;AAEO,MAAM,aAAa;IACxB,YAAY,gIAAA,CAAA,kBAAe,CAAC,KAAK,CAAC,CAAC,EAAE,GAAG,EAAE;QACxC,OAAO,IAAI,OAAO;IACpB;IACA,kBAAkB,gIAAA,CAAA,qBAAkB,CAAC,KAAK,CAAC;QACzC,OAAO;IACT;AACF","debugId":null}},
    {"offset": {"line": 720, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 814, "column": 0}, "map": {"version":3,"sources":["file:///Users/andreicruceru/comment.video/packages/api/src/router/aws.ts"],"sourcesContent":["import type { TRPCRouterRecord } from \"@trpc/server\";\nimport {\n  AbortMultipartUploadCommand,\n  CompleteMultipartUploadCommand,\n  CreateMultipartUploadCommand,\n  PutObjectCommand,\n  S3Client,\n  UploadPartCommand,\n} from \"@aws-sdk/client-s3\";\nimport { getSignedUrl } from \"@aws-sdk/s3-request-presigner\";\nimport { TRPCError } from \"@trpc/server\";\nimport { z } from \"zod\";\n\nimport { protectedProcedure } from \"../trpc\";\n\nconst bucketName = process.env.AWS_BUCKET_NAME;\nconst maxMB = 700;\n\nexport const awsRouter = {\n  initiateMultipartUpload: protectedProcedure\n    .input(\n      z.object({\n        videoId: z.string(),\n        parts: z.number(),\n        contentLength: z.number(),\n      }),\n    )\n    .mutation(async ({ ctx, input }) => {\n      const key = input.videoId;\n\n      if (input.contentLength > maxMB * 1024 * 1024) {\n        throw new TRPCError({\n          code: \"PRECONDITION_FAILED\",\n          message: \"File is too large\",\n        });\n      }\n\n      const client = new S3Client({\n        useAccelerateEndpoint: true,\n      });\n\n      const createCommand = new CreateMultipartUploadCommand({\n        Bucket: bucketName,\n        Key: key,\n        Metadata: {\n          videoid: input.videoId,\n          userid: ctx.session.user.id,\n        },\n      });\n\n      const { UploadId } = await client.send(createCommand);\n      if (!UploadId) throw new Error(\"Failed to initiate multipart upload\");\n\n      const signedUrls = await Promise.all(\n        Array.from({ length: input.parts }, async (_, index) => {\n          const uploadPartCommand = new UploadPartCommand({\n            Bucket: bucketName,\n            Key: key,\n            UploadId,\n            PartNumber: index + 1,\n          });\n\n          const signedUrl = await getSignedUrl(client, uploadPartCommand, {\n            expiresIn: 3600,\n          });\n          return { url: signedUrl, partNumber: index + 1 };\n        }),\n      );\n\n      return {\n        uploadId: UploadId,\n        signedUrls,\n      };\n    }),\n  completeMultipartUpload: protectedProcedure\n    .input(\n      z.object({\n        videoId: z.string(),\n        uploadId: z.string(),\n        parts: z.array(\n          z.object({\n            ETag: z.string(),\n            PartNumber: z.number(),\n          }),\n        ),\n      }),\n    )\n    .mutation(async ({ ctx, input }) => {\n      const key = input.videoId;\n\n      const client = new S3Client({\n        useAccelerateEndpoint: true,\n      });\n\n      try {\n        const command = new CompleteMultipartUploadCommand({\n          Bucket: bucketName,\n          Key: key,\n          UploadId: input.uploadId,\n          MultipartUpload: {\n            Parts: input.parts,\n          },\n        });\n\n        await client.send(command);\n\n        const videoUrl = `https://${bucketName}.s3.amazonaws.com/${key}`;\n\n        return { success: true, videoUrl };\n      } catch (_error) {\n        await client.send(\n          new AbortMultipartUploadCommand({\n            Bucket: bucketName,\n            Key: key,\n            UploadId: input.uploadId,\n          }),\n        );\n        // Sentry.captureException(_error);\n\n        throw new TRPCError({\n          code: \"INTERNAL_SERVER_ERROR\",\n          message: \"Failed to complete multipart upload\",\n        });\n      }\n    }),\n} satisfies TRPCRouterRecord;\n"],"names":[],"mappings":";;;AACA;AAQA;AAAA;AACA;AAAA;AACA;AAEA;;;;;;AAEA,MAAM,aAAa,QAAQ,GAAG,CAAC,eAAe;AAC9C,MAAM,QAAQ;AAEP,MAAM,YAAY;IACvB,yBAAyB,gIAAA,CAAA,qBAAkB,CACxC,KAAK,CACJ,sIAAA,CAAA,IAAC,CAAC,MAAM,CAAC;QACP,SAAS,sIAAA,CAAA,IAAC,CAAC,MAAM;QACjB,OAAO,sIAAA,CAAA,IAAC,CAAC,MAAM;QACf,eAAe,sIAAA,CAAA,IAAC,CAAC,MAAM;IACzB,IAED,QAAQ,CAAC,OAAO,EAAE,GAAG,EAAE,KAAK,EAAE;QAC7B,MAAM,MAAM,MAAM,OAAO;QAEzB,IAAI,MAAM,aAAa,GAAG,QAAQ,OAAO,MAAM;YAC7C,MAAM,IAAI,4MAAA,CAAA,YAAS,CAAC;gBAClB,MAAM;gBACN,SAAS;YACX;QACF;QAEA,MAAM,SAAS,IAAI,iJAAA,CAAA,WAAQ,CAAC;YAC1B,uBAAuB;QACzB;QAEA,MAAM,gBAAgB,IAAI,iJAAA,CAAA,+BAA4B,CAAC;YACrD,QAAQ;YACR,KAAK;YACL,UAAU;gBACR,SAAS,MAAM,OAAO;gBACtB,QAAQ,IAAI,OAAO,CAAC,IAAI,CAAC,EAAE;YAC7B;QACF;QAEA,MAAM,EAAE,QAAQ,EAAE,GAAG,MAAM,OAAO,IAAI,CAAC;QACvC,IAAI,CAAC,UAAU,MAAM,IAAI,MAAM;QAE/B,MAAM,aAAa,MAAM,QAAQ,GAAG,CAClC,MAAM,IAAI,CAAC;YAAE,QAAQ,MAAM,KAAK;QAAC,GAAG,OAAO,GAAG;YAC5C,MAAM,oBAAoB,IAAI,iJAAA,CAAA,oBAAiB,CAAC;gBAC9C,QAAQ;gBACR,KAAK;gBACL;gBACA,YAAY,QAAQ;YACtB;YAEA,MAAM,YAAY,MAAM,CAAA,GAAA,0LAAA,CAAA,eAAY,AAAD,EAAE,QAAQ,mBAAmB;gBAC9D,WAAW;YACb;YACA,OAAO;gBAAE,KAAK;gBAAW,YAAY,QAAQ;YAAE;QACjD;QAGF,OAAO;YACL,UAAU;YACV;QACF;IACF;IACF,yBAAyB,gIAAA,CAAA,qBAAkB,CACxC,KAAK,CACJ,sIAAA,CAAA,IAAC,CAAC,MAAM,CAAC;QACP,SAAS,sIAAA,CAAA,IAAC,CAAC,MAAM;QACjB,UAAU,sIAAA,CAAA,IAAC,CAAC,MAAM;QAClB,OAAO,sIAAA,CAAA,IAAC,CAAC,KAAK,CACZ,sIAAA,CAAA,IAAC,CAAC,MAAM,CAAC;YACP,MAAM,sIAAA,CAAA,IAAC,CAAC,MAAM;YACd,YAAY,sIAAA,CAAA,IAAC,CAAC,MAAM;QACtB;IAEJ,IAED,QAAQ,CAAC,OAAO,EAAE,GAAG,EAAE,KAAK,EAAE;QAC7B,MAAM,MAAM,MAAM,OAAO;QAEzB,MAAM,SAAS,IAAI,iJAAA,CAAA,WAAQ,CAAC;YAC1B,uBAAuB;QACzB;QAEA,IAAI;YACF,MAAM,UAAU,IAAI,iJAAA,CAAA,iCAA8B,CAAC;gBACjD,QAAQ;gBACR,KAAK;gBACL,UAAU,MAAM,QAAQ;gBACxB,iBAAiB;oBACf,OAAO,MAAM,KAAK;gBACpB;YACF;YAEA,MAAM,OAAO,IAAI,CAAC;YAElB,MAAM,WAAW,CAAC,QAAQ,EAAE,WAAW,kBAAkB,EAAE,KAAK;YAEhE,OAAO;gBAAE,SAAS;gBAAM;YAAS;QACnC,EAAE,OAAO,QAAQ;YACf,MAAM,OAAO,IAAI,CACf,IAAI,iJAAA,CAAA,8BAA2B,CAAC;gBAC9B,QAAQ;gBACR,KAAK;gBACL,UAAU,MAAM,QAAQ;YAC1B;YAEF,mCAAmC;YAEnC,MAAM,IAAI,4MAAA,CAAA,YAAS,CAAC;gBAClB,MAAM;gBACN,SAAS;YACX;QACF;IACF;AACJ","debugId":null}},
    {"offset": {"line": 920, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 926, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 929, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 943, "column": 0}, "map": {"version":3,"sources":["file:///Users/andreicruceru/comment.video/packages/api/src/router/comment.ts"],"sourcesContent":["import { TRPCRouterRecord } from \"@trpc/server\";\nimport { z } from \"zod\";\n\nimport { eq } from \"@acme/db\";\nimport { VideoComment } from \"@acme/db/schema\";\n\nimport { protectedProcedure } from \"../trpc\";\n\nexport const commentRouter = {\n  byVideoId: protectedProcedure\n    .input(\n      z.object({\n        videoId: z.string(),\n      }),\n    )\n    .query(async ({ ctx, input }) => {\n      const comments = await ctx.db.query.VideoComment.findMany({\n        where: eq(VideoComment.videoId, input.videoId),\n        orderBy: (videoComment, { desc }) => [desc(videoComment.createdAt)],\n        with: {\n          user: {\n            columns: {\n              id: true,\n              name: true,\n              image: true,\n            },\n          },\n        },\n      });\n\n      return comments;\n    }),\n\n  create: protectedProcedure\n    .input(\n      z.object({\n        videoId: z.string(),\n        content: z.string(),\n        startTime: z.number().optional(),\n        endTime: z.number().optional(),\n      }),\n    )\n    .mutation(async ({ ctx, input }) => {\n      return ctx.db\n        .insert(VideoComment)\n        .values({\n          videoId: input.videoId,\n          content: input.content,\n          userId: ctx.session.user.id,\n          startTime: input.startTime,\n          endTime: input.endTime,\n        })\n        .returning({ id: VideoComment.id });\n    }),\n\n  delete: protectedProcedure\n    .input(z.string())\n    .mutation(async ({ ctx, input }) => {\n      return ctx.db.delete(VideoComment).where(eq(VideoComment.id, input));\n    }),\n} satisfies TRPCRouterRecord;\n"],"names":[],"mappings":";;;AACA;AAEA;AAAA;AACA;AAAA;AAEA;;;;;AAEO,MAAM,gBAAgB;IAC3B,WAAW,gIAAA,CAAA,qBAAkB,CAC1B,KAAK,CACJ,sIAAA,CAAA,IAAC,CAAC,MAAM,CAAC;QACP,SAAS,sIAAA,CAAA,IAAC,CAAC,MAAM;IACnB,IAED,KAAK,CAAC,OAAO,EAAE,GAAG,EAAE,KAAK,EAAE;QAC1B,MAAM,WAAW,MAAM,IAAI,EAAE,CAAC,KAAK,CAAC,YAAY,CAAC,QAAQ,CAAC;YACxD,OAAO,CAAA,GAAA,oKAAA,CAAA,KAAE,AAAD,EAAE,iJAAA,CAAA,eAAY,CAAC,OAAO,EAAE,MAAM,OAAO;YAC7C,SAAS,CAAC,cAAc,EAAE,IAAI,EAAE,GAAK;oBAAC,KAAK,aAAa,SAAS;iBAAE;YACnE,MAAM;gBACJ,MAAM;oBACJ,SAAS;wBACP,IAAI;wBACJ,MAAM;wBACN,OAAO;oBACT;gBACF;YACF;QACF;QAEA,OAAO;IACT;IAEF,QAAQ,gIAAA,CAAA,qBAAkB,CACvB,KAAK,CACJ,sIAAA,CAAA,IAAC,CAAC,MAAM,CAAC;QACP,SAAS,sIAAA,CAAA,IAAC,CAAC,MAAM;QACjB,SAAS,sIAAA,CAAA,IAAC,CAAC,MAAM;QACjB,WAAW,sIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ;QAC9B,SAAS,sIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ;IAC9B,IAED,QAAQ,CAAC,OAAO,EAAE,GAAG,EAAE,KAAK,EAAE;QAC7B,OAAO,IAAI,EAAE,CACV,MAAM,CAAC,iJAAA,CAAA,eAAY,EACnB,MAAM,CAAC;YACN,SAAS,MAAM,OAAO;YACtB,SAAS,MAAM,OAAO;YACtB,QAAQ,IAAI,OAAO,CAAC,IAAI,CAAC,EAAE;YAC3B,WAAW,MAAM,SAAS;YAC1B,SAAS,MAAM,OAAO;QACxB,GACC,SAAS,CAAC;YAAE,IAAI,iJAAA,CAAA,eAAY,CAAC,EAAE;QAAC;IACrC;IAEF,QAAQ,gIAAA,CAAA,qBAAkB,CACvB,KAAK,CAAC,sIAAA,CAAA,IAAC,CAAC,MAAM,IACd,QAAQ,CAAC,OAAO,EAAE,GAAG,EAAE,KAAK,EAAE;QAC7B,OAAO,IAAI,EAAE,CAAC,MAAM,CAAC,iJAAA,CAAA,eAAY,EAAE,KAAK,CAAC,CAAA,GAAA,oKAAA,CAAA,KAAE,AAAD,EAAE,iJAAA,CAAA,eAAY,CAAC,EAAE,EAAE;IAC/D;AACJ","debugId":null}},
    {"offset": {"line": 997, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 1003, "column": 0}, "map": {"version":3,"sources":["file:///Users/andreicruceru/comment.video/packages/api/src/router/post.ts"],"sourcesContent":["import type { TRPCRouterRecord } from \"@trpc/server\";\nimport { z } from \"zod\";\n\nimport { desc, eq } from \"@acme/db\";\nimport { CreatePostSchema, Post } from \"@acme/db/schema\";\n\nimport { protectedProcedure, publicProcedure } from \"../trpc\";\n\nexport const postRouter = {\n  all: publicProcedure.query(({ ctx }) => {\n    // return ctx.db.select().from(schema.post).orderBy(desc(schema.post.id));\n    return ctx.db.query.Post.findMany({\n      orderBy: desc(Post.id),\n      limit: 10,\n    });\n  }),\n\n  byId: publicProcedure\n    .input(z.object({ id: z.string() }))\n    .query(({ ctx, input }) => {\n      // return ctx.db\n      //   .select()\n      //   .from(schema.post)\n      //   .where(eq(schema.post.id, input.id));\n\n      return ctx.db.query.Post.findFirst({\n        where: eq(Post.id, input.id),\n      });\n    }),\n\n  create: protectedProcedure\n    .input(CreatePostSchema)\n    .mutation(({ ctx, input }) => {\n      return ctx.db.insert(Post).values(input);\n    }),\n\n  delete: protectedProcedure.input(z.string()).mutation(({ ctx, input }) => {\n    return ctx.db.delete(Post).where(eq(Post.id, input));\n  }),\n} satisfies TRPCRouterRecord;\n"],"names":[],"mappings":";;;AACA;AAEA;AAAA;AAAA;AACA;AAAA;AAEA;;;;;AAEO,MAAM,aAAa;IACxB,KAAK,gIAAA,CAAA,kBAAe,CAAC,KAAK,CAAC,CAAC,EAAE,GAAG,EAAE;QACjC,0EAA0E;QAC1E,OAAO,IAAI,EAAE,CAAC,KAAK,CAAC,IAAI,CAAC,QAAQ,CAAC;YAChC,SAAS,CAAA,GAAA,gKAAA,CAAA,OAAI,AAAD,EAAE,iJAAA,CAAA,OAAI,CAAC,EAAE;YACrB,OAAO;QACT;IACF;IAEA,MAAM,gIAAA,CAAA,kBAAe,CAClB,KAAK,CAAC,sIAAA,CAAA,IAAC,CAAC,MAAM,CAAC;QAAE,IAAI,sIAAA,CAAA,IAAC,CAAC,MAAM;IAAG,IAChC,KAAK,CAAC,CAAC,EAAE,GAAG,EAAE,KAAK,EAAE;QACpB,gBAAgB;QAChB,cAAc;QACd,uBAAuB;QACvB,0CAA0C;QAE1C,OAAO,IAAI,EAAE,CAAC,KAAK,CAAC,IAAI,CAAC,SAAS,CAAC;YACjC,OAAO,CAAA,GAAA,oKAAA,CAAA,KAAE,AAAD,EAAE,iJAAA,CAAA,OAAI,CAAC,EAAE,EAAE,MAAM,EAAE;QAC7B;IACF;IAEF,QAAQ,gIAAA,CAAA,qBAAkB,CACvB,KAAK,CAAC,iJAAA,CAAA,mBAAgB,EACtB,QAAQ,CAAC,CAAC,EAAE,GAAG,EAAE,KAAK,EAAE;QACvB,OAAO,IAAI,EAAE,CAAC,MAAM,CAAC,iJAAA,CAAA,OAAI,EAAE,MAAM,CAAC;IACpC;IAEF,QAAQ,gIAAA,CAAA,qBAAkB,CAAC,KAAK,CAAC,sIAAA,CAAA,IAAC,CAAC,MAAM,IAAI,QAAQ,CAAC,CAAC,EAAE,GAAG,EAAE,KAAK,EAAE;QACnE,OAAO,IAAI,EAAE,CAAC,MAAM,CAAC,iJAAA,CAAA,OAAI,EAAE,KAAK,CAAC,CAAA,GAAA,oKAAA,CAAA,KAAE,AAAD,EAAE,iJAAA,CAAA,OAAI,CAAC,EAAE,EAAE;IAC/C;AACF","debugId":null}},
    {"offset": {"line": 1043, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 1049, "column": 0}, "map": {"version":3,"sources":["file:///Users/andreicruceru/comment.video/packages/api/src/router/video.ts"],"sourcesContent":["import { TRPCRouterRecord } from \"@trpc/server\";\nimport { z } from \"zod\";\n\nimport { eq } from \"@acme/db\";\nimport { Video } from \"@acme/db/schema\";\n\nimport { protectedProcedure } from \"../trpc\";\n\nexport const videoRouter = {\n  create: protectedProcedure\n    .input(\n      z.object({\n        title: z.string(),\n      }),\n    )\n    .mutation(async ({ ctx, input }) => {\n      return ctx.db\n        .insert(Video)\n        .values({\n          title: input.title,\n          userId: ctx.session.user.id,\n        })\n        .returning({ id: Video.id });\n    }),\n  all: protectedProcedure.query(async ({ ctx }) => {\n    return ctx.db.query.Video.findMany({\n      where: eq(Video.userId, ctx.session.user.id),\n    });\n  }),\n  delete: protectedProcedure\n    .input(z.string())\n    .mutation(async ({ ctx, input }) => {\n      return ctx.db.delete(Video).where(eq(Video.id, input));\n    }),\n  byId: protectedProcedure.input(z.string()).query(async ({ ctx, input }) => {\n    return ctx.db.query.Video.findFirst({\n      where: eq(Video.id, input),\n    });\n  }),\n} satisfies TRPCRouterRecord;\n"],"names":[],"mappings":";;;AACA;AAEA;AAAA;AACA;AAAA;AAEA;;;;;AAEO,MAAM,cAAc;IACzB,QAAQ,gIAAA,CAAA,qBAAkB,CACvB,KAAK,CACJ,sIAAA,CAAA,IAAC,CAAC,MAAM,CAAC;QACP,OAAO,sIAAA,CAAA,IAAC,CAAC,MAAM;IACjB,IAED,QAAQ,CAAC,OAAO,EAAE,GAAG,EAAE,KAAK,EAAE;QAC7B,OAAO,IAAI,EAAE,CACV,MAAM,CAAC,iJAAA,CAAA,QAAK,EACZ,MAAM,CAAC;YACN,OAAO,MAAM,KAAK;YAClB,QAAQ,IAAI,OAAO,CAAC,IAAI,CAAC,EAAE;QAC7B,GACC,SAAS,CAAC;YAAE,IAAI,iJAAA,CAAA,QAAK,CAAC,EAAE;QAAC;IAC9B;IACF,KAAK,gIAAA,CAAA,qBAAkB,CAAC,KAAK,CAAC,OAAO,EAAE,GAAG,EAAE;QAC1C,OAAO,IAAI,EAAE,CAAC,KAAK,CAAC,KAAK,CAAC,QAAQ,CAAC;YACjC,OAAO,CAAA,GAAA,oKAAA,CAAA,KAAE,AAAD,EAAE,iJAAA,CAAA,QAAK,CAAC,MAAM,EAAE,IAAI,OAAO,CAAC,IAAI,CAAC,EAAE;QAC7C;IACF;IACA,QAAQ,gIAAA,CAAA,qBAAkB,CACvB,KAAK,CAAC,sIAAA,CAAA,IAAC,CAAC,MAAM,IACd,QAAQ,CAAC,OAAO,EAAE,GAAG,EAAE,KAAK,EAAE;QAC7B,OAAO,IAAI,EAAE,CAAC,MAAM,CAAC,iJAAA,CAAA,QAAK,EAAE,KAAK,CAAC,CAAA,GAAA,oKAAA,CAAA,KAAE,AAAD,EAAE,iJAAA,CAAA,QAAK,CAAC,EAAE,EAAE;IACjD;IACF,MAAM,gIAAA,CAAA,qBAAkB,CAAC,KAAK,CAAC,sIAAA,CAAA,IAAC,CAAC,MAAM,IAAI,KAAK,CAAC,OAAO,EAAE,GAAG,EAAE,KAAK,EAAE;QACpE,OAAO,IAAI,EAAE,CAAC,KAAK,CAAC,KAAK,CAAC,SAAS,CAAC;YAClC,OAAO,CAAA,GAAA,oKAAA,CAAA,KAAE,AAAD,EAAE,iJAAA,CAAA,QAAK,CAAC,EAAE,EAAE;QACtB;IACF;AACF","debugId":null}},
    {"offset": {"line": 1087, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 1093, "column": 0}, "map": {"version":3,"sources":["file:///Users/andreicruceru/comment.video/packages/api/src/root.ts"],"sourcesContent":["import { authRouter } from \"./router/auth\";\nimport { awsRouter } from \"./router/aws\";\nimport { commentRouter } from \"./router/comment\";\nimport { postRouter } from \"./router/post\";\nimport { videoRouter } from \"./router/video\";\nimport { createTRPCRouter } from \"./trpc\";\n\nexport const appRouter = createTRPCRouter({\n  auth: authRouter,\n  post: postRouter,\n  aws: awsRouter,\n  video: videoRouter,\n  comment: commentRouter,\n});\n\n// export type definition of API\nexport type AppRouter = typeof appRouter;\n"],"names":[],"mappings":";;;AAAA;AACA;AACA;AACA;AACA;AACA;;;;;;;AAEO,MAAM,YAAY,CAAA,GAAA,gIAAA,CAAA,mBAAgB,AAAD,EAAE;IACxC,MAAM,0IAAA,CAAA,aAAU;IAChB,MAAM,0IAAA,CAAA,aAAU;IAChB,KAAK,yIAAA,CAAA,YAAS;IACd,OAAO,2IAAA,CAAA,cAAW;IAClB,SAAS,6IAAA,CAAA,gBAAa;AACxB","debugId":null}},
    {"offset": {"line": 1115, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 1121, "column": 0}, "map": {"version":3,"sources":["file:///Users/andreicruceru/comment.video/packages/api/src/index.ts"],"sourcesContent":["import type { inferRouterInputs, inferRouterOutputs } from \"@trpc/server\";\n\nimport type { AppRouter } from \"./root\";\nimport { appRouter } from \"./root\";\nimport { createCallerFactory, createTRPCContext } from \"./trpc\";\n\n/**\n * Create a server-side caller for the tRPC API\n * @example\n * const trpc = createCaller(createContext);\n * const res = await trpc.post.all();\n *       ^? Post[]\n */\nconst createCaller = createCallerFactory(appRouter);\n\n/**\n * Inference helpers for input types\n * @example\n * type PostByIdInput = RouterInputs['post']['byId']\n *      ^? { id: number }\n **/\ntype RouterInputs = inferRouterInputs<AppRouter>;\n\n/**\n * Inference helpers for output types\n * @example\n * type AllPostsOutput = RouterOutputs['post']['all']\n *      ^? Post[]\n **/\ntype RouterOutputs = inferRouterOutputs<AppRouter>;\n\nexport { createTRPCContext, appRouter, createCaller };\nexport type { AppRouter, RouterInputs, RouterOutputs };\n"],"names":[],"mappings":";;;AAGA;AACA;;;AAEA;;;;;;CAMC,GACD,MAAM,eAAe,CAAA,GAAA,gIAAA,CAAA,sBAAmB,AAAD,EAAE,gIAAA,CAAA,YAAS","debugId":null}},
    {"offset": {"line": 1136, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 1152, "column": 0}, "map": {"version":3,"sources":["file:///Users/andreicruceru/comment.video/apps/nextjs/src/app/api/trpc/%5Btrpc%5D/route.ts"],"sourcesContent":["import type { NextRequest } from \"next/server\";\nimport { fetchRequestHandler } from \"@trpc/server/adapters/fetch\";\n\nimport { appRouter, createTRPCContext } from \"@acme/api\";\n\n// export const runtime = \"edge\";\n\n/**\n * Configure basic CORS headers\n * You should extend this to match your needs\n */\nconst setCorsHeaders = (res: Response) => {\n  res.headers.set(\"Access-Control-Allow-Origin\", \"*\");\n  res.headers.set(\"Access-Control-Request-Method\", \"*\");\n  res.headers.set(\"Access-Control-Allow-Methods\", \"OPTIONS, GET, POST\");\n  res.headers.set(\"Access-Control-Allow-Headers\", \"*\");\n};\n\nexport const OPTIONS = () => {\n  const response = new Response(null, {\n    status: 204,\n  });\n  setCorsHeaders(response);\n  return response;\n};\n\nconst handler = async (req: NextRequest) => {\n  const response = await fetchRequestHandler({\n    endpoint: \"/api/trpc\",\n    router: appRouter,\n    req,\n    createContext: () =>\n      createTRPCContext({\n        headers: req.headers,\n      }),\n    onError({ error, path }) {\n      console.error(`>>> tRPC Error on '${path}'`, error);\n    },\n  });\n\n  setCorsHeaders(response);\n  return response;\n};\n\nexport { handler as GET, handler as POST };\n"],"names":[],"mappings":";;;;;AACA;AAAA;AAEA;AAAA;AAAA;;;AAEA,iCAAiC;AAEjC;;;CAGC,GACD,MAAM,iBAAiB,CAAC;IACtB,IAAI,OAAO,CAAC,GAAG,CAAC,+BAA+B;IAC/C,IAAI,OAAO,CAAC,GAAG,CAAC,iCAAiC;IACjD,IAAI,OAAO,CAAC,GAAG,CAAC,gCAAgC;IAChD,IAAI,OAAO,CAAC,GAAG,CAAC,gCAAgC;AAClD;AAEO,MAAM,UAAU;IACrB,MAAM,WAAW,IAAI,SAAS,MAAM;QAClC,QAAQ;IACV;IACA,eAAe;IACf,OAAO;AACT;AAEA,MAAM,UAAU,OAAO;IACrB,MAAM,WAAW,MAAM,CAAA,GAAA,uLAAA,CAAA,sBAAmB,AAAD,EAAE;QACzC,UAAU;QACV,QAAQ,gIAAA,CAAA,YAAS;QACjB;QACA,eAAe,IACb,CAAA,GAAA,gIAAA,CAAA,oBAAiB,AAAD,EAAE;gBAChB,SAAS,IAAI,OAAO;YACtB;QACF,SAAQ,EAAE,KAAK,EAAE,IAAI,EAAE;YACrB,QAAQ,KAAK,CAAC,CAAC,mBAAmB,EAAE,KAAK,CAAC,CAAC,EAAE;QAC/C;IACF;IAEA,eAAe;IACf,OAAO;AACT","debugId":null}},
    {"offset": {"line": 1197, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}