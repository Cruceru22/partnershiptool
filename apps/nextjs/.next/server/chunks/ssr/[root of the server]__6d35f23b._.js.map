{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 7, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 8, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 26, "column": 0}, "map": {"version":3,"sources":["file:///Users/andreicruceru/comment.video/packages/api/src/trpc.ts"],"sourcesContent":["/**\n * YOU PROBABLY DON'T NEED TO EDIT THIS FILE, UNLESS:\n * 1. You want to modify request context (see Part 1)\n * 2. You want to create a new middleware or type of procedure (see Part 3)\n *\n * tl;dr - this is where all the tRPC server stuff is created and plugged in.\n * The pieces you will need to use are documented accordingly near the end\n */\nimport { initTRPC, TRPCError } from \"@trpc/server\";\nimport superjson from \"superjson\";\nimport { ZodError } from \"zod\";\n\nimport { auth } from \"@acme/auth\";\nimport { db } from \"@acme/db/client\";\n\n/**\n * 1. CONTEXT\n *\n * This section defines the \"contexts\" that are available in the backend API.\n *\n * These allow you to access things when processing a request, like the database, the session, etc.\n *\n * This helper generates the \"internals\" for a tRPC context. The API handler and RSC clients each\n * wrap this and provides the required context.\n *\n * @see https://trpc.io/docs/server/context\n */\nexport const createTRPCContext = async (opts: { headers: Headers }) => {\n  const session = await auth.api.getSession({\n    headers: opts.headers,\n  });\n  return {\n    session,\n    db,\n    // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n    ip: opts.headers.get(\"x-forwarded-for\")!,\n  };\n};\nexport type TRPCContext = Awaited<ReturnType<typeof createTRPCContext>>;\n\n/**\n * 2. INITIALIZATION\n *\n * This is where the trpc api is initialized, connecting the context and\n * transformer\n */\nconst t = initTRPC.context<typeof createTRPCContext>().create({\n  transformer: superjson,\n  errorFormatter: ({ shape, error }) => ({\n    ...shape,\n    data: {\n      ...shape.data,\n      zodError: error.cause instanceof ZodError ? error.cause.flatten() : null,\n    },\n  }),\n});\n\n/**\n * Create a server-side caller\n * @see https://trpc.io/docs/server/server-side-calls\n */\nexport const createCallerFactory = t.createCallerFactory;\n\n/**\n * 3. ROUTER & PROCEDURE (THE IMPORTANT BIT)\n *\n * These are the pieces you use to build your tRPC API. You should import these\n * a lot in the /src/server/api/routers folder\n */\n\n/**\n * This is how you create new routers and subrouters in your tRPC API\n * @see https://trpc.io/docs/router\n */\nexport const createTRPCRouter = t.router;\n\n/**\n * Middleware for timing procedure execution and adding an articifial delay in development.\n *\n * You can remove this if you don't like it, but it can help catch unwanted waterfalls by simulating\n * network latency that would occur in production but not in local development.\n */\nconst timingMiddleware = t.middleware(async ({ next, path }) => {\n  const start = Date.now();\n\n  if (t._config.isDev) {\n    // artificial delay in dev 100-500ms\n    const waitMs = Math.floor(Math.random() * 400) + 100;\n    await new Promise((resolve) => setTimeout(resolve, waitMs));\n  }\n\n  const result = await next();\n\n  const end = Date.now();\n  console.log(`[TRPC] ${path} took ${end - start}ms to execute`);\n\n  return result;\n});\n\n/**\n * Public (unauthed) procedure\n *\n * This is the base piece you use to build new queries and mutations on your\n * tRPC API. It does not guarantee that a user querying is authorized, but you\n * can still access user session data if they are logged in\n */\nexport const publicProcedure = t.procedure.use(timingMiddleware);\n\n/**\n * Protected (authenticated) procedure\n *\n * If you want a query or mutation to ONLY be accessible to logged in users, use this. It verifies\n * the session is valid and guarantees `ctx.session.user` is not null.\n *\n * @see https://trpc.io/docs/procedures\n */\nexport const protectedProcedure = t.procedure\n  .use(timingMiddleware)\n  .use(({ ctx, next }) => {\n    if (!ctx.session?.user) {\n      throw new TRPCError({ code: \"UNAUTHORIZED\" });\n    }\n    return next({\n      ctx: {\n        // infers the `session` as non-nullable\n        session: { ...ctx.session, user: ctx.session.user },\n      },\n    });\n  });\n"],"names":[],"mappings":"AAAA;;;;;;;CAOC;;;;;;;AACD;AAAA;AAAA;AACA;AACA;AAEA;AAAA;AACA;;;;;;AAcO,MAAM,oBAAoB,OAAO;IACtC,MAAM,UAAU,MAAM,+HAAA,CAAA,OAAI,CAAC,GAAG,CAAC,UAAU,CAAC;QACxC,SAAS,KAAK,OAAO;IACvB;IACA,OAAO;QACL;QACA,IAAA,+HAAA,CAAA,KAAE;QACF,oEAAoE;QACpE,IAAI,KAAK,OAAO,CAAC,GAAG,CAAC;IACvB;AACF;AAGA;;;;;CAKC,GACD,MAAM,IAAI,gMAAA,CAAA,WAAQ,CAAC,OAAO,GAA6B,MAAM,CAAC;IAC5D,aAAa,0IAAA,CAAA,UAAS;IACtB,gBAAgB,CAAC,EAAE,KAAK,EAAE,KAAK,EAAE,GAAK,CAAC;YACrC,GAAG,KAAK;YACR,MAAM;gBACJ,GAAG,MAAM,IAAI;gBACb,UAAU,MAAM,KAAK,YAAY,oIAAA,CAAA,WAAQ,GAAG,MAAM,KAAK,CAAC,OAAO,KAAK;YACtE;QACF,CAAC;AACH;AAMO,MAAM,sBAAsB,EAAE,mBAAmB;AAajD,MAAM,mBAAmB,EAAE,MAAM;AAExC;;;;;CAKC,GACD,MAAM,mBAAmB,EAAE,UAAU,CAAC,OAAO,EAAE,IAAI,EAAE,IAAI,EAAE;IACzD,MAAM,QAAQ,KAAK,GAAG;IAEtB,IAAI,EAAE,OAAO,CAAC,KAAK,EAAE;QACnB,oCAAoC;QACpC,MAAM,SAAS,KAAK,KAAK,CAAC,KAAK,MAAM,KAAK,OAAO;QACjD,MAAM,IAAI,QAAQ,CAAC,UAAY,WAAW,SAAS;IACrD;IAEA,MAAM,SAAS,MAAM;IAErB,MAAM,MAAM,KAAK,GAAG;IACpB,QAAQ,GAAG,CAAC,CAAC,OAAO,EAAE,KAAK,MAAM,EAAE,MAAM,MAAM,aAAa,CAAC;IAE7D,OAAO;AACT;AASO,MAAM,kBAAkB,EAAE,SAAS,CAAC,GAAG,CAAC;AAUxC,MAAM,qBAAqB,EAAE,SAAS,CAC1C,GAAG,CAAC,kBACJ,GAAG,CAAC,CAAC,EAAE,GAAG,EAAE,IAAI,EAAE;IACjB,IAAI,CAAC,IAAI,OAAO,EAAE,MAAM;QACtB,MAAM,IAAI,0MAAA,CAAA,YAAS,CAAC;YAAE,MAAM;QAAe;IAC7C;IACA,OAAO,KAAK;QACV,KAAK;YACH,uCAAuC;YACvC,SAAS;gBAAE,GAAG,IAAI,OAAO;gBAAE,MAAM,IAAI,OAAO,CAAC,IAAI;YAAC;QACpD;IACF;AACF","debugId":null}},
    {"offset": {"line": 115, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 121, "column": 0}, "map": {"version":3,"sources":["file:///Users/andreicruceru/comment.video/packages/api/src/router/auth.ts"],"sourcesContent":["import type { TRPCRouterRecord } from \"@trpc/server\";\nimport { protectedProcedure, publicProcedure } from \"../trpc\";\n\nexport const authRouter = {\n  getSession: publicProcedure.query(({ ctx }) => {\n    return ctx.session;\n  }),\n  getSecretMessage: protectedProcedure.query(() => {\n    return \"you can see this secret message!\";\n  }),\n} satisfies TRPCRouterRecord;\n"],"names":[],"mappings":";;;AACA;;AAEO,MAAM,aAAa;IACxB,YAAY,8HAAA,CAAA,kBAAe,CAAC,KAAK,CAAC,CAAC,EAAE,GAAG,EAAE;QACxC,OAAO,IAAI,OAAO;IACpB;IACA,kBAAkB,8HAAA,CAAA,qBAAkB,CAAC,KAAK,CAAC;QACzC,OAAO;IACT;AACF","debugId":null}},
    {"offset": {"line": 134, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 196, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 199, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 213, "column": 0}, "map": {"version":3,"sources":["file:///Users/andreicruceru/comment.video/packages/validators/src/limits.ts"],"sourcesContent":["import { differenceInSeconds, endOfDay, endOfMonth } from \"date-fns\";\nimport { match } from \"ts-pattern\";\n\ntype Plan = \"free\" | \"pro\" | \"team\";\n\n//upload limit in MB\nexport const getUploadSizeLimit = (plan: Plan) =>\n  match(plan)\n    .with(\"free\", () => 500)\n    .with(\"pro\", () => 30 * 1024) // 30 GB in MB\n    .with(\"team\", () => 60 * 1024) // 60 GB in MB\n    .exhaustive();\n\nexport const getImportLimit = (plan: Plan) =>\n  match(plan)\n    .with(\"free\", () => 3)\n    .with(\"pro\", () => 100)\n    .with(\"team\", () => 300)\n    .exhaustive();\n\nexport const getUploadSizeLimitKey = (userId: string) =>\n  `organization:${userId}:uploadSize`;\n\nexport const getImportLimitKey = (userId: string) =>\n  `organization:${userId}:import`;\n\nexport const getEndOfMonthDuration = () => {\n  const now = new Date();\n  const endOfCurrentMonth = endOfMonth(now);\n\n  // Calculate the difference in seconds between now and the end of the month\n  const expiryTime = differenceInSeconds(endOfCurrentMonth, now);\n  return expiryTime;\n};\n\nexport const getEndOfDayDuration = () => {\n  const now = new Date();\n  const endOfCurrentDay = endOfDay(now);\n\n  // Calculate the difference in seconds between now and the end of the day\n  const expiryTime = differenceInSeconds(endOfCurrentDay, now);\n  return expiryTime;\n};\n"],"names":[],"mappings":";;;;;;;;AAAA;AAAA;AAAA;AACA;;;AAKO,MAAM,qBAAqB,CAAC,OACjC,CAAA,GAAA,8IAAA,CAAA,QAAK,AAAD,EAAE,MACH,IAAI,CAAC,QAAQ,IAAM,KACnB,IAAI,CAAC,OAAO,IAAM,KAAK,MAAM,cAAc;KAC3C,IAAI,CAAC,QAAQ,IAAM,KAAK,MAAM,cAAc;KAC5C,UAAU;AAER,MAAM,iBAAiB,CAAC,OAC7B,CAAA,GAAA,8IAAA,CAAA,QAAK,AAAD,EAAE,MACH,IAAI,CAAC,QAAQ,IAAM,GACnB,IAAI,CAAC,OAAO,IAAM,KAClB,IAAI,CAAC,QAAQ,IAAM,KACnB,UAAU;AAER,MAAM,wBAAwB,CAAC,SACpC,CAAC,aAAa,EAAE,OAAO,WAAW,CAAC;AAE9B,MAAM,oBAAoB,CAAC,SAChC,CAAC,aAAa,EAAE,OAAO,OAAO,CAAC;AAE1B,MAAM,wBAAwB;IACnC,MAAM,MAAM,IAAI;IAChB,MAAM,oBAAoB,CAAA,GAAA,yIAAA,CAAA,aAAU,AAAD,EAAE;IAErC,2EAA2E;IAC3E,MAAM,aAAa,CAAA,GAAA,kJAAA,CAAA,sBAAmB,AAAD,EAAE,mBAAmB;IAC1D,OAAO;AACT;AAEO,MAAM,sBAAsB;IACjC,MAAM,MAAM,IAAI;IAChB,MAAM,kBAAkB,CAAA,GAAA,uIAAA,CAAA,WAAQ,AAAD,EAAE;IAEjC,yEAAyE;IACzE,MAAM,aAAa,CAAA,GAAA,kJAAA,CAAA,sBAAmB,AAAD,EAAE,iBAAiB;IACxD,OAAO;AACT","debugId":null}},
    {"offset": {"line": 247, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 253, "column": 0}, "map": {"version":3,"sources":["file:///Users/andreicruceru/comment.video/packages/validators/src/redis.ts"],"sourcesContent":["import { Redis } from \"@upstash/redis\";\nimport humanId from \"human-id\";\n\nimport type { Plan } from \"./plans\";\nimport {\n  getEndOfMonthDuration,\n  getImportLimitKey,\n  getUploadSizeLimit,\n  getUploadSizeLimitKey,\n} from \"./limits\";\n\nconst redis = Redis.fromEnv();\n\nexport const checkUploadLimit = async (\n  plan: Plan,\n  organizationId: string,\n  sizeInMB: number,\n) => {\n  const uploadSizeKey = getUploadSizeLimitKey(organizationId);\n  const importCountKey = getImportLimitKey(organizationId);\n\n  const limits = getUploadSizeLimit(plan);\n\n  const uploadSize = await redis.incrby(uploadSizeKey, sizeInMB);\n  const importCount = await redis.incrby(importCountKey, 1);\n\n  const endOfMonth = getEndOfMonthDuration();\n\n  if (importCount === 1 && uploadSize) {\n    await redis.expire(uploadSizeKey, endOfMonth);\n    await redis.expire(importCountKey, endOfMonth);\n  }\n\n  //allow 100MB more than the limit for the upload\n  if (uploadSize > limits + 100) return true;\n\n  return false;\n};\n\nexport const generateAnonUser = async (ip: string) => {\n  const name = humanId({\n    separator: \"-\",\n    capitalize: false,\n  });\n\n  await redis.set(`anon:${ip}`, name);\n\n  return name;\n};\n\nexport const getAnonUser = async (ip: string) => {\n  const name = await redis.get<string>(`anon:${ip}`);\n\n  if (!name) {\n    const generatedUser = await generateAnonUser(ip);\n    return { name: generatedUser };\n  }\n\n  return { name };\n};\n"],"names":[],"mappings":";;;;;AAAA;AAAA;AACA;AAGA;;;;AAOA,MAAM,QAAQ,6JAAA,CAAA,QAAK,CAAC,OAAO;AAEpB,MAAM,mBAAmB,OAC9B,MACA,gBACA;IAEA,MAAM,gBAAgB,CAAA,GAAA,uIAAA,CAAA,wBAAqB,AAAD,EAAE;IAC5C,MAAM,iBAAiB,CAAA,GAAA,uIAAA,CAAA,oBAAiB,AAAD,EAAE;IAEzC,MAAM,SAAS,CAAA,GAAA,uIAAA,CAAA,qBAAkB,AAAD,EAAE;IAElC,MAAM,aAAa,MAAM,MAAM,MAAM,CAAC,eAAe;IACrD,MAAM,cAAc,MAAM,MAAM,MAAM,CAAC,gBAAgB;IAEvD,MAAM,aAAa,CAAA,GAAA,uIAAA,CAAA,wBAAqB,AAAD;IAEvC,IAAI,gBAAgB,KAAK,YAAY;QACnC,MAAM,MAAM,MAAM,CAAC,eAAe;QAClC,MAAM,MAAM,MAAM,CAAC,gBAAgB;IACrC;IAEA,gDAAgD;IAChD,IAAI,aAAa,SAAS,KAAK,OAAO;IAEtC,OAAO;AACT;AAEO,MAAM,mBAAmB,OAAO;IACrC,MAAM,OAAO,CAAA,GAAA,4IAAA,CAAA,UAAO,AAAD,EAAE;QACnB,WAAW;QACX,YAAY;IACd;IAEA,MAAM,MAAM,GAAG,CAAC,CAAC,KAAK,EAAE,IAAI,EAAE;IAE9B,OAAO;AACT;AAEO,MAAM,cAAc,OAAO;IAChC,MAAM,OAAO,MAAM,MAAM,GAAG,CAAS,CAAC,KAAK,EAAE,IAAI;IAEjD,IAAI,CAAC,MAAM;QACT,MAAM,gBAAgB,MAAM,iBAAiB;QAC7C,OAAO;YAAE,MAAM;QAAc;IAC/B;IAEA,OAAO;QAAE;IAAK;AAChB","debugId":null}},
    {"offset": {"line": 301, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 307, "column": 0}, "map": {"version":3,"sources":["file:///Users/andreicruceru/comment.video/packages/api/src/router/aws.ts"],"sourcesContent":["import type { TRPCRouterRecord } from \"@trpc/server\";\nimport {\n  AbortMultipartUploadCommand,\n  CompleteMultipartUploadCommand,\n  CreateMultipartUploadCommand,\n  S3Client,\n  UploadPartCommand,\n} from \"@aws-sdk/client-s3\";\nimport { getSignedUrl } from \"@aws-sdk/s3-request-presigner\";\nimport { TRPCError } from \"@trpc/server\";\nimport { z } from \"zod\";\n\nimport type { Plan } from \"@acme/validators/plans\";\nimport { eq } from \"@acme/db\";\nimport { subscription, Video } from \"@acme/db/schema\";\nimport { checkUploadLimit } from \"@acme/validators/redis\";\n\nimport { protectedProcedure } from \"../trpc\";\n\nconst bucketName = process.env.AWS_BUCKET_NAME;\nconst maxMB = 700;\n\nexport const awsRouter = {\n  initiateMultipartUpload: protectedProcedure\n    .input(\n      z.object({\n        videoId: z.string(),\n        parts: z.number(),\n        contentLength: z.number(),\n        fileExtension: z.string(),\n      }),\n    )\n    .mutation(async ({ ctx, input }) => {\n      if (!ctx.session.session.activeOrganizationId) {\n        throw new TRPCError({\n          code: \"FORBIDDEN\",\n          message: \"You must be in an organization to upload a video\",\n        });\n      }\n\n      const sub = await ctx.db.query.subscription.findFirst({\n        where: eq(\n          subscription.referenceId,\n          ctx.session.session.activeOrganizationId,\n        ),\n      });\n\n      // Convert content length from bytes to MB for consistent comparison\n      const contentLengthInMB = Math.ceil(input.contentLength / (1024 * 1024));\n\n      const organizationId = ctx.session.session.activeOrganizationId;\n      if (!organizationId) {\n        throw new TRPCError({\n          code: \"FORBIDDEN\",\n          message: \"You must be in an organization to upload a video\",\n        });\n      }\n\n      const limitExceeded = await checkUploadLimit(\n        (sub?.plan ?? \"free\") as Plan,\n        organizationId,\n        contentLengthInMB,\n      );\n\n      if (limitExceeded) {\n        throw new TRPCError({\n          code: \"FORBIDDEN\",\n          message: \"You have reached your upload limit\",\n        });\n      }\n\n      const key = `${input.videoId}/video.${input.fileExtension}`;\n\n      if (contentLengthInMB > maxMB) {\n        throw new TRPCError({\n          code: \"PRECONDITION_FAILED\",\n          message: `File is too large. Maximum size is ${maxMB} MB.`,\n        });\n      }\n\n      const client = new S3Client({\n        useAccelerateEndpoint: true,\n      });\n\n      const createCommand = new CreateMultipartUploadCommand({\n        Bucket: bucketName,\n        Key: key,\n        Metadata: {\n          videoid: input.videoId,\n          userid: ctx.session.user.id,\n        },\n      });\n\n      const { UploadId } = await client.send(createCommand);\n      if (!UploadId) throw new Error(\"Failed to initiate multipart upload\");\n\n      const signedUrls = await Promise.all(\n        Array.from({ length: input.parts }, async (_, index) => {\n          const uploadPartCommand = new UploadPartCommand({\n            Bucket: bucketName,\n            Key: key,\n            UploadId,\n            PartNumber: index + 1,\n          });\n\n          const signedUrl = await getSignedUrl(client, uploadPartCommand, {\n            expiresIn: 3600,\n          });\n          return { url: signedUrl, partNumber: index + 1 };\n        }),\n      );\n\n      return {\n        uploadId: UploadId,\n        signedUrls,\n      };\n    }),\n  completeMultipartUpload: protectedProcedure\n    .input(\n      z.object({\n        videoId: z.string(),\n        uploadId: z.string(),\n        parts: z.array(\n          z.object({\n            ETag: z.string(),\n            PartNumber: z.number(),\n          }),\n        ),\n        fileExtension: z.string(),\n      }),\n    )\n    .mutation(async ({ ctx, input }) => {\n      const key = `${input.videoId}/video.${input.fileExtension}`;\n\n      const client = new S3Client({\n        useAccelerateEndpoint: true,\n      });\n\n      try {\n        const command = new CompleteMultipartUploadCommand({\n          Bucket: bucketName,\n          Key: key,\n          UploadId: input.uploadId,\n          MultipartUpload: {\n            Parts: input.parts,\n          },\n        });\n\n        await client.send(command);\n\n        const videoUrl = `https://${bucketName}.s3.amazonaws.com/${key}`;\n\n        await ctx.db\n          .update(Video)\n          .set({ url: videoUrl })\n          .where(eq(Video.id, input.videoId));\n\n        return { success: true, videoUrl };\n      } catch (_error) {\n        await client.send(\n          new AbortMultipartUploadCommand({\n            Bucket: bucketName,\n            Key: key,\n            UploadId: input.uploadId,\n          }),\n        );\n        // Sentry.captureException(_error);\n\n        throw new TRPCError({\n          code: \"INTERNAL_SERVER_ERROR\",\n          message: \"Failed to complete multipart upload\",\n        });\n      }\n    }),\n} satisfies TRPCRouterRecord;\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 452, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 458, "column": 0}, "map": {"version":3,"sources":["file:///Users/andreicruceru/comment.video/packages/api/src/rate-limit.ts"],"sourcesContent":["import type { Duration } from \"@upstash/ratelimit\";\nimport { TRPCError } from \"@trpc/server\";\nimport { Ratelimit } from \"@upstash/ratelimit\"; // for deno: see above\nimport { Redis } from \"@upstash/redis\"; // see below for cloudflare and fastly adapters\n\nimport { Reviewers } from \"@acme/db/schema\";\nimport { getAnonUser } from \"@acme/validators/redis\";\n\nimport type { TRPCContext } from \"./trpc\";\n\n// Create a new ratelimiter, that allows 10 requests per 10 seconds\n\nexport const checkLimitsPublic = async (\n  ctx: TRPCContext,\n  type: string,\n  tokens: number,\n  duration: Duration,\n) => {\n  const ip = ctx.ip;\n\n  const isLoggedIn = ctx.session?.user;\n\n  if (isLoggedIn && ctx.session?.user.id)\n    return {\n      type: \"user\" as const,\n      userId: ctx.session.user.id,\n    };\n\n  const ratelimit = new Ratelimit({\n    redis: Redis.fromEnv(),\n    limiter: Ratelimit.slidingWindow(tokens, duration),\n    analytics: true,\n  });\n\n  const { success } = await ratelimit.limit(`${type}:${ip}`);\n\n  if (!success) {\n    throw new TRPCError({ code: \"TOO_MANY_REQUESTS\" });\n  }\n\n  const anonUser = await getAnonUser(ctx.ip);\n\n  return {\n    type: \"anon\" as const,\n    anonUser,\n  };\n};\n\nexport const makeReviewer = async (\n  db: TRPCContext[\"db\"],\n  data: Awaited<ReturnType<typeof checkLimitsPublic>>,\n  videoId: string,\n) => {\n  const [reviewer] = await db\n    .insert(Reviewers)\n    .values({\n      anonUserId: data.anonUser?.name,\n      userId: data.userId,\n      videoId: videoId,\n    })\n    .onConflictDoUpdate({\n      set: {\n        userId: data.userId,\n        anonUserId: data.anonUser?.name,\n      },\n      target: [Reviewers.videoId, Reviewers.userId, Reviewers.anonUserId],\n    })\n    .returning();\n\n  // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n  return reviewer!;\n};\n"],"names":[],"mappings":";;;;AACA;AAAA;AACA,yQAAgD,sBAAsB;AACtE,wSAAwC,+CAA+C;AAAvF;AAEA;AAAA;AACA;;;;;;AAMO,MAAM,oBAAoB,OAC/B,KACA,MACA,QACA;IAEA,MAAM,KAAK,IAAI,EAAE;IAEjB,MAAM,aAAa,IAAI,OAAO,EAAE;IAEhC,IAAI,cAAc,IAAI,OAAO,EAAE,KAAK,IAClC,OAAO;QACL,MAAM;QACN,QAAQ,IAAI,OAAO,CAAC,IAAI,CAAC,EAAE;IAC7B;IAEF,MAAM,YAAY,IAAI,uJAAA,CAAA,YAAS,CAAC;QAC9B,OAAO,6JAAA,CAAA,QAAK,CAAC,OAAO;QACpB,SAAS,uJAAA,CAAA,YAAS,CAAC,aAAa,CAAC,QAAQ;QACzC,WAAW;IACb;IAEA,MAAM,EAAE,OAAO,EAAE,GAAG,MAAM,UAAU,KAAK,CAAC,GAAG,KAAK,CAAC,EAAE,IAAI;IAEzD,IAAI,CAAC,SAAS;QACZ,MAAM,IAAI,0MAAA,CAAA,YAAS,CAAC;YAAE,MAAM;QAAoB;IAClD;IAEA,MAAM,WAAW,MAAM,CAAA,GAAA,sIAAA,CAAA,cAAW,AAAD,EAAE,IAAI,EAAE;IAEzC,OAAO;QACL,MAAM;QACN;IACF;AACF;AAEO,MAAM,eAAe,OAC1B,IACA,MACA;IAEA,MAAM,CAAC,SAAS,GAAG,MAAM,GACtB,MAAM,CAAC,+IAAA,CAAA,YAAS,EAChB,MAAM,CAAC;QACN,YAAY,KAAK,QAAQ,EAAE;QAC3B,QAAQ,KAAK,MAAM;QACnB,SAAS;IACX,GACC,kBAAkB,CAAC;QAClB,KAAK;YACH,QAAQ,KAAK,MAAM;YACnB,YAAY,KAAK,QAAQ,EAAE;QAC7B;QACA,QAAQ;YAAC,+IAAA,CAAA,YAAS,CAAC,OAAO;YAAE,+IAAA,CAAA,YAAS,CAAC,MAAM;YAAE,+IAAA,CAAA,YAAS,CAAC,UAAU;SAAC;IACrE,GACC,SAAS;IAEZ,oEAAoE;IACpE,OAAO;AACT","debugId":null}},
    {"offset": {"line": 518, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 524, "column": 0}, "map": {"version":3,"sources":["file:///Users/andreicruceru/comment.video/packages/api/src/router/comment.ts"],"sourcesContent":["import type { TRPCRouterRecord } from \"@trpc/server\";\nimport { z } from \"zod\";\n\nimport { and, eq } from \"@acme/db\";\nimport { VideoComment } from \"@acme/db/schema\";\n\nimport { checkLimitsPublic, makeReviewer } from \"../rate-limit\";\nimport { protectedProcedure, publicProcedure } from \"../trpc\";\n\nexport const commentRouter = {\n  byVideoId: publicProcedure\n    .input(\n      z.object({\n        videoId: z.string(),\n        reviewerId: z.string().nullable(),\n      }),\n    )\n    .query(async ({ ctx, input }) => {\n      const comments = await ctx.db.query.VideoComment.findMany({\n        where: input.reviewerId\n          ? and(\n              eq(VideoComment.videoId, input.videoId),\n              eq(VideoComment.reviewerId, input.reviewerId),\n            )\n          : eq(VideoComment.videoId, input.videoId),\n        orderBy: (videoComment, { desc }) => [desc(videoComment.createdAt)],\n        with: {\n          reviewer: {\n            with: {\n              user: true,\n            },\n          },\n        },\n      });\n\n      const sortedComments = comments.sort((a, b) => {\n        return (a.startTime ?? 0) - (b.startTime ?? 0);\n      });\n\n      return sortedComments;\n    }),\n\n  create: publicProcedure\n    .input(\n      z.object({\n        id: z.string(),\n        videoId: z.string(),\n        content: z.string(),\n        startTime: z.number(),\n        endTime: z.number().optional(),\n      }),\n    )\n    .mutation(async ({ ctx, input }) => {\n      const checkLimitsData = await checkLimitsPublic(\n        ctx,\n        \"comments\",\n        5,\n        \"10s\",\n      );\n\n      const reviewer = await makeReviewer(\n        ctx.db,\n        checkLimitsData,\n        input.videoId,\n      );\n\n      return ctx.db\n        .insert(VideoComment)\n        .values({\n          id: input.id,\n          videoId: input.videoId,\n          content: input.content,\n          startTime: input.startTime,\n          endTime: input.endTime,\n          reviewerId: reviewer.id,\n        })\n        .returning({ id: VideoComment.id });\n    }),\n\n  delete: protectedProcedure\n    .input(z.string())\n    .mutation(async ({ ctx, input }) => {\n      return ctx.db.delete(VideoComment).where(eq(VideoComment.id, input));\n    }),\n} satisfies TRPCRouterRecord;\n"],"names":[],"mappings":";;;AACA;AAEA;AAAA;AACA;AAAA;AAEA;AACA;;;;;;AAEO,MAAM,gBAAgB;IAC3B,WAAW,8HAAA,CAAA,kBAAe,CACvB,KAAK,CACJ,oIAAA,CAAA,IAAC,CAAC,MAAM,CAAC;QACP,SAAS,oIAAA,CAAA,IAAC,CAAC,MAAM;QACjB,YAAY,oIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ;IACjC,IAED,KAAK,CAAC,OAAO,EAAE,GAAG,EAAE,KAAK,EAAE;QAC1B,MAAM,WAAW,MAAM,IAAI,EAAE,CAAC,KAAK,CAAC,YAAY,CAAC,QAAQ,CAAC;YACxD,OAAO,MAAM,UAAU,GACnB,CAAA,GAAA,kKAAA,CAAA,MAAG,AAAD,EACA,CAAA,GAAA,kKAAA,CAAA,KAAE,AAAD,EAAE,+IAAA,CAAA,eAAY,CAAC,OAAO,EAAE,MAAM,OAAO,GACtC,CAAA,GAAA,kKAAA,CAAA,KAAE,AAAD,EAAE,+IAAA,CAAA,eAAY,CAAC,UAAU,EAAE,MAAM,UAAU,KAE9C,CAAA,GAAA,kKAAA,CAAA,KAAE,AAAD,EAAE,+IAAA,CAAA,eAAY,CAAC,OAAO,EAAE,MAAM,OAAO;YAC1C,SAAS,CAAC,cAAc,EAAE,IAAI,EAAE,GAAK;oBAAC,KAAK,aAAa,SAAS;iBAAE;YACnE,MAAM;gBACJ,UAAU;oBACR,MAAM;wBACJ,MAAM;oBACR;gBACF;YACF;QACF;QAEA,MAAM,iBAAiB,SAAS,IAAI,CAAC,CAAC,GAAG;YACvC,OAAO,CAAC,EAAE,SAAS,IAAI,CAAC,IAAI,CAAC,EAAE,SAAS,IAAI,CAAC;QAC/C;QAEA,OAAO;IACT;IAEF,QAAQ,8HAAA,CAAA,kBAAe,CACpB,KAAK,CACJ,oIAAA,CAAA,IAAC,CAAC,MAAM,CAAC;QACP,IAAI,oIAAA,CAAA,IAAC,CAAC,MAAM;QACZ,SAAS,oIAAA,CAAA,IAAC,CAAC,MAAM;QACjB,SAAS,oIAAA,CAAA,IAAC,CAAC,MAAM;QACjB,WAAW,oIAAA,CAAA,IAAC,CAAC,MAAM;QACnB,SAAS,oIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ;IAC9B,IAED,QAAQ,CAAC,OAAO,EAAE,GAAG,EAAE,KAAK,EAAE;QAC7B,MAAM,kBAAkB,MAAM,CAAA,GAAA,uIAAA,CAAA,oBAAiB,AAAD,EAC5C,KACA,YACA,GACA;QAGF,MAAM,WAAW,MAAM,CAAA,GAAA,uIAAA,CAAA,eAAY,AAAD,EAChC,IAAI,EAAE,EACN,iBACA,MAAM,OAAO;QAGf,OAAO,IAAI,EAAE,CACV,MAAM,CAAC,+IAAA,CAAA,eAAY,EACnB,MAAM,CAAC;YACN,IAAI,MAAM,EAAE;YACZ,SAAS,MAAM,OAAO;YACtB,SAAS,MAAM,OAAO;YACtB,WAAW,MAAM,SAAS;YAC1B,SAAS,MAAM,OAAO;YACtB,YAAY,SAAS,EAAE;QACzB,GACC,SAAS,CAAC;YAAE,IAAI,+IAAA,CAAA,eAAY,CAAC,EAAE;QAAC;IACrC;IAEF,QAAQ,8HAAA,CAAA,qBAAkB,CACvB,KAAK,CAAC,oIAAA,CAAA,IAAC,CAAC,MAAM,IACd,QAAQ,CAAC,OAAO,EAAE,GAAG,EAAE,KAAK,EAAE;QAC7B,OAAO,IAAI,EAAE,CAAC,MAAM,CAAC,+IAAA,CAAA,eAAY,EAAE,KAAK,CAAC,CAAA,GAAA,kKAAA,CAAA,KAAE,AAAD,EAAE,+IAAA,CAAA,eAAY,CAAC,EAAE,EAAE;IAC/D;AACJ","debugId":null}},
    {"offset": {"line": 586, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 592, "column": 0}, "map": {"version":3,"sources":["file:///Users/andreicruceru/comment.video/packages/api/src/router/limits.ts"],"sourcesContent":["import { Redis } from \"@upstash/redis\";\n\nimport {\n  getImportLimitKey,\n  getUploadSizeLimitKey,\n} from \"@acme/validators/limits\";\n\nimport { createTRPCRouter, protectedProcedure } from \"../trpc\";\n\nconst redis = Redis.fromEnv();\n\nexport const limitsRouter = createTRPCRouter({\n  get: protectedProcedure.query(async ({ ctx }) => {\n    if (!ctx.session.session.activeOrganizationId) {\n      throw new Error(\"No active organization\");\n    }\n\n    const [uploadLimit, importLimit] = await redis.mget<[number, number]>(\n      getUploadSizeLimitKey(ctx.session.session.activeOrganizationId),\n      getImportLimitKey(ctx.session.session.activeOrganizationId),\n    );\n\n    return {\n      uploadLimit,\n      importLimit,\n    };\n  }),\n});\n"],"names":[],"mappings":";;;AAAA;AAAA;AAEA;AAKA;;;;AAEA,MAAM,QAAQ,6JAAA,CAAA,QAAK,CAAC,OAAO;AAEpB,MAAM,eAAe,CAAA,GAAA,8HAAA,CAAA,mBAAgB,AAAD,EAAE;IAC3C,KAAK,8HAAA,CAAA,qBAAkB,CAAC,KAAK,CAAC,OAAO,EAAE,GAAG,EAAE;QAC1C,IAAI,CAAC,IAAI,OAAO,CAAC,OAAO,CAAC,oBAAoB,EAAE;YAC7C,MAAM,IAAI,MAAM;QAClB;QAEA,MAAM,CAAC,aAAa,YAAY,GAAG,MAAM,MAAM,IAAI,CACjD,CAAA,GAAA,uIAAA,CAAA,wBAAqB,AAAD,EAAE,IAAI,OAAO,CAAC,OAAO,CAAC,oBAAoB,GAC9D,CAAA,GAAA,uIAAA,CAAA,oBAAiB,AAAD,EAAE,IAAI,OAAO,CAAC,OAAO,CAAC,oBAAoB;QAG5D,OAAO;YACL;YACA;QACF;IACF;AACF","debugId":null}},
    {"offset": {"line": 615, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 621, "column": 0}, "map": {"version":3,"sources":["file:///Users/andreicruceru/comment.video/packages/api/src/router/organization.ts"],"sourcesContent":["import type { TRPCRouterRecord } from \"@trpc/server\";\nimport { TRPCError } from \"@trpc/server\";\n\nimport { eq } from \"@acme/db\";\nimport { subscription } from \"@acme/db/schema\";\n\nimport { protectedProcedure } from \"../trpc\";\n\nexport const organizationRouter = {\n  subscription: protectedProcedure.query(async ({ ctx }) => {\n    const { session } = ctx;\n    if (!session.session.activeOrganizationId) {\n      throw new TRPCError({\n        code: \"UNAUTHORIZED\",\n        message: \"No active organization\",\n      });\n    }\n    const sub = await ctx.db.query.subscription.findFirst({\n      where: eq(subscription.referenceId, session.session.activeOrganizationId),\n    });\n    return sub ?? null;\n  }),\n} satisfies TRPCRouterRecord;\n"],"names":[],"mappings":";;;AACA;AAAA;AAEA;AAAA;AACA;AAAA;AAEA;;;;;AAEO,MAAM,qBAAqB;IAChC,cAAc,8HAAA,CAAA,qBAAkB,CAAC,KAAK,CAAC,OAAO,EAAE,GAAG,EAAE;QACnD,MAAM,EAAE,OAAO,EAAE,GAAG;QACpB,IAAI,CAAC,QAAQ,OAAO,CAAC,oBAAoB,EAAE;YACzC,MAAM,IAAI,0MAAA,CAAA,YAAS,CAAC;gBAClB,MAAM;gBACN,SAAS;YACX;QACF;QACA,MAAM,MAAM,MAAM,IAAI,EAAE,CAAC,KAAK,CAAC,YAAY,CAAC,SAAS,CAAC;YACpD,OAAO,CAAA,GAAA,kKAAA,CAAA,KAAE,AAAD,EAAE,uIAAA,CAAA,eAAY,CAAC,WAAW,EAAE,QAAQ,OAAO,CAAC,oBAAoB;QAC1E;QACA,OAAO,OAAO;IAChB;AACF","debugId":null}},
    {"offset": {"line": 650, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 656, "column": 0}, "map": {"version":3,"sources":["file:///Users/andreicruceru/comment.video/packages/api/src/router/reviewer.ts"],"sourcesContent":["import type { TRPCRouterRecord } from \"@trpc/server\";\nimport { z } from \"zod\";\n\nimport { publicProcedure } from \"../trpc\";\n\nexport const reviewerRouter = {\n  byVideoId: publicProcedure.input(z.string()).query(async ({ ctx, input }) => {\n    const reviewers = await ctx.db.query.Reviewers.findMany({\n      where: (reviewer, { eq }) => eq(reviewer.videoId, input),\n      with: {\n        user: true,\n      },\n    });\n\n    return reviewers;\n  }),\n} satisfies TRPCRouterRecord;\n"],"names":[],"mappings":";;;AACA;AAEA;;;AAEO,MAAM,iBAAiB;IAC5B,WAAW,8HAAA,CAAA,kBAAe,CAAC,KAAK,CAAC,oIAAA,CAAA,IAAC,CAAC,MAAM,IAAI,KAAK,CAAC,OAAO,EAAE,GAAG,EAAE,KAAK,EAAE;QACtE,MAAM,YAAY,MAAM,IAAI,EAAE,CAAC,KAAK,CAAC,SAAS,CAAC,QAAQ,CAAC;YACtD,OAAO,CAAC,UAAU,EAAE,EAAE,EAAE,GAAK,GAAG,SAAS,OAAO,EAAE;YAClD,MAAM;gBACJ,MAAM;YACR;QACF;QAEA,OAAO;IACT;AACF","debugId":null}},
    {"offset": {"line": 674, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 688, "column": 0}, "map": {"version":3,"sources":["file:///Users/andreicruceru/comment.video/packages/api/src/router/video.ts"],"sourcesContent":["import type { TRPCRouterRecord } from \"@trpc/server\";\nimport {\n  InvocationType,\n  InvokeCommand,\n  LambdaClient,\n} from \"@aws-sdk/client-lambda\";\nimport { z } from \"zod\";\n\nimport { eq } from \"@acme/db\";\nimport { Video } from \"@acme/db/schema\";\n\nimport { protectedProcedure, publicProcedure } from \"../trpc\";\n\nexport const videoRouter = {\n  create: protectedProcedure\n    .input(\n      z.object({\n        title: z.string(),\n      }),\n    )\n    .mutation(async ({ ctx, input }) => {\n      if (!ctx.session.session.activeOrganizationId) {\n        throw new Error(\"No active organization\");\n      }\n      return ctx.db\n        .insert(Video)\n        .values({\n          title: input.title,\n          organizationId: ctx.session.session.activeOrganizationId,\n        })\n        .returning({ id: Video.id });\n    }),\n  all: protectedProcedure.query(async ({ ctx }) => {\n    if (!ctx.session.session.activeOrganizationId) {\n      throw new Error(\"No active organization\");\n    }\n    return ctx.db.query.Video.findMany({\n      where: eq(Video.organizationId, ctx.session.session.activeOrganizationId),\n    });\n  }),\n  delete: protectedProcedure\n    .input(z.string())\n    .mutation(async ({ ctx, input }) => {\n      return ctx.db.delete(Video).where(eq(Video.id, input));\n    }),\n  rename: protectedProcedure\n    .input(\n      z.object({\n        id: z.string(),\n        title: z.string(),\n      }),\n    )\n    .mutation(async ({ ctx, input }) => {\n      return ctx.db\n        .update(Video)\n        .set({ title: input.title })\n        .where(eq(Video.id, input.id))\n        .returning({ id: Video.id });\n    }),\n  byId: publicProcedure.input(z.string()).query(async ({ ctx, input }) => {\n    return ctx.db.query.Video.findFirst({\n      where: eq(Video.id, input),\n    });\n  }),\n  thumbnailCheck: protectedProcedure\n    .input(z.string())\n    .mutation(async ({ ctx, input }) => {\n      const video = await ctx.db.query.Video.findFirst({\n        where: eq(Video.id, input),\n      });\n\n      if (!video) {\n        throw new Error(\"Video not found\");\n      }\n\n      const url = video.url;\n\n      if (!url) {\n        throw new Error(\"Video URL not found\");\n      }\n\n      // Extract key from URL\n      // Assuming URL format is something like: https://example.com/path/to/key\n      const urlParts = url.split(\"/\");\n      const key = `${input}/${urlParts[urlParts.length - 1]}`;\n\n      // Initialize the Lambda client\n      const lambdaClient = new LambdaClient(); // Replace with your AWS region\n\n      // Prepare the Lambda invocation parameters\n      const params = {\n        FunctionName:\n          \"comment-video-production-GenerateThumbnailsFunction-mvwebmet\", // Replace with your actual Lambda function name\n        InvocationType: InvocationType.RequestResponse,\n        Payload: JSON.stringify({ key }),\n      };\n\n      // Invoke the Lambda function\n      const command = new InvokeCommand(params);\n      const response = await lambdaClient.send(command);\n\n      // Process the response\n      let responsePayload = {};\n      if (response.Payload) {\n        const textDecoder = new TextDecoder();\n        const jsonString = textDecoder.decode(response.Payload);\n        responsePayload = JSON.parse(jsonString);\n      }\n\n      return {\n        success: true,\n        key,\n        response: responsePayload,\n      };\n    }),\n} satisfies TRPCRouterRecord;\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 787, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 793, "column": 0}, "map": {"version":3,"sources":["file:///Users/andreicruceru/comment.video/packages/api/src/root.ts"],"sourcesContent":["import { authRouter } from \"./router/auth\";\nimport { awsRouter } from \"./router/aws\";\nimport { commentRouter } from \"./router/comment\";\nimport { limitsRouter } from \"./router/limits\";\nimport { organizationRouter } from \"./router/organization\";\nimport { reviewerRouter } from \"./router/reviewer\";\nimport { videoRouter } from \"./router/video\";\nimport { createTRPCRouter } from \"./trpc\";\n\nexport const appRouter = createTRPCRouter({\n  auth: authRouter,\n  aws: awsRouter,\n  video: videoRouter,\n  comment: commentRouter,\n  limits: limitsRouter,\n  reviewer: reviewerRouter,\n  organization: organizationRouter,\n});\n\n// export type definition of API\nexport type AppRouter = typeof appRouter;\n"],"names":[],"mappings":";;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;AAEO,MAAM,YAAY,CAAA,GAAA,8HAAA,CAAA,mBAAgB,AAAD,EAAE;IACxC,MAAM,wIAAA,CAAA,aAAU;IAChB,KAAK,uIAAA,CAAA,YAAS;IACd,OAAO,yIAAA,CAAA,cAAW;IAClB,SAAS,2IAAA,CAAA,gBAAa;IACtB,QAAQ,0IAAA,CAAA,eAAY;IACpB,UAAU,4IAAA,CAAA,iBAAc;IACxB,cAAc,gJAAA,CAAA,qBAAkB;AAClC","debugId":null}},
    {"offset": {"line": 821, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 827, "column": 0}, "map": {"version":3,"sources":["file:///Users/andreicruceru/comment.video/packages/api/src/index.ts"],"sourcesContent":["import type { inferRouterInputs, inferRouterOutputs } from \"@trpc/server\";\n\nimport type { AppRouter } from \"./root\";\nimport { appRouter } from \"./root\";\nimport { createCallerFactory, createTRPCContext } from \"./trpc\";\n\n/**\n * Create a server-side caller for the tRPC API\n * @example\n * const trpc = createCaller(createContext);\n * const res = await trpc.post.all();\n *       ^? Post[]\n */\nconst createCaller = createCallerFactory(appRouter);\n\n/**\n * Inference helpers for input types\n * @example\n * type PostByIdInput = RouterInputs['post']['byId']\n *      ^? { id: number }\n **/\ntype RouterInputs = inferRouterInputs<AppRouter>;\n\n/**\n * Inference helpers for output types\n * @example\n * type AllPostsOutput = RouterOutputs['post']['all']\n *      ^? Post[]\n **/\ntype RouterOutputs = inferRouterOutputs<AppRouter>;\n\nexport { createTRPCContext, appRouter, createCaller };\nexport type { AppRouter, RouterInputs, RouterOutputs };\n"],"names":[],"mappings":";;;AAGA;AACA;;;AAEA;;;;;;CAMC,GACD,MAAM,eAAe,CAAA,GAAA,8HAAA,CAAA,sBAAmB,AAAD,EAAE,8HAAA,CAAA,YAAS","debugId":null}},
    {"offset": {"line": 842, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 858, "column": 0}, "map": {"version":3,"sources":["file:///Users/andreicruceru/comment.video/apps/nextjs/src/trpc/query-client.ts"],"sourcesContent":["import {\n  defaultShouldDehydrateQuery,\n  QueryClient,\n} from \"@tanstack/react-query\";\nimport SuperJSON from \"superjson\";\n\nexport const createQueryClient = () =>\n  new QueryClient({\n    defaultOptions: {\n      queries: {\n        // With SSR, we usually want to set some default staleTime\n        // above 0 to avoid refetching immediately on the client\n        staleTime: 30 * 1000,\n      },\n      dehydrate: {\n        serializeData: SuperJSON.serialize,\n        shouldDehydrateQuery: (query) =>\n          defaultShouldDehydrateQuery(query) ||\n          query.state.status === \"pending\",\n        shouldRedactErrors: () => {\n          // We should not catch Next.js server errors\n          // as that's how Next.js detects dynamic pages\n          // so we cannot redact them.\n          // Next.js also automatically redacts errors for us\n          // with better digests.\n          return false;\n        },\n      },\n      hydrate: {\n        deserializeData: SuperJSON.deserialize,\n      },\n    },\n  });\n"],"names":[],"mappings":";;;AAAA;AAAA;AAIA;;;AAEO,MAAM,oBAAoB,IAC/B,IAAI,6KAAA,CAAA,cAAW,CAAC;QACd,gBAAgB;YACd,SAAS;gBACP,0DAA0D;gBAC1D,wDAAwD;gBACxD,WAAW,KAAK;YAClB;YACA,WAAW;gBACT,eAAe,0IAAA,CAAA,UAAS,CAAC,SAAS;gBAClC,sBAAsB,CAAC,QACrB,CAAA,GAAA,2KAAA,CAAA,8BAA2B,AAAD,EAAE,UAC5B,MAAM,KAAK,CAAC,MAAM,KAAK;gBACzB,oBAAoB;oBAClB,4CAA4C;oBAC5C,8CAA8C;oBAC9C,4BAA4B;oBAC5B,mDAAmD;oBACnD,uBAAuB;oBACvB,OAAO;gBACT;YACF;YACA,SAAS;gBACP,iBAAiB,0IAAA,CAAA,UAAS,CAAC,WAAW;YACxC;QACF;IACF","debugId":null}},
    {"offset": {"line": 890, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 896, "column": 0}, "map": {"version":3,"sources":["file:///Users/andreicruceru/comment.video/apps/nextjs/src/trpc/server.tsx"],"sourcesContent":["import type { TRPCQueryOptions } from \"@trpc/tanstack-react-query\";\nimport { cache } from \"react\";\nimport { headers } from \"next/headers\";\nimport { dehydrate, HydrationBoundary } from \"@tanstack/react-query\";\nimport { createTRPCOptionsProxy } from \"@trpc/tanstack-react-query\";\n\nimport type { AppRouter } from \"@acme/api\";\nimport { appRouter, createTRPCContext } from \"@acme/api\";\n\nimport { createQueryClient } from \"./query-client\";\n\n/**\n * This wraps the `createTRPCContext` helper and provides the required context for the tRPC API when\n * handling a tRPC call from a React Server Component.\n */\nconst createContext = cache(async () => {\n  const heads = new Headers(await headers());\n  heads.set(\"x-trpc-source\", \"rsc\");\n\n  return createTRPCContext({\n    headers: heads,\n  });\n});\n\nexport const getQueryClient = cache(createQueryClient);\n\nexport const trpc = createTRPCOptionsProxy<AppRouter>({\n  router: appRouter,\n  ctx: createContext,\n  queryClient: getQueryClient,\n});\n\nexport function HydrateClient(props: { children: React.ReactNode }) {\n  const queryClient = getQueryClient();\n  return (\n    <HydrationBoundary state={dehydrate(queryClient)}>\n      {props.children}\n    </HydrationBoundary>\n  );\n}\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nexport function prefetch<T extends ReturnType<TRPCQueryOptions<any>>>(\n  queryOptions: T,\n) {\n  const queryClient = getQueryClient();\n  if (queryOptions.queryKey[1]?.type === \"infinite\") {\n    // eslint-disable-next-line @typescript-eslint/no-unsafe-argument, @typescript-eslint/no-explicit-any\n    void queryClient.prefetchInfiniteQuery(queryOptions as any);\n  } else {\n    void queryClient.prefetchQuery(queryOptions);\n  }\n}\n"],"names":[],"mappings":";;;;;;;AACA;AACA;AACA;AAAA;AACA;AAAA;AAGA;AAAA;AAAA;AAEA;;;;;;;;AAEA;;;CAGC,GACD,MAAM,gBAAgB,CAAA,GAAA,qMAAA,CAAA,QAAK,AAAD,EAAE;IAC1B,MAAM,QAAQ,IAAI,QAAQ,MAAM,CAAA,GAAA,+HAAA,CAAA,UAAO,AAAD;IACtC,MAAM,GAAG,CAAC,iBAAiB;IAE3B,OAAO,CAAA,GAAA,8HAAA,CAAA,oBAAiB,AAAD,EAAE;QACvB,SAAS;IACX;AACF;AAEO,MAAM,iBAAiB,CAAA,GAAA,qMAAA,CAAA,QAAK,AAAD,EAAE,gJAAA,CAAA,oBAAiB;AAE9C,MAAM,OAAO,CAAA,GAAA,gMAAA,CAAA,yBAAsB,AAAD,EAAa;IACpD,QAAQ,8HAAA,CAAA,YAAS;IACjB,KAAK;IACL,aAAa;AACf;AAEO,SAAS,cAAc,KAAoC;IAChE,MAAM,cAAc;IACpB,qBACE,8OAAC,oLAAA,CAAA,oBAAiB;QAAC,OAAO,CAAA,GAAA,2KAAA,CAAA,YAAS,AAAD,EAAE;kBACjC,MAAM,QAAQ;;;;;;AAGrB;AAEO,SAAS,SACd,YAAe;IAEf,MAAM,cAAc;IACpB,IAAI,aAAa,QAAQ,CAAC,EAAE,EAAE,SAAS,YAAY;QACjD,qGAAqG;QACrG,KAAK,YAAY,qBAAqB,CAAC;IACzC,OAAO;QACL,KAAK,YAAY,aAAa,CAAC;IACjC;AACF","debugId":null}},
    {"offset": {"line": 956, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 962, "column": 0}, "map": {"version":3,"sources":["file:///Users/andreicruceru/comment.video/apps/nextjs/src/app/%28dashboard%29/%5Bworkspace%5D/_components/members-section.tsx/proxy.mjs"],"sourcesContent":["import { registerClientReference } from \"react-server-dom-turbopack/server.edge\";\nexport const MembersSection = registerClientReference(\n    function() { throw new Error(\"Attempted to call MembersSection() from the server but MembersSection is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/apps/nextjs/src/app/(dashboard)/[workspace]/_components/members-section.tsx <module evaluation>\",\n    \"MembersSection\",\n);\n"],"names":[],"mappings":";;;AAAA;;AACO,MAAM,iBAAiB,CAAA,GAAA,qPAAA,CAAA,0BAAuB,AAAD,EAChD;IAAa,MAAM,IAAI,MAAM;AAA4O,GACzQ,6GACA","debugId":null}},
    {"offset": {"line": 970, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 976, "column": 0}, "map": {"version":3,"sources":["file:///Users/andreicruceru/comment.video/apps/nextjs/src/app/%28dashboard%29/%5Bworkspace%5D/_components/members-section.tsx/proxy.mjs"],"sourcesContent":["import { registerClientReference } from \"react-server-dom-turbopack/server.edge\";\nexport const MembersSection = registerClientReference(\n    function() { throw new Error(\"Attempted to call MembersSection() from the server but MembersSection is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/apps/nextjs/src/app/(dashboard)/[workspace]/_components/members-section.tsx\",\n    \"MembersSection\",\n);\n"],"names":[],"mappings":";;;AAAA;;AACO,MAAM,iBAAiB,CAAA,GAAA,qPAAA,CAAA,0BAAuB,AAAD,EAChD;IAAa,MAAM,IAAI,MAAM;AAA4O,GACzQ,yFACA","debugId":null}},
    {"offset": {"line": 984, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 990, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 994, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 1000, "column": 0}, "map": {"version":3,"sources":["file:///Users/andreicruceru/comment.video/apps/nextjs/src/app/%28dashboard%29/%5Bworkspace%5D/_components/video-dropzone.tsx/proxy.mjs"],"sourcesContent":["import { registerClientReference } from \"react-server-dom-turbopack/server.edge\";\nexport const VideoDropzone = registerClientReference(\n    function() { throw new Error(\"Attempted to call VideoDropzone() from the server but VideoDropzone is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/apps/nextjs/src/app/(dashboard)/[workspace]/_components/video-dropzone.tsx <module evaluation>\",\n    \"VideoDropzone\",\n);\n"],"names":[],"mappings":";;;AAAA;;AACO,MAAM,gBAAgB,CAAA,GAAA,qPAAA,CAAA,0BAAuB,AAAD,EAC/C;IAAa,MAAM,IAAI,MAAM;AAA0O,GACvQ,4GACA","debugId":null}},
    {"offset": {"line": 1008, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 1014, "column": 0}, "map": {"version":3,"sources":["file:///Users/andreicruceru/comment.video/apps/nextjs/src/app/%28dashboard%29/%5Bworkspace%5D/_components/video-dropzone.tsx/proxy.mjs"],"sourcesContent":["import { registerClientReference } from \"react-server-dom-turbopack/server.edge\";\nexport const VideoDropzone = registerClientReference(\n    function() { throw new Error(\"Attempted to call VideoDropzone() from the server but VideoDropzone is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/apps/nextjs/src/app/(dashboard)/[workspace]/_components/video-dropzone.tsx\",\n    \"VideoDropzone\",\n);\n"],"names":[],"mappings":";;;AAAA;;AACO,MAAM,gBAAgB,CAAA,GAAA,qPAAA,CAAA,0BAAuB,AAAD,EAC/C;IAAa,MAAM,IAAI,MAAM;AAA0O,GACvQ,wFACA","debugId":null}},
    {"offset": {"line": 1022, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 1028, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 1032, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 1038, "column": 0}, "map": {"version":3,"sources":["file:///Users/andreicruceru/comment.video/apps/nextjs/src/app/%28dashboard%29/%5Bworkspace%5D/_components/video-list/video-list.tsx/proxy.mjs"],"sourcesContent":["import { registerClientReference } from \"react-server-dom-turbopack/server.edge\";\nexport const VideoList = registerClientReference(\n    function() { throw new Error(\"Attempted to call VideoList() from the server but VideoList is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/apps/nextjs/src/app/(dashboard)/[workspace]/_components/video-list/video-list.tsx <module evaluation>\",\n    \"VideoList\",\n);\n"],"names":[],"mappings":";;;AAAA;;AACO,MAAM,YAAY,CAAA,GAAA,qPAAA,CAAA,0BAAuB,AAAD,EAC3C;IAAa,MAAM,IAAI,MAAM;AAAkO,GAC/P,mHACA","debugId":null}},
    {"offset": {"line": 1046, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 1052, "column": 0}, "map": {"version":3,"sources":["file:///Users/andreicruceru/comment.video/apps/nextjs/src/app/%28dashboard%29/%5Bworkspace%5D/_components/video-list/video-list.tsx/proxy.mjs"],"sourcesContent":["import { registerClientReference } from \"react-server-dom-turbopack/server.edge\";\nexport const VideoList = registerClientReference(\n    function() { throw new Error(\"Attempted to call VideoList() from the server but VideoList is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/apps/nextjs/src/app/(dashboard)/[workspace]/_components/video-list/video-list.tsx\",\n    \"VideoList\",\n);\n"],"names":[],"mappings":";;;AAAA;;AACO,MAAM,YAAY,CAAA,GAAA,qPAAA,CAAA,0BAAuB,AAAD,EAC3C;IAAa,MAAM,IAAI,MAAM;AAAkO,GAC/P,+FACA","debugId":null}},
    {"offset": {"line": 1060, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 1066, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 1070, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 1076, "column": 0}, "map": {"version":3,"sources":["file:///Users/andreicruceru/comment.video/apps/nextjs/src/app/%28dashboard%29/%5Bworkspace%5D/page.tsx"],"sourcesContent":["import { HydrateClient, prefetch, trpc } from \"~/trpc/server\";\nimport { MembersSection } from \"./_components/members-section\";\nimport { VideoDropzone } from \"./_components/video-dropzone\";\nimport { VideoList } from \"./_components/video-list/video-list\";\n\nexport default function HomePage() {\n  // You can await this here if you don't want to show Suspense fallback below\n  prefetch(trpc.video.all.queryOptions());\n\n  return (\n    <HydrateClient>\n      <div className=\"flex flex-col gap-6 p-4\">\n        <VideoDropzone />\n        {/* <AuthShowcase /> */}\n\n        <VideoList />\n\n        {/* Members section below the video list */}\n        <div className=\"mt-6\">\n          <MembersSection />\n        </div>\n      </div>\n    </HydrateClient>\n  );\n}\n"],"names":[],"mappings":";;;;AAAA;AACA;AACA;AACA;;;;;;AAEe,SAAS;IACtB,4EAA4E;IAC5E,CAAA,GAAA,wIAAA,CAAA,WAAQ,AAAD,EAAE,wIAAA,CAAA,OAAI,CAAC,KAAK,CAAC,GAAG,CAAC,YAAY;IAEpC,qBACE,8OAAC,wIAAA,CAAA,gBAAa;kBACZ,cAAA,8OAAC;YAAI,WAAU;;8BACb,8OAAC,mMAAA,CAAA,gBAAa;;;;;8BAGd,8OAAC,gNAAA,CAAA,YAAS;;;;;8BAGV,8OAAC;oBAAI,WAAU;8BACb,cAAA,8OAAC,oMAAA,CAAA,iBAAc;;;;;;;;;;;;;;;;;;;;;AAKzB","debugId":null}},
    {"offset": {"line": 1130, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}