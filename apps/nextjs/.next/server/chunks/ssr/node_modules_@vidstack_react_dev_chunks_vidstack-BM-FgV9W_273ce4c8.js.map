{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 7, "column": 0}, "map": {"version":3,"sources":["file:///Users/andreicruceru/comment.video/node_modules/%40vidstack/react/dev/chunks/vidstack-BM-FgV9W.js"],"sourcesContent":["\"use client\"\n\nimport { IS_CHROME, canGoogleCastSrc, IS_IOS, IS_SERVER, loadScript } from './vidstack-DUlCophs.js';\nimport { listenEvent, peek } from './vidstack-D_bWd66h.js';\n\nfunction getCastFrameworkURL() {\n  return \"https://www.gstatic.com/cv/js/sender/v1/cast_sender.js?loadCastFramework=1\";\n}\nfunction hasLoadedCastFramework() {\n  return !!window.cast?.framework;\n}\nfunction isCastAvailable() {\n  return !!window.chrome?.cast?.isAvailable;\n}\nfunction isCastConnected() {\n  return getCastContext().getCastState() === cast.framework.CastState.CONNECTED;\n}\nfunction getCastContext() {\n  return window.cast.framework.CastContext.getInstance();\n}\nfunction getCastSession() {\n  return getCastContext().getCurrentSession();\n}\nfunction getCastSessionMedia() {\n  return getCastSession()?.getSessionObj().media[0];\n}\nfunction hasActiveCastSession(src) {\n  const contentId = getCastSessionMedia()?.media.contentId;\n  return contentId === src?.src;\n}\nfunction getDefaultCastOptions() {\n  return {\n    language: \"en-US\",\n    autoJoinPolicy: chrome.cast.AutoJoinPolicy.ORIGIN_SCOPED,\n    receiverApplicationId: chrome.cast.media.DEFAULT_MEDIA_RECEIVER_APP_ID,\n    resumeSavedSession: true,\n    androidReceiverCompatible: true\n  };\n}\nfunction getCastErrorMessage(code) {\n  const defaultMessage = `Google Cast Error Code: ${code}`;\n  {\n    switch (code) {\n      case chrome.cast.ErrorCode.API_NOT_INITIALIZED:\n        return \"The API is not initialized.\";\n      case chrome.cast.ErrorCode.CANCEL:\n        return \"The operation was canceled by the user\";\n      case chrome.cast.ErrorCode.CHANNEL_ERROR:\n        return \"A channel to the receiver is not available.\";\n      case chrome.cast.ErrorCode.EXTENSION_MISSING:\n        return \"The Cast extension is not available.\";\n      case chrome.cast.ErrorCode.INVALID_PARAMETER:\n        return \"The parameters to the operation were not valid.\";\n      case chrome.cast.ErrorCode.RECEIVER_UNAVAILABLE:\n        return \"No receiver was compatible with the session request.\";\n      case chrome.cast.ErrorCode.SESSION_ERROR:\n        return \"A session could not be created, or a session was invalid.\";\n      case chrome.cast.ErrorCode.TIMEOUT:\n        return \"The operation timed out.\";\n      default:\n        return defaultMessage;\n    }\n  }\n}\nfunction listenCastContextEvent(type, handler) {\n  return listenEvent(getCastContext(), type, handler);\n}\n\nclass GoogleCastLoader {\n  name = \"google-cast\";\n  target;\n  #player;\n  /**\n   * @see {@link https://developers.google.com/cast/docs/reference/web_sender/cast.framework.CastContext}\n   */\n  get cast() {\n    return getCastContext();\n  }\n  mediaType() {\n    return \"video\";\n  }\n  canPlay(src) {\n    return IS_CHROME && !IS_IOS && canGoogleCastSrc(src);\n  }\n  async prompt(ctx) {\n    let loadEvent, openEvent, errorEvent;\n    try {\n      loadEvent = await this.#loadCastFramework(ctx);\n      if (!this.#player) {\n        this.#player = new cast.framework.RemotePlayer();\n        new cast.framework.RemotePlayerController(this.#player);\n      }\n      openEvent = ctx.player.createEvent(\"google-cast-prompt-open\", {\n        trigger: loadEvent\n      });\n      ctx.player.dispatchEvent(openEvent);\n      this.#notifyRemoteStateChange(ctx, \"connecting\", openEvent);\n      await this.#showPrompt(peek(ctx.$props.googleCast));\n      ctx.$state.remotePlaybackInfo.set({\n        deviceName: getCastSession()?.getCastDevice().friendlyName\n      });\n      if (isCastConnected()) this.#notifyRemoteStateChange(ctx, \"connected\", openEvent);\n    } catch (code) {\n      const error = code instanceof Error ? code : this.#createError(\n        (code + \"\").toUpperCase(),\n        \"Prompt failed.\"\n      );\n      errorEvent = ctx.player.createEvent(\"google-cast-prompt-error\", {\n        detail: error,\n        trigger: openEvent ?? loadEvent,\n        cancelable: true\n      });\n      ctx.player.dispatch(errorEvent);\n      this.#notifyRemoteStateChange(\n        ctx,\n        isCastConnected() ? \"connected\" : \"disconnected\",\n        errorEvent\n      );\n      throw error;\n    } finally {\n      ctx.player.dispatch(\"google-cast-prompt-close\", {\n        trigger: errorEvent ?? openEvent ?? loadEvent\n      });\n    }\n  }\n  async load(ctx) {\n    if (IS_SERVER) {\n      throw Error(\"[vidstack] can not load google cast provider server-side\");\n    }\n    if (!this.#player) {\n      throw Error(\"[vidstack] google cast player was not initialized\");\n    }\n    return new (await import('./vidstack-CBaoV8XT.js')).GoogleCastProvider(this.#player, ctx);\n  }\n  async #loadCastFramework(ctx) {\n    if (hasLoadedCastFramework()) return;\n    const loadStartEvent = ctx.player.createEvent(\"google-cast-load-start\");\n    ctx.player.dispatch(loadStartEvent);\n    await loadScript(getCastFrameworkURL());\n    await customElements.whenDefined(\"google-cast-launcher\");\n    const loadedEvent = ctx.player.createEvent(\"google-cast-loaded\", { trigger: loadStartEvent });\n    ctx.player.dispatch(loadedEvent);\n    if (!isCastAvailable()) {\n      throw this.#createError(\"CAST_NOT_AVAILABLE\", \"Google Cast not available on this platform.\");\n    }\n    return loadedEvent;\n  }\n  async #showPrompt(options) {\n    this.#setOptions(options);\n    const errorCode = await this.cast.requestSession();\n    if (errorCode) {\n      throw this.#createError(\n        errorCode.toUpperCase(),\n        getCastErrorMessage(errorCode)\n      );\n    }\n  }\n  #setOptions(options) {\n    this.cast?.setOptions({\n      ...getDefaultCastOptions(),\n      ...options\n    });\n  }\n  #notifyRemoteStateChange(ctx, state, trigger) {\n    const detail = { type: \"google-cast\", state };\n    ctx.notify(\"remote-playback-change\", detail, trigger);\n  }\n  #createError(code, message) {\n    const error = Error(message);\n    error.code = code;\n    return error;\n  }\n}\n\nvar loader = /*#__PURE__*/Object.freeze({\n  __proto__: null,\n  GoogleCastLoader: GoogleCastLoader\n});\n\nexport { getCastContext, getCastErrorMessage, getCastSession, getCastSessionMedia, hasActiveCastSession, listenCastContextEvent, loader };\n"],"names":[],"mappings":"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","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 187, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}